<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>面试之性能优化</title>
      <link href="/undefined/1529.html"/>
      <url>/undefined/1529.html</url>
      
        <content type="html"><![CDATA[<h1 id="性能优化专题"><a href="#性能优化专题" class="headerlink" title="性能优化专题"></a>性能优化专题</h1><h2 id="1-tomcat性能优化"><a href="#1-tomcat性能优化" class="headerlink" title="1 tomcat性能优化"></a>1 tomcat性能优化</h2><h3 id="1-1-你怎样给tomcat调优"><a href="#1-1-你怎样给tomcat调优" class="headerlink" title="1.1 你怎样给tomcat调优"></a>1.1 你怎样给tomcat调优</h3><ol><li><code>JVM参数调优</code></li></ol><p>JVM中<code>-Xms&lt;size&gt;</code>表示JVM初始化堆的大小,<code>-Xmx&lt;size&gt;</code>表示JVM堆的最大值.这两和值的大小一般根据需要进行设置.当应用程序需要的内存超出堆的最大值时虚拟机就会提示内存移除,并且导致应用服务崩溃.因此一般建议堆的最大值设置为可用内存的最大值的80%.在catalina.bat中,设置<code>JAVA_OPTS='-Xms256m-Xmx512m'</code>,表示初始化内存为256MB,可以使用的最大内存为512MB.</p><ol start="2"><li><code>禁用DNS查询</code></li></ol><p>当web应用程序想要记录客户端的信息时,它也会记录客户端的IP地址或者通过域名服务器查找机器名转换为IP地址.DNS查询需要占用网络,并且包括可能从很多很远的服务器或者不起作用的服务器上去获取对应的IP的过程,这样会消耗颐堤港的时间.为了消除DNS查询对性能的影响,我们可以关闭DNS查询,方式时修改<code>server.xml</code>文件中的<code>enableLookups</code>参数值:</p><pre class=" language-xml"><code class="language-xml">&lt;ConnectorclassName="org.apache.coyote.tomcat4.CoyoteConnector"port="80"minProcessors="5"maxProcessors="75"enableLookups="false"redirectPort="8443"acceptCount="100"debug="0"connectionTimeout="20000"useURIValidationHack="false"disableUploadTimeout="true"/>Tomcat5&lt;Connectorport="80"maxThreads="150"minSpareThreads="25"maxSpareThreads="75"enableLookups="false"redirectPort="8443"acceptCount="100"debug="0"connectionTimeout="20000"disableUploadTimeout="true"/></code></pre><ol start="3"><li><code>调整线程数</code></li></ol><p>通过应用程序的连接器<code>(Connector)</code>进行性能控制的参数是创建的处理请求的线程数.Tomcat使用线程池加速响应速度来处理请求. 在Java中线程是程序运行时的路径, 是在一个程序中与其他控制线程无关的, 能够独立运行的代码段. 他们共享相同的地址空间. 多线程帮助程序员写出CPU最大利用率的高效程序,使空闲时间保持最低,从而接受更多的请求.</p><p><code>Tomcat4</code>中可以通过修改<code>minProcessors</code>和<code>maxProcessors</code>的值来控制线程数. 这些值在安装后就已经设定为默认值并且是足够使用的, 但是随着站点的扩容而改大这些值. <code>minProCessors</code>服务器启动时创建的处理请求的线程数应该足够处理一个小量的负载. 也就是说, 如果一天内每秒仅发生5次单击时间, 并且每个请求任务处理需要1秒中, 那么预先设置线程数为5就足够了. 但在你的站点访问量较大时就需要设置更大的线程数, 指定为参数<code>maxProcessors</code>的值.<code>maxProcessors</code>的值也是有上限的, 应防止流量不可控制(或者恶意的服务攻击),应同时加大这两盒参数. <code>web server</code>允许的最大连接数还受制于操作徐通的内核参数设置,通常Windows是2000个左右,Linux是1000个左右.</p><p>在 Tomcat5 对这些参数进行了调整，请看下面属性: </p><p><code>maxThreads Tomcat</code>使用线程来处理接收的每个请求。这个值表示Tomcat可创建的最大的线程数。</p><p><code>acceptCount</code>指定当所有可以使用的处理请求的线程数都被使用时，可以放到处理队列中的请求数，超过这个数的请求将不予处理。</p><p><code>connnection Timeout</code> 网络连接超时，单位：毫秒。设置为0表示永不超时，这样设置有隐患的。通常可设置为30000毫秒。</p><p><code>minSpareThreadsTomcat</code> 初始化时创建的线程数。</p><p><code>maxSpareThreads</code> 一旦创建的线程超过这个值，Tomcat 就会关闭不再需要的 socket线程。</p><p>最好的方式是多设置几次并且进行测试，观察响应时间和内存使用情况。在不同的机器、操作系统或虚拟机组合的情况下可能会不同，而且并不是所有人的web站点的流量都是一样的，因此没有一刀切的方案来确定线程数的值。</p><h3 id="1-2-如何加大Tomcat连接数"><a href="#1-2-如何加大Tomcat连接数" class="headerlink" title="1.2 如何加大Tomcat连接数"></a>1.2 如何加大Tomcat连接数</h3><p>在tomcat配置文件</p><p>server.xml中的＜Connector/&gt;配置中，和<code>连接数</code>相关的参数有：</p><p><code>minProcessors</code>:最小空闲连接线程数，用于提高系统处理性能，默认值为10</p><p><code>maxProcessors</code>:最大连接线程数，即：并发处理的最大请求数，默认值为75</p><p><code>acceptCount</code>:允许的最大连接数，应大于等于maxprocessors,默认值为100</p><p><code>enableLookups</code>:是否反查域名，取值为：true或false.为了提高处理能 力，应设置为false</p><p><code>connectionTimeout</code>:网络连接超时，单位：毫秒。设置为0表示永不超时，这样设置有隐患的。通常可设置为30000</p><p>毫秒。</p><p>其中和最大连接数相关的参数为maxProcessors和acceptCount.如果要加大并发连接数，应同时加大这两个参数。web server允许的最大连接数还受制于操作系统的内核参数设置，通常Windows是2000个左右，Linux是1000个左右。</p><p>tomcat5中的配置示例：</p><pre class=" language-xml"><code class="language-xml">&lt;Connectorport="8080"maxThreads="150"minSpareThreads="25"maxSpareThreads="75"enableLookups="false"redirectPort="8443"acceptCount="100"debug="0"connectionTimeout="20000"disableUploadTimeout="true"/></code></pre><p>对于其他端口的侦听配置，以此类推。</p><h3 id="1-3、怎样加大tomcat的内存"><a href="#1-3、怎样加大tomcat的内存" class="headerlink" title="1.3、怎样加大tomcat的内存"></a>1.3、怎样加大tomcat的内存</h3><p>首先检查程序有没有限入死循环,这个问题主要还是由这个问题 <code>java.lang.Out0fMemoryError:Javaheap space</code>引起的。第一次出现这样的的问题以后，引发了其他的问题。在网上一查可能是JAVA的堆栈设置太小的原因。</p><p>跟据网上的答案大致有这两种解决方法：</p><p>1、设置环境变量</p><p>解决方法：手动设置 <code>Heap size</code></p><p>修改`` TOMCAT_ HOME/bin/catalina.sh<code></code>setJAVA OPTS=-Xms32m-Xmx512m`</p><p>可以根据自己机器的内存进行更改。</p><p>2、``java-Xms32m-Xmx800m className`</p><p>就是在执行JAVA类文件时加上这个参数，其中className是需要执行的确类名。（包括包名）这个解决问题了。而且执行的速度比没有设置的时候快很多。如果在测试的时候可能会用Eclispe这时候就需要在 Eclipse-&gt;run-arguments中的VM arguments 中输入<code>－Xms32m-Xmx800m</code> 这个参数就可以了。</p><p>后来在Eclilpse中修改了启动参数，在VMarguments加入了<code>－Xms32m-Xmx800m</code>, 问题解决。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试之性能优化</title>
      <link href="/undefined/1529.html"/>
      <url>/undefined/1529.html</url>
      
        <content type="html"><![CDATA[<h1 id="JVM性能优化"><a href="#JVM性能优化" class="headerlink" title="JVM性能优化"></a>JVM性能优化</h1><h2 id="1-Java类加载过程"><a href="#1-Java类加载过程" class="headerlink" title="1 Java类加载过程"></a>1 Java类加载过程</h2><p>Java类加载需要经历以下7个过程:</p><ol><li><p><code>加载</code></p><p>加载是类加载的第一个过程,在这个阶段,将完成以下三件事情:</p><ul><li>通过一个类的全限定名获取该类的<code>二进制流</code></li><li>将该二进制流中的<code>静态存储结构</code>转化为方法去运行时的数据结构</li><li>在内存中生成该类的<code>Class</code>对象,作为该类的数据访问入口</li></ul></li><li><p><code>验证</code></p><p>验证的目的是为了确保Class文件的字节流中的信息不会危害到虚拟机, 在该阶段主要完成以下四种验证:</p><ul><li><code>文件格式验证</code>验证字节流是否符合Class文件规范,如主次版本号是否在当前虚拟机范围内,常量池中的常量是否有不被支持的类型.</li><li><code>元数据验证</code>对字节码描述的信息进行语义分析,如这个类是否有父类,是否继承了不被继承的类等</li><li><code>字节码验证</code>是整个验证过程中最复杂的一个阶段,通过验证数据流和控制流的分析,确定程序语义是否正确, 主要针对方法体的验证. 如: 方法中的类型转换是否正确,跳转指令是否正确等.</li><li><code>符号引用验证</code> 这个动作在后面的解析过程中发生, 主要是为了确保解析动作能正确执行</li></ul></li><li><p><code>准备</code></p><p>准备阶段是为类的静态变量分配内存并将其初始化为默认值,这些内存都将在方法区中进行分配. 准备阶段不分配类中的实例变量的内存,实例变量将会在对象实例化时随着对象一起分配在Java堆中.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> value<span class="token operator">=</span><span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在初始化阶段才会变为123</span></code></pre></li><li><p><code>解析</code></p><p>该阶段主要完成符号引用到直接引用的转换动作. 解析动作并不一定在初始化动作完成之前, 也有可能在初始化之后.</p></li><li><p><code>初始化</code></p><p>初始化时类加载的最后一步, 前面的类加载过程, 除了在加载阶段用户应用程序可以通过自定义类加载器参与之外, 其余动作完全由虚拟机主导和控制. 到了初始化阶段, 才真正开始执行类中的定义的java程序代码.</p></li><li><p><code>使用</code></p></li><li><p><code>卸载</code></p></li></ol><h2 id="2-Java内存分配"><a href="#2-Java内存分配" class="headerlink" title="2 Java内存分配"></a>2 Java内存分配</h2><ul><li><code>寄存器</code>: 我们无法控制</li><li><code>静态域</code>: static定义的静态成员</li><li><code>常量池</code>: 编译时被确定保存在<strong><code>.class</code></strong>文件中的<code>(final)</code>常量值和一些文本修饰的符号引用(类和接口的全限定名, 字段的名称和描述符, 方法的名称和描述符)</li><li><code>非RAM存储</code>: 硬盘等永久存储空间</li><li><code>堆内存</code>: new创建的对象和数组, 由Java虚拟机自动垃圾回收器管理,存取速度慢.</li><li><code>栈内存</code>: 基本类型的变量和对象的引用变量(堆内存空间的访问地址), 速度快,可以共享, 但是大小与生命周期必须确定,缺乏灵活性.</li></ul><blockquote><p>Java堆的结构是什么样子的? 什么是堆中的永久代<strong><code>(Perm Genspace)</code></strong>?</p></blockquote><p>JVM的堆是运行时数据区, 所有类的实例和数组都是在堆上分配内存. 它在JVM启动的时候被创建. 对象所占的堆内存是由自动内存管理系统也就是垃圾收集器回收.</p><p>堆内存是由存活和死亡的对象组成的.存活的对象是应用可以访问的,不会被垃圾回收.死亡的对象是应用不可访问尚且还没有被垃圾收集器回收掉的对象. 一直到垃圾收集器把这些对象回收掉之前,他们会一直占据堆内存空间.</p><h2 id="3-描述以下JVM加载Class文件的原理机制"><a href="#3-描述以下JVM加载Class文件的原理机制" class="headerlink" title="3 描述以下JVM加载Class文件的原理机制?"></a>3 描述以下JVM加载Class文件的原理机制?</h2><p>Java语言是一种具有动态性的解释型语言,类(Class)只有被加载到JVM后才能运行. 当运行指定程序时, JVM会将编译生成的<code>.class</code>文件按照需求和一定的规则加载到内存中,并组织成为一个完整的Java应用程序.这个加载过程是由类加载器完成,具体来说,就是由ClassLoader和它的子类来实现的. 类加载器本身也是一个类, 其实质是把类文件从硬盘读取到内存中.</p><p>类的加载方式分为<code>隐式加载</code>和<code>显示加载</code>. 隐式加载指的是程序在使用new 等方式创建对象时, 会隐式的调用类的加载器把对应的类加载到JVM中. 显示加载指的是通过直接调用<code>class.forName()</code>方法来把所需的类加载到JVM中.</p><p>任何一个工程项目都是由许多类组成的,当程序启动时, 只把需要的类加载到JVM中, 其他类只有被使用到的时候才会被加载, 采用这种方法一方面可以加快加载速度, 另一方面可以节约程序运行时对内存的开销. 此外, 在Java语言中, 每个类或接口都对应一个<code>.class</code>文件,这些文件可以堪称是一个个可以被动态加载的单元, 因此当只有部分类被修改时, 只需要重新编译变化的类即可, 而不需要重新编译所有文件, 因此加快了编译速度.</p><p>在Java语言中, 类的加载是动态的, 它并不会一次性将所有的类全部加载后再运行, 而是保证程序运行的基础类(例如基类)完成加载到JVM中, 至于其他类, 则再需要的时候才加载.</p><p>类加载的主要步骤:</p><ul><li>装载: 根据查找路径找到响应的class文件, 然后导入</li><li>链接: 链接又可分为3个小步:<ul><li>检查: 检查待加载的class文件的正确性</li><li>准备: 给类中的静态变量分配存储空间</li><li>解析: 将符号引用转换为直接引用(可选)</li></ul></li><li>初始化: 对静态变量和静态代码块执行初始化从左.</li></ul><h2 id="4-GC是什么-为什么要有GC"><a href="#4-GC是什么-为什么要有GC" class="headerlink" title="4 GC是什么? 为什么要有GC?"></a>4 GC是什么? 为什么要有GC?</h2><p>GC是垃圾手机的意思(GabageCollection), 内存处理是编程人员容易出现问题的地方, 忘记或者错误的内存回收会导致程序或系统的不稳定甚至崩溃, Java提供的GC功能可以自动检测对象是否超过作用域从而达到自动回收内存的目的,Java语言没有提供释放已分配内存的显示操作方法.</p><h2 id="5-简述Java垃圾回收机制"><a href="#5-简述Java垃圾回收机制" class="headerlink" title="5 简述Java垃圾回收机制"></a>5 简述Java垃圾回收机制</h2><p>在Java中, 程序员是不需要显示的去释放一个对象的内存的, 而是由虚拟机自行执行. 在JVM中, 只有一个垃圾回收线程, 它是低优先级的, 在正常情况下是不会执行的, 只有在虚拟机空闲或者当前堆内存不足时,才会触发执行, 扫描哪些没有被任何引用的对象, 并将它们添加到要回收的集合中, 进行回收.</p><h2 id="6-如何判断一个对象是否存活-或者GC对象的判定方法"><a href="#6-如何判断一个对象是否存活-或者GC对象的判定方法" class="headerlink" title="6 如何判断一个对象是否存活?(或者GC对象的判定方法)"></a>6 如何判断一个对象是否存活?(或者GC对象的判定方法)</h2><p>判断一个对象是否存活有两种方法:</p><ol><li><p><strong><code>引用计数法</code></strong></p><p>所谓引用技术法就是给每一个对象设置一个引用技术器, 每当有一个地方引用这个对象时, 就将计数器+1,引用失效时, 计数器就-1. 当一个对下那个的引用计数器为零时,说明此对象没有被引用, 也就是”死对象”, 将会进行垃圾回收.</p><blockquote><p>引用计数法有一个缺陷就是无法解决循环引用问题, 也就是说当对象A引用对象B, 对象B又引用着对象A,那么此时A , B对象的引用计数器都不为零, 也就法务完成垃圾回收, 所以主流的虚拟机都没有采用这种算法.</p></blockquote></li><li><p><strong><code>可达性算法(引用链法)</code></strong></p><p>该算法的思想是: 从一个被称为GC Roots的对象开始向下搜索, 如果一个对象到GC Roots没有任何引用链相连时,则说明此对象不可用.</p><p>在Java中可以作为GC Roots的对象有以下几种:</p><ul><li>虚拟机栈引用的对象</li><li>方法区类静态属性引用的对象</li><li>方法区常量池引用的对象</li><li>本地方法栈JNI引用的对象</li></ul><p>虽然这些算法可以判定一个对象是否能被回收, 但是当满足上述条件时,一个对象并不一定会被回收. 当一个对象不可达 GC Roots时, 这个对象并不会被立即回收, 而是出于一个死缓的阶段, 若要被真正的回收需要经历两次标记.</p><p>如果对象在可达性分析中没有与GC Roots的引用链, 那么此时就会被第一次标记并且进行一次筛选, 筛选的条件是: 是否有必要执行<code>finalize()</code>方法. 当对象没有覆盖<code>finalize()</code>方法或者已经被虚拟机调用过,那么就认为是没必要的; 如果该对象有必要执行<code>finalize()</code>方法, 那么这个对象将会放在一个成为F-Queue的队列中, 虚拟机会触发一个<code>Finalize()</code>线程去执行, 此线程是低优先级的, 并且虚拟机不会承诺一直等待它运行完, 这是因为如果finalize()执行缓慢或者发生了死锁, 那么就会造成F-Queue中的队形进行第二次被标记,这是该对象将被移出”即将回收”集合, 等待回收.</p></li></ol><h2 id="7-垃圾回收的优点和原理-并考虑2种回收机制"><a href="#7-垃圾回收的优点和原理-并考虑2种回收机制" class="headerlink" title="7 垃圾回收的优点和原理. 并考虑2种回收机制"></a>7 垃圾回收的优点和原理. 并考虑2种回收机制</h2><p>Java语言中一个显著的特点就是引入了垃圾回收机制, 使C++程序员最头疼的内存管理问题迎刃而解, 它使得Java程序员在编写程序的时候不需要再考虑内存管理. 由于有个垃圾回收机制, Java肿的对象不再有”作用域”的概念, 只有对象的引用才有”作用域”. 垃圾回收器通常是作为一个单独的低级别的线程运行, 不可预知的情况下对内存堆肿已经死亡的或者长时间没有使用的对象进行清除可回收, 程序员崩实时的调用垃圾回收器对某个对象或所有对象进行垃圾回收.</p><p>回收机制有<code>分代复制垃圾回收</code>和<code>标记垃圾回收</code>, <code>增量垃圾回收</code></p><h2 id="8-垃圾回收器的基本原理是什么-垃圾回收器可以马上回收内存码-有什么办法主动通知虚拟机进行垃圾回收"><a href="#8-垃圾回收器的基本原理是什么-垃圾回收器可以马上回收内存码-有什么办法主动通知虚拟机进行垃圾回收" class="headerlink" title="8 垃圾回收器的基本原理是什么?垃圾回收器可以马上回收内存码?有什么办法主动通知虚拟机进行垃圾回收?"></a>8 垃圾回收器的基本原理是什么?垃圾回收器可以马上回收内存码?有什么办法主动通知虚拟机进行垃圾回收?</h2><p>对于GC来说, 当程序员创建对象时, GC 就开始监控这个对象的地址\大小以及使用哦个情况. 通常GC采用有向图的方式记录和管理堆(heap)中的所有对象. 通过这种方式确定哪些对象是”可达的”, 哪些对象是”不可达的”. 当GC确定一些对象为”不可达”时,GC就有责任回收这些内存空间.</p><p>可以.</p><p>通过手动执行<strong><code>System.gc()</code></strong>, 通知GC运行, 但是Java语言规范并不保证GC一定会执行.</p><h2 id="9-Java中会存在内存泄漏吗-请简单描述"><a href="#9-Java中会存在内存泄漏吗-请简单描述" class="headerlink" title="9 Java中会存在内存泄漏吗,请简单描述"></a>9 Java中会存在内存泄漏吗,请简单描述</h2><p>所谓的<code>内存泄露</code>就是指一个不再被程序使用的对象或变量一直被占据再内存中.Java中的有垃圾回收机制,它可以保证一对象不再被引用的时候即对象编程孤儿的时候,对象将自动被垃圾回收器从内存中清除掉. 由于Java使用有向图的方式进行垃圾回收管理, 可以消除引用循环的问题,例如有两盒对象,相互引用,值要他们和根进行是不可达的,那么GC也是可以回收它们的,例如下面的代码可以看到这种情况的内存回收:</p><pre class=" language-Java"><code class="language-Java">import java.io.IOException; public class GarbageTest {/*** @param args* @throws IOException*/public static void main(String[] args) throws IOException {    // TODO Auto-generated method stub    try {         gcTest();    } catch (IOException e) {        // TODO Auto-generated catch block        e.printStackTrace();    }    System.out.println("has exited gcTest!"); System.in.read();    System.in.read();     System.out.println("out begin gc!");     for(inti=0;i<100;i++){        System.gc();        System.in.read();        System.in.read(); }    }    private static void gcTest() throws IOException {        System.in.read();        System.in.read();        Person p1 = new Person();         System.in.read();        System.in.read();        Person p2 = new Person();        p1.setMate(p2);        p2.setMate(p1);        System.out.println("before exit gctest!");         System.in.read();        System.in.read();        System.gc();         System.out.println("exit gctest!");    }    private static class Person {        byte[] data = new byte[20000000];        Person mate = null;        public void setMate(Person other) {            mate = other;        }    }}</code></pre><p><code>Java中的内存泄露的情况:</code></p><p>长声明周期的对象持有短生命周期对象的引用就很可能发生内存泄漏,尽管短生命周期对象已经不再需要,但是因为长生命周期对象持有它的引用而导致不能被回收,这就是Java中的内存泄漏发生场景,通俗地说,就是程序员可能创建了一个对象,以后一直不再使用这个对象,这个对象却一直被引用,即这个对象无用但是却无法被垃圾回收器回收的,这就是Java中可能出现内存泄漏的情况.</p><p>例如: 缓存系统,我们加载了一个对象放在缓存中(例如放再一个全局map对象中),然后一直不再使用它,这个对象一直被缓存引用,但却不再被使用.</p><p>检查Java中的内存泄漏,一定要让程序将各种分支情况都完整执行到程序结束,然后看某个对象是否被使用过,如果内有,则才能判定这个对象属于内存泄漏.</p><p>如果一个外部类的实例对象的方法返回了一个内部类的实例对象,这个内部类对象被长期引用了,即使那个外部类实例对象不再被使用,但由于内部类持久外部类的实例对象,这个外部类对象将不会被垃圾回收,这也会造成内存泄漏.</p><h2 id="10深拷贝和浅拷贝"><a href="#10深拷贝和浅拷贝" class="headerlink" title="10深拷贝和浅拷贝"></a>10深拷贝和浅拷贝</h2><p>简单来讲就是复制,克隆.</p><pre class=" language-Java"><code class="language-Java">Person p = new Person("张三")</code></pre><p>浅拷贝就是对对象中的数据成员进行简单复制,如果存在动态成员或者指针就会报错.</p><p>深拷贝就是对对象中存在的动态成员或指针重新开辟内存空间</p><h2 id="11-System-gc-和Runtime-gc-会做什么事情"><a href="#11-System-gc-和Runtime-gc-会做什么事情" class="headerlink" title="11 System.gc()和Runtime.gc()会做什么事情?"></a>11 System.gc()和Runtime.gc()会做什么事情?</h2><p>这两和方法用来提示JVM要进行垃圾回收.但是. 立即开始还是延迟进行垃圾回收是取决于JVM的.</p><h2 id="12-finalize-方法什么时候被调用-析构-finalization-的目的是什么"><a href="#12-finalize-方法什么时候被调用-析构-finalization-的目的是什么" class="headerlink" title="12 finalize()方法什么时候被调用?析构(finalization)的目的是什么?"></a>12 finalize()方法什么时候被调用?析构(finalization)的目的是什么?</h2><p>垃圾回收器(garbage colector)决定回收某对象时,就会运行该对象finalize()方法,但是再Java中很不幸,入伏哦内存充足的化,那么垃圾税收可能永远不会进行,就是说finalize()可能永远不被执行,显然指望它做收尾工作时靠不住的.那么finalize()究竟时做什么的呢?<code>它最主要的作用是回收特殊渠道申请的内存.</code>Java程序有垃圾回收器,所以一般情况下内存问题不用我们操心.但有一种JNI(Java Native Interface)调用non-Java程序(C或C++),finalize的工作就是回收这部分的内存.</p><h2 id="13-如果对象的引用被置为null-垃圾回收器是否会立即释放对象占用的内存"><a href="#13-如果对象的引用被置为null-垃圾回收器是否会立即释放对象占用的内存" class="headerlink" title="13 如果对象的引用被置为null,垃圾回收器是否会立即释放对象占用的内存?"></a>13 如果对象的引用被置为null,垃圾回收器是否会立即释放对象占用的内存?</h2><p>不会,在下一个垃圾回收周期中,这个对象将是可被回收的.</p><h2 id="14-什么是分布式垃圾回收-DGC-它是如何工作的"><a href="#14-什么是分布式垃圾回收-DGC-它是如何工作的" class="headerlink" title="14 什么是分布式垃圾回收(DGC)?它是如何工作的?"></a>14 什么是分布式垃圾回收(DGC)?它是如何工作的?</h2><p>DGC叫做分布式垃圾回收.RMI使用DGC来做自动垃圾回收.因为RMI包含了跨虚拟机的远程对象引用,垃圾回收是很困难的.DGC使用引用计数算法来给远程对象提供自动内存管理.</p><h2 id="15-串行-serial-收集器和吞吐量-throughput-收集器的区别是什么"><a href="#15-串行-serial-收集器和吞吐量-throughput-收集器的区别是什么" class="headerlink" title="15 串行(serial)收集器和吞吐量(throughput)收集器的区别是什么?"></a>15 串行(serial)收集器和吞吐量(throughput)收集器的区别是什么?</h2><p><code>吞吐量收集器</code>使用<code>并行版本</code>的<code>新生代垃圾收集器</code>,它用于中等规模和大规模数据的应用程序.</p><p>而<code>串行收集器</code>对大多数的<code>小应用</code>(在现代处理器上需要大概100M左右的内存)就足够了.</p><h2 id="16-在Java中-对象什么时候可以被垃圾回收"><a href="#16-在Java中-对象什么时候可以被垃圾回收" class="headerlink" title="16 在Java中,对象什么时候可以被垃圾回收?"></a>16 在Java中,对象什么时候可以被垃圾回收?</h2><p>当对象对当前使用这个对象的应用程序变得不可触及的时候,这个对象就可以被回收了.</p><h2 id="17-简述Java内存配域回收策略以及Minor-GC-和Major-GC"><a href="#17-简述Java内存配域回收策略以及Minor-GC-和Major-GC" class="headerlink" title="17 简述Java内存配域回收策略以及Minor GC 和Major GC."></a>17 简述Java内存配域回收策略以及Minor GC 和Major GC.</h2><ul><li>对象优先在堆的Eden区分配</li><li>大对象直接进入老年代</li><li>长期存活的对象将直接进入老年代</li></ul><p>当Eden区没有足够的空间进行分配时,虚拟机会执行一次Minor GC. Minor GC通常发生在新生代的Eden区,在这个区的对象生存期短,往往发生GC的频率较高,回收速度比较快;Full GC/Major GC发生在老年代,一般情况下,触发来年代GC的时候不会触发Minor GC,但是通过配置,可以在Full GC之前进行一次Minor GC,这样可以加快老年代的回收速度.</p><h2 id="18-JVM中永久代中会发生垃圾回收么"><a href="#18-JVM中永久代中会发生垃圾回收么" class="headerlink" title="18 JVM中永久代中会发生垃圾回收么?"></a>18 JVM中永久代中会发生垃圾回收么?</h2><p>垃圾回收不会发生在永久代, 如果永久代满了或者超过了临界值,会触发完全垃圾回收(Full GC).</p><blockquote><p>Java8中已经移除了永久代,新加了一个叫元数据区的native内存区.</p></blockquote><h2 id="19-Java中垃圾收集的方法有哪些"><a href="#19-Java中垃圾收集的方法有哪些" class="headerlink" title="19 Java中垃圾收集的方法有哪些?"></a>19 Java中垃圾收集的方法有哪些?</h2><p><strong><code>标记-清除</code></strong>:这是垃圾收集算法中最基础的,根据名字就可以知道,它的思想就是标记哪些要被回收的对象,然后统一回收. 这种方法很简单, 但是会有<code>两个主要问题</code>:</p><ol><li>效率不高,标记和清除的效率都很低</li><li>会产生大量不连续的内存碎片,导致以后程序在分配较大对象时,由于没有充足的连续内存而提前触发一次GC动作.</li></ol><p><strong><code>复制算法</code></strong>:为了解决效率问题, 复制算法将可用内存按容量划分为相等的两部分,然后每次只使用其中的一块,当一块内存用完时,就将还存活的对象复制到第二块内存上,然后一次性清除完第一块内存,再将第二块上的对象复制到第一块. 但是这种方式, 内存的代价太高, 每次基本上都要浪费一半的内存.</p><p>于是将该算法进行了改进,内存区域不再是按照1:1去划分,而是将<code>内存划分为8:1:1</code>三部分,较大的内存交给<code>Eden区</code>,其余两块较小的内存区叫<code>Survivor区</code>.每次都会优先使用Eden区,若Eden区满,就将对象复制到第二块内存上,然后清除Eden区,如果此时存活的对象太多,以至于Survivor不够时,会将这些对象通过分配担保机制复制到老年代中.(java堆又分为新生代和老年代).</p><p><strong><code>标记-整理</code></strong>: 该算法主要是为了解决<code>标记-清除</code>,产生大量内存碎片的问题,当对象存活率较高时,也解决了<code>复制算法</code>的效率问题. 它的不同之处就是在清除对象的时候先将可回收对象移动到一端,然后清除掉端边界以外的对象,这样就不会产生内存碎片了.</p><p><strong><code>分代收集</code></strong>:现在的虚拟机垃圾收集大多采用这种方式,它根据对象的生命周期,将堆分为新生代和老年代.在新生代中,由于对象生存周期短,每次回收都会有大量对象死去,那么这时就采用复制算法. 老年代里的对象存活率较高,没有额外的空间进行分配担保.</p><h2 id="20-什么是类加载器-类加载器有哪些"><a href="#20-什么是类加载器-类加载器有哪些" class="headerlink" title="20. 什么是类加载器,类加载器有哪些?"></a>20. 什么是类加载器,类加载器有哪些?</h2><p>实现<code>通过类的全限定名获取该类的二进制字节流</code>的代码块叫做类加载器.</p><p>主要有以下四种类加载器:</p><ol><li><code>启动类加载器(BootstrapClassLoader)</code>用来加载Java核心类库,无法被Java程序直接引用.</li><li><code>扩展类加载器(extensions class loader)</code>用来加载Java的扩展库. Java悉尼及的实现会提供一个扩展目录. 该类加载器在此目录里面查找并加载Java类.</li><li><code>系统类加载器(system class loader)</code>它根据Java应用的类路径(CLASSPATH)来加载Java类. 一般来说,Java应用的类都是由它来完成加载的. 可以通过<code>ClassLoader.getSystemClassLoader()</code>来获取它.</li><li>用户<code>自定义类加载器</code>,通过<code>继承java.lang.ClassLoader</code>类的方式实现.</li></ol><h2 id="21-类加载器双亲委派模型机制"><a href="#21-类加载器双亲委派模型机制" class="headerlink" title="21 类加载器双亲委派模型机制?"></a>21 类加载器双亲委派模型机制?</h2><p>当一个类收到了类加载请求时,不会自己先去加载这个类,而是将其委派给父类,由父类去加载,如果此时父类不能加载,反馈给子类,由子类去完成类的加载.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目业务实现</title>
      <link href="/undefined/af36.html"/>
      <url>/undefined/af36.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-项目结构"><a href="#1-项目结构" class="headerlink" title="1. 项目结构:"></a>1. 项目结构:</h1><h2 id="1-1-项目模块"><a href="#1-1-项目模块" class="headerlink" title="1.1 项目模块:"></a>1.1 项目模块:</h2><p><img src="./images/loading.gif" data-original="../images/posts/Dubbo%E6%A1%86%E6%9E%B6%E4%B8%8B%E8%B4%AD%E7%89%A9%E8%BD%A6%E4%B8%9A%E5%8A%A1%E5%AE%9E%E7%8E%B0/image-20200609191119260.png" alt="项目结构"></p><table><thead><tr><th>模块名称</th><th>模块功能</th><th>打包类型</th><th>端口</th></tr></thead><tbody><tr><td>jt</td><td>提供子模块jar包依赖</td><td>pom</td><td>#N/A</td></tr><tr><td>jt-common</td><td>提供子模块需要的工具API</td><td>jar</td><td>#N/A</td></tr><tr><td>jt-manage</td><td>提供项目后台管理功能,涉及jsp页面展现</td><td>war</td><td>8091</td></tr><tr><td>jt-web</td><td>提供项目前台页面访问</td><td>war</td><td>8092</td></tr><tr><td>jt-sso</td><td>主要为jt-web提供用户数据</td><td>jar</td><td>8093</td></tr><tr><td>jt-cart</td><td>主要为jt-web提供购物车数据</td><td>jar</td><td>8094</td></tr><tr><td>jt-order</td><td>主要为jt-web提供订单数据</td><td>jar</td><td>8095</td></tr></tbody></table><h2 id="1-2-添加公共jar包"><a href="#1-2-添加公共jar包" class="headerlink" title="1.2 添加公共jar包"></a>1.2 添加公共jar包</h2><p>在jt中的pom.xml文件中添加包依赖:</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.jt.vip<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- Parent标签定义了SpringBoot项目中所有依赖包的版本信息 SSM项目 jar包文件 都是由程序员自己手动添加 3要素,早期项目中版本依赖冲突问题         特别的严重. SpringBoot目的简化配置,实现"开箱即用" --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.7.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span> <span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!-- lookup parent from repository --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--ctrl + a + i格式化 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--指定JDK版本 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--指定maven插件版本 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven-jar-plugin.version</span><span class="token punctuation">></span></span>3.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven-jar-plugin.version</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--跳过测试类打包 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>skipTests</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>skipTests</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.junit.vintage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit-vintage-engine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--添加属性注入依赖 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--支持热部署 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--引入插件lombok 自动的set/get/构造方法插件 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--引入数据库驱动 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- &lt;version>5.1.32&lt;/version> --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--springBoot数据库连接 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--spring整合mybatis-plus --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--springBoot整合JSP添加依赖  --></span>        <span class="token comment" spellcheck="true">&lt;!--servlet依赖 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--jstl依赖 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--使jsp页面生效 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.tomcat.embed<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>tomcat-embed-jasper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 引入aop支持 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--spring整合redis --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.data<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--添加httpClient jar包 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.httpcomponents<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>httpclient<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--引入dubbo配置 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dubbo-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--添加Quartz的支持 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-quartz<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--不要添加bulid插件  --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><h2 id="1-3-模块父子级关系维护"><a href="#1-3-模块父子级关系维护" class="headerlink" title="1.3 模块父子级关系维护"></a>1.3 模块父子级关系维护</h2><ol><li><p>子级项目通过parent标签标识父子级关系</p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.jt.vip<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span></code></pre></li><li><p>父级项目通过Modules标签委会</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--通过modules标签标识当前父级项目中有多少个子级工程  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>jt-common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>jt-manage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">></span></span></code></pre></li></ol><h1 id="2-后台业务"><a href="#2-后台业务" class="headerlink" title="2. 后台业务"></a>2. 后台业务</h1><h2 id="2-1-商品列表"><a href="#2-1-商品列表" class="headerlink" title="2.1 商品列表"></a>2.1 商品列表</h2><h3 id="2-1-1-业务需求"><a href="#2-1-1-业务需求" class="headerlink" title="2.1.1 业务需求"></a>2.1.1 业务需求</h3><p>管理员点击商品查询时,要求动态跳转页面, 之后采用EasyUI中的表格实现数据的展现</p><p><img src="./images/loading.gif" data-original="../images/posts/JT-%E9%A1%B9%E7%9B%AE%E4%B8%9A%E5%8A%A1%E5%AE%9E%E7%8E%B0/image-20200611100345746.png" alt="image-20200611100345746"></p><h3 id="2-1-2-编辑商品对-Item-象"><a href="#2-1-2-编辑商品对-Item-象" class="headerlink" title="2.1.2 编辑商品对(Item)象"></a>2.1.2 编辑商品对(Item)象</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>jt<span class="token punctuation">.</span>pojo<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>IdType<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>TableId<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>TableName<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>JsonIgnoreProperties<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>experimental<span class="token punctuation">.</span>Accessors<span class="token punctuation">;</span><span class="token annotation punctuation">@JsonIgnoreProperties</span><span class="token punctuation">(</span>ignoreUnknown<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//表示JSON转化时忽略未知属性</span><span class="token annotation punctuation">@TableName</span><span class="token punctuation">(</span><span class="token string">"tb_item"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//指定表的名称</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>chain<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Item</span> <span class="token keyword">extends</span> <span class="token class-name">BasePojo</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span>type<span class="token operator">=</span>IdType<span class="token punctuation">.</span>AUTO<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//标识主键</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//商品id</span>    <span class="token keyword">private</span> String title<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//商品标题</span>    <span class="token keyword">private</span> String sellPoint<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//商品卖点信息</span>    <span class="token keyword">private</span> Long   price<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//商品价格 Long > dubbo</span>    <span class="token keyword">private</span> Integer num<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//商品数量</span>    <span class="token keyword">private</span> String barcode<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//条形码</span>    <span class="token keyword">private</span> String image<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//商品图片信息   1.jpg,2.jpg,3.jpg</span>    <span class="token keyword">private</span> Long   cid<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//表示商品的分类id</span>    <span class="token keyword">private</span> Integer status<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//1正常，2下架</span>    <span class="token comment" spellcheck="true">//为了满足页面调用需求,添加get方法</span>    <span class="token keyword">public</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getImages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> image<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-1-3-页面分析以及跳转过程"><a href="#2-1-3-页面分析以及跳转过程" class="headerlink" title="2.1.3 页面分析以及跳转过程"></a>2.1.3 页面分析以及跳转过程</h3><ol><li><p>查询商品操作</p><pre class=" language-jsp"><code class="language-jsp"><li data-options="attributes:{'url':'/page/item-list'}">查询商品</li></code></pre></li><li><p>IndexController</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/page/{moduleName}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">toModule</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"moduleName"</span><span class="token punctuation">)</span> String moduleName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> moduleName<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//item-list页面</span><span class="token punctuation">}</span></code></pre></li><li><p>列表页面展现</p><p><code>URL:/item/query</code></p><pre class=" language-jsp"><code class="language-jsp"><table class="easyui-datagrid" id="itemList" title="商品列表"        data-options="singleSelect:false,fitColumns:true,collapsible:true,pagination:true,url:'/item/query',method:'get',pageSize:20,toolbar:toolbar">    <thead>        <tr>            <th data-options="field:'ck',checkbox:true"></th>            <th data-options="field:'id',width:60">商品ID</th>            <th data-options="field:'title',width:200">商品标题</th>            <th data-options="field:'cid',width:100,align:'center',formatter:KindEditorUtil.findItemCatName">叶子类目</th>            <th data-options="field:'sellPoint',width:100">卖点</th>            <th data-options="field:'price',width:70,align:'right',formatter:KindEditorUtil.formatPrice">价格</th>            <th data-options="field:'num',width:70,align:'right'">库存数量</th>            <th data-options="field:'barcode',width:100">条形码</th>            <th data-options="field:'status',width:60,align:'center',formatter:KindEditorUtil.formatItemStatus">状态</th>            <th data-options="field:'created',width:130,align:'center',formatter:KindEditorUtil.formatDateTime">创建日期</th>            <th data-options="field:'updated',width:130,align:'center',formatter:KindEditorUtil.formatDateTime">更新日期</th>        </tr>    </thead></table></code></pre></li><li><p>页面跳转地址</p><p><img src="./images/loading.gif" data-original="../images/posts/JT-%E9%A1%B9%E7%9B%AE%E4%B8%9A%E5%8A%A1%E5%AE%9E%E7%8E%B0/image-20200611104805357.png" alt=""></p></li><li><p>EasyUI表格数据返回值要求</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"total"</span><span class="token operator">:</span><span class="token number">2000</span><span class="token punctuation">,</span>    <span class="token property">"rows"</span><span class="token operator">:</span><span class="token punctuation">[</span>        <span class="token punctuation">{</span><span class="token property">"code"</span><span class="token operator">:</span><span class="token string">"A"</span><span class="token punctuation">,</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"果汁"</span><span class="token punctuation">,</span><span class="token property">"price"</span><span class="token operator">:</span><span class="token string">"20"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span><span class="token property">"code"</span><span class="token operator">:</span><span class="token string">"B"</span><span class="token punctuation">,</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"汉堡"</span><span class="token punctuation">,</span><span class="token property">"price"</span><span class="token operator">:</span><span class="token string">"30"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span><span class="token property">"code"</span><span class="token operator">:</span><span class="token string">"C"</span><span class="token punctuation">,</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"鸡柳"</span><span class="token punctuation">,</span><span class="token property">"price"</span><span class="token operator">:</span><span class="token string">"40"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span><span class="token property">"code"</span><span class="token operator">:</span><span class="token string">"D"</span><span class="token punctuation">,</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"可乐"</span><span class="token punctuation">,</span><span class="token property">"price"</span><span class="token operator">:</span><span class="token string">"50"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span><span class="token property">"code"</span><span class="token operator">:</span><span class="token string">"E"</span><span class="token punctuation">,</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"薯条"</span><span class="token punctuation">,</span><span class="token property">"price"</span><span class="token operator">:</span><span class="token string">"10"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span><span class="token property">"code"</span><span class="token operator">:</span><span class="token string">"F"</span><span class="token punctuation">,</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"麦旋风"</span><span class="token punctuation">,</span><span class="token property">"price"</span><span class="token operator">:</span><span class="token string">"20"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span><span class="token property">"code"</span><span class="token operator">:</span><span class="token string">"G"</span><span class="token punctuation">,</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"套餐"</span><span class="token punctuation">,</span><span class="token property">"price"</span><span class="token operator">:</span><span class="token string">"100"</span><span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre></li><li><p>EasyUITable对象</p><p>由于EasyUI中的表格数据展现,需要返回特定的json串,所以需要通过VO对象的方式动态转化为JSON.</p><p>JSON: {“total”:”总记录数”,”rows”:List<data>}</data></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span>    <span class="token comment" spellcheck="true">//无参构造</span><span class="token annotation punctuation">@AllArgsConstructor</span>    <span class="token comment" spellcheck="true">//全参构造</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EasyUITable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Long total<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//定义总记录数</span>    <span class="token keyword">private</span> List rows<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//定义集合信息  List集合中写的就是用户展现记录</span>    <span class="token comment" spellcheck="true">//VO对象在进行数据转化时,必须调用对象的get/set方法 必须是public修饰</span><span class="token punctuation">}</span></code></pre></li></ol><h3 id="2-1-4-编辑ItemController"><a href="#2-1-4-编辑ItemController" class="headerlink" title="2.1.4 编辑ItemController"></a>2.1.4 编辑ItemController</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/item"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ItemController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> ItemService itemService<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 1.url地址:http://localhost:8091/item/query?page=1&amp;rows=50     * 2.参数:   page=1&amp;rows=50     * 3.返回值: easyUI表格数据要求   EasyUITable VO对象     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/query"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> EasyUITable <span class="token function">findItemByPage</span><span class="token punctuation">(</span><span class="token keyword">int</span> page<span class="token punctuation">,</span><span class="token keyword">int</span> rows<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//在业务层,实现分页处理</span>        <span class="token keyword">return</span> itemService<span class="token punctuation">.</span><span class="token function">findItemByPage</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span>rows<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-1-5-编辑ItemService"><a href="#2-1-5-编辑ItemService" class="headerlink" title="2.1.5 编辑ItemService"></a>2.1.5 编辑ItemService</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ItemServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">ItemService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> ItemMapper itemMapper<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 分页sql语句       每页20条     *     第一页:     *     select * from tb_item limit 0,20;    21个数   取20个 [0,19]下标     *     第二页:     *     select * from tb_item limit 20,20;    21个数  取20个  [20,39]下标     *     第三页:     *     select * from tb_item limit 40,20;    21个数  取20个  [40,59]下标     *     第N页:     *     select * from tb_item limit (page-1)rows,rows;     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> EasyUITable <span class="token function">findItemByPage</span><span class="token punctuation">(</span><span class="token keyword">int</span> page<span class="token punctuation">,</span> <span class="token keyword">int</span> rows<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.total 记录总数</span>        Integer total <span class="token operator">=</span> itemMapper<span class="token punctuation">.</span><span class="token function">selectCount</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.list  分页之后的结果  手写分页</span>        <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token punctuation">(</span>page<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>rows<span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Item<span class="token operator">></span> itemList <span class="token operator">=</span> itemMapper<span class="token punctuation">.</span><span class="token function">findItemByPage</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span>rows<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">EasyUITable</span><span class="token punctuation">(</span>total<span class="token punctuation">,</span> itemList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-1-5编辑ItemMapper接口"><a href="#2-1-5编辑ItemMapper接口" class="headerlink" title="2.1.5编辑ItemMapper接口"></a>2.1.5编辑ItemMapper接口</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ItemMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token operator">&lt;</span>Item<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from tb_item order by  updated desc limit #{start},#{rows}"</span><span class="token punctuation">)</span>    List<span class="token operator">&lt;</span>Item<span class="token operator">></span> <span class="token function">findItemByPage</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> rows<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="2-1-6-MP方式实现分页-ItemService"><a href="#2-1-6-MP方式实现分页-ItemService" class="headerlink" title="2.1.6 MP方式实现分页-ItemService"></a>2.1.6 MP方式实现分页-ItemService</h3><pre class=" language-Java"><code class="language-Java">@Servicepublic class ItemServiceImpl implements ItemService {    @Autowired    private ItemMapper itemMapper;    /**     * 原理:指定Page对象之后根据条件查询.返回Page对象. 包含了分页相关的全部数据.     * 使用MP方式实现分页     * 1.current  查询页数     * 2.size     查询记录数     */    @Override    public EasyUITable findItemByPage(int page, int rows) {        //传递Page对象 之后可以动态的获取所有的分页数据        IPage<Item> iPage = new Page<>(page, rows);        QueryWrapper<Item> queryWrapper = new QueryWrapper<Item>();        //降序排列        queryWrapper.orderByDesc("updated");        iPage = itemMapper.selectPage(iPage, queryWrapper);        //1.获取记录总数        int total = (int) iPage.getTotal();        List<Item> itemList = iPage.getRecords();        return new EasyUITable(total, itemList);    }}</code></pre><h3 id="2-1-7-编辑MP配置类"><a href="#2-1-7-编辑MP配置类" class="headerlink" title="2.1.7 编辑MP配置类"></a>2.1.7 编辑MP配置类</h3><p>​    mybatisPlus中的分页,必须添加拦截器.</p><pre class=" language-Java"><code class="language-Java">@Configuration    //标识配置类public class MybatisPlusConfig {    //将整合对象 ,交给spring容器管理    @Bean    public PaginationInterceptor  paginationInterceptor() {        return new PaginationInterceptor();    }}</code></pre><h3 id="2-1-8-数据格式化"><a href="#2-1-8-数据格式化" class="headerlink" title="2.1.8 数据格式化"></a>2.1.8 数据格式化</h3><ol><li><p>引入common.js</p><pre class=" language-jsp"><code class="language-jsp"><jsp:include page="/commons/common-js.jsp"></jsp:include></code></pre></li><li><p>实现自己的业务逻辑</p><pre class=" language-jsp"><code class="language-jsp"><!-- 自己实现业务逻辑 --><script type="text/javascript" src="/js/common.js"></script></code></pre></li><li><p><code>实现价格的格式化</code></p><p>1).页面元素分析    formatter是easyUI中特定的属性</p><pre class=" language-jsp"><code class="language-jsp"><th data-options="field:'price',width:70,align:'right',formatter:KindEditorUtil.formatPrice">价格</th></code></pre><p>2).页面JS</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 格式化价格  value是当前的元素信息</span>formatPrice <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span>row<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//数据库中的数据缩小100倍</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>val<span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre></li><li><p><code>商品状态格式化</code></p><p>1).页面元素</p><pre class=" language-jsp"><code class="language-jsp"> <th data-options="field:'status',width:60,align:'center',formatter:KindEditorUtil.formatItemStatus">状态</th></code></pre><p>2).页面JS</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 格式化商品的状态</span>formatItemStatus <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token function">formatStatus</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span>row<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">'&lt;span style="color:green;">上架&lt;/span>'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>val <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">'&lt;span style="color:red;">下架&lt;/span>'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">'未知'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre></li></ol><h2 id="2-2-商品类目回显实现"><a href="#2-2-商品类目回显实现" class="headerlink" title="2.2 商品类目回显实现"></a>2.2 商品类目回显实现</h2><h3 id="2-2-1-页面结构"><a href="#2-2-1-页面结构" class="headerlink" title="2.2.1 页面结构"></a>2.2.1 页面结构</h3><ol><li><p>页面标签定义</p><pre class=" language-jsp"><code class="language-jsp"><th data-options="field:'cid',width:100,align:'center',formatter:KindEditorUtil.findItemCatName">叶子类目</th></code></pre></li><li><p>页面JS</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//格式化名称</span>    findItemCatName <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span>row<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> name<span class="token punctuation">;</span>        $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            type<span class="token punctuation">:</span><span class="token string">"get"</span><span class="token punctuation">,</span>            url<span class="token punctuation">:</span><span class="token string">"/item/cat/queryItemName"</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span><span class="token punctuation">{</span>itemCatId<span class="token punctuation">:</span>val<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//传递参数</span>            cache<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//缓存</span>            <span class="token keyword">async</span><span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//表示同步   默认的是异步的true</span>            dataType<span class="token punctuation">:</span><span class="token string">"text"</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//表示返回值参数类型</span>            success<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>                name <span class="token operator">=</span> data<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre></li></ol><h3 id="2-2-2-编辑ItemCat"><a href="#2-2-2-编辑ItemCat" class="headerlink" title="2.2.2 编辑ItemCat"></a>2.2.2 编辑ItemCat</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@TableName</span><span class="token punctuation">(</span><span class="token string">"tb_item_cat"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>chain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ItemCat</span> <span class="token keyword">extends</span> <span class="token class-name">BasePojo</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//POJO属性定义全部采用包装类型  切记!!!!  以对象中不为null的属性充当where条件</span>    <span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span>type <span class="token operator">=</span> IdType<span class="token punctuation">.</span>AUTO<span class="token punctuation">)</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//主键</span>    <span class="token keyword">private</span> Long parentId<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//父级id </span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//名称</span>    <span class="token keyword">private</span> Integer status<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//状态信息</span>    <span class="token keyword">private</span> Integer sortOrder<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//排序号</span>    <span class="token keyword">private</span> Boolean isParent<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//是否为父级</span><span class="token punctuation">}</span></code></pre><h3 id="2-2-3编辑ItemCatController"><a href="#2-2-3编辑ItemCatController" class="headerlink" title="2.2.3编辑ItemCatController"></a>2.2.3编辑ItemCatController</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/item/cat"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ItemCatController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> ItemCatService itemCatService<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 业务需求:根据Id查询商品分类的名称     * 1.url:/item/cat/queryItemName     * 2.请求参数:itemCatId     * 3.返回值类型: 商品分类名称     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/queryItemName"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">queryItemName</span><span class="token punctuation">(</span>Long itemCatId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ItemCat itemCat <span class="token operator">=</span>                 itemCatService<span class="token punctuation">.</span><span class="token function">findItemCatNameById</span><span class="token punctuation">(</span>itemCatId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> itemCat<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-2-4编辑ItemCatService"><a href="#2-2-4编辑ItemCatService" class="headerlink" title="2.2.4编辑ItemCatService"></a>2.2.4编辑ItemCatService</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ItemCatServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">ItemCatService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> ItemCatMapper itemCatMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> ItemCat <span class="token function">findItemCatNameById</span><span class="token punctuation">(</span>Long itemCatId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> itemCatMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>itemCatId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-2-5页面数据展现"><a href="#2-2-5页面数据展现" class="headerlink" title="2.2.5页面数据展现"></a>2.2.5页面数据展现</h3><p><img src="./images/loading.gif" data-original="../images/posts/JT-%E9%A1%B9%E7%9B%AE%E4%B8%9A%E5%8A%A1%E5%AE%9E%E7%8E%B0/image-20200611113403535.png" alt=""></p><h3 id="2-2-6-ajax同步异步问题"><a href="#2-2-6-ajax同步异步问题" class="headerlink" title="2.2.6 ajax同步异步问题"></a>2.2.6 ajax同步异步问题</h3><p>类目回显用到ajax嵌套请求,如果内层ajax设置为异步状态,会导致部分数据无法回显</p><p>所以<code>在ajax嵌套问题,一般情况下会将内层的ajax设置为同步状态.</code></p><p>属性设置:<strong><code>async : false</code></strong></p><pre class=" language-javascript"><code class="language-javascript">$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            type<span class="token punctuation">:</span><span class="token string">"get"</span><span class="token punctuation">,</span>            url<span class="token punctuation">:</span><span class="token string">"/item/cat/queryItemName"</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span><span class="token punctuation">{</span>itemCatId<span class="token punctuation">:</span>val<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//传递参数</span>            cache<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//缓存</span>            <span class="token keyword">async</span><span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//表示同步   默认的是异步的true</span>            dataType<span class="token punctuation">:</span><span class="token string">"text"</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//表示返回值参数类型</span>            success<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>                name <span class="token operator">=</span> data<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>说明:</p><ul><li>如果没有特殊的需求,一般采用默认值  异步操作. 更加友好主流</li><li>一般如果使用<strong>ajax嵌套</strong>内部ajax程序一般是同步状态.</li><li>一般条件下ajax的刷新需要直接操作dom元素.</li></ul></blockquote><h2 id="2-3-商品分类实现分析-1"><a href="#2-3-商品分类实现分析-1" class="headerlink" title="2.3 商品分类实现分析-1"></a>2.3 商品分类实现分析-1</h2><h3 id="2-3-1-新增页面跳转流程"><a href="#2-3-1-新增页面跳转流程" class="headerlink" title="2.3.1 新增页面跳转流程"></a>2.3.1 新增页面跳转流程</h3><ol><li><p>树形结构中新增跳转</p><pre class=" language-jsp"><code class="language-jsp"><li data-options="attributes:{'url':'/page/item-add'}">新增商品</li></code></pre></li><li><p>工具栏实现</p><p><img src="./images/loading.gif" data-original="../images/posts/JT-%E9%A1%B9%E7%9B%AE%E4%B8%9A%E5%8A%A1%E5%AE%9E%E7%8E%B0/image-20200611145831976.png" alt=""></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/*定义工具栏 toolbar */</span>            toolbar<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>                            iconCls<span class="token punctuation">:</span> <span class="token string">'icon-add'</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">//定义图标样式</span>                  text<span class="token punctuation">:</span> <span class="token string">"新增"</span><span class="token punctuation">,</span>                  handler<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"点击工具栏"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>                        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>                            iconCls<span class="token punctuation">:</span> <span class="token string">'icon-help'</span><span class="token punctuation">,</span>                            handler<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'帮助工具栏'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>                        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">'-'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>                      iconCls<span class="token punctuation">:</span> <span class="token string">'icon-save'</span><span class="token punctuation">,</span>                      handler<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'保存工具栏'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>                  <span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre></li><li><p>列表页面的工具栏</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> toolbar <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>        text<span class="token punctuation">:</span><span class="token string">'新增'</span><span class="token punctuation">,</span>        iconCls<span class="token punctuation">:</span><span class="token string">'icon-add'</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//点击按钮的动作</span>        handler<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//类选择器   contains内容选择器 文本  .click()用户手动点击</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".tree-title:contains('新增商品')"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre></li><li><p>页面结构要求</p></li></ol><p><img src="./images/loading.gif" data-original="../images/posts/JT-%E9%A1%B9%E7%9B%AE%E4%B8%9A%E5%8A%A1%E5%AE%9E%E7%8E%B0/image-20200611153225112.png" alt=""></p><h3 id="2-3-2-页面弹出框操作"><a href="#2-3-2-页面弹出框操作" class="headerlink" title="2.3.2 页面弹出框操作"></a>2.3.2 页面弹出框操作</h3><ol><li><p>弹出框介绍</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#win1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">window</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                title<span class="token punctuation">:</span><span class="token string">"弹出框"</span><span class="token punctuation">,</span>                width<span class="token punctuation">:</span><span class="token number">400</span><span class="token punctuation">,</span>                height<span class="token punctuation">:</span><span class="token number">400</span><span class="token punctuation">,</span>                modal<span class="token punctuation">:</span><span class="token boolean">true</span>   <span class="token comment" spellcheck="true">//这是一个模式窗口，只能点击弹出框，不允许点击别处</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li><li><p>商品分类目录的弹出框操作</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// common.js中的数据要求</span><span class="token punctuation">.</span><span class="token function">window</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    width<span class="token punctuation">:</span><span class="token string">'500'</span><span class="token punctuation">,</span>    height<span class="token punctuation">:</span><span class="token string">"450"</span><span class="token punctuation">,</span>    modal<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>    closed<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>    iconCls<span class="token punctuation">:</span><span class="token string">'icon-save'</span><span class="token punctuation">,</span>    title<span class="token punctuation">:</span><span class="token string">'选择类目'</span><span class="token punctuation">,</span>    onOpen <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">...</span><span class="token punctuation">}</span></code></pre></li></ol><h3 id="2-3-3-弹出框操作数据结构要求"><a href="#2-3-3-弹出框操作数据结构要求" class="headerlink" title="2.3.3 弹出框操作数据结构要求"></a>2.3.3 弹出框操作数据结构要求</h3><p>​        思考:商品分类目录如何展现?</p><p>​        结论:商品分类信息一般分为3级菜单. 并且3级菜单是有父子级关系.</p><p><img src="./images/loading.gif" data-original="../images/posts/JT-%E9%A1%B9%E7%9B%AE%E4%B8%9A%E5%8A%A1%E5%AE%9E%E7%8E%B0/image-20200611153543051.png" alt=""></p><p>表设计: 通过数据表的创建如何确定父子级关系呢?</p><p>表设计解释: 通过父级字段,控制父子级关系.</p><p><img src="./images/loading.gif" data-original="../images/posts/JT-%E9%A1%B9%E7%9B%AE%E4%B8%9A%E5%8A%A1%E5%AE%9E%E7%8E%B0/image-20200611153609861.png" alt=""></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*1.一级商品分类信息*/</span>SELECT <span class="token operator">*</span> FROM tb_item_cat WHERE parent_id<span class="token operator">=</span><span class="token number">0</span><span class="token comment" spellcheck="true">/*1.二级商品分类信息*/</span>SELECT <span class="token operator">*</span> FROM tb_item_cat WHERE parent_id<span class="token operator">=</span><span class="token number">495</span><span class="token comment" spellcheck="true">/*1.三级商品分类信息*/</span>SELECT <span class="token operator">*</span> FROM tb_item_cat WHERE parent_id<span class="token operator">=</span><span class="token number">543</span></code></pre><h2 id="2-4-商品分类实现分析-2-树形结构"><a href="#2-4-商品分类实现分析-2-树形结构" class="headerlink" title="2.4 商品分类实现分析-2-树形结构"></a>2.4 商品分类实现分析-2-树形结构</h2><h3 id="2-4-1-EasyUI中树形结构"><a href="#2-4-1-EasyUI中树形结构" class="headerlink" title="2.4.1 EasyUI中树形结构"></a>2.4.1 EasyUI中树形结构</h3><ol><li><p>ul标签</p><pre class=" language-jsp"><code class="language-jsp"><body>    <h1>EasyUI-树形结构</h1>    <ul id="tree"></ul></body></code></pre></li><li><p>页面JS创建</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token comment" spellcheck="true">/*通过js创建树形结构 */</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//EasyUI中提供的tree树形函数</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#tree"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tree</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            url<span class="token punctuation">:</span><span class="token string">"tree.json"</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//加载远程JSON数据</span>            method<span class="token punctuation">:</span><span class="token string">"get"</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">//请求方式  POST</span>            animate<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">//表示显示折叠端口动画效果</span>            checkbox<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">//表述复选框</span>            lines<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">//表示显示连接线</span>            dnd<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">//是否拖拽</span>            onClick<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//添加点击事件</span>                <span class="token comment" spellcheck="true">//控制台</span>                console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></li><li><p>EasyUI中树形结构的格式要求</p><p>List<easyuitree>—-&gt;  </easyuitree></p><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">{</span>        <span class="token property">"id"</span><span class="token operator">:</span><span class="token string">"3"</span><span class="token punctuation">,</span>           //节点标识符            <span class="token property">"text"</span><span class="token operator">:</span><span class="token string">"吃鸡游戏"</span><span class="token punctuation">,</span>    //节点名称        <span class="token property">"state"</span><span class="token operator">:</span><span class="token string">"open"</span>       //节点状态  open/closed        <span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre></li><li><p>编辑EasyUITree VO对象</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Accessors</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EasyUITree</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//节点ID</span>    <span class="token keyword">private</span> String text<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//节点名称</span>    <span class="token keyword">private</span> String state<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//打开  open/关闭 closed </span><span class="token punctuation">}</span></code></pre></li></ol><h3 id="2-4-2-页面JS"><a href="#2-4-2-页面JS" class="headerlink" title="2.4.2 页面JS"></a>2.4.2 页面JS</h3><pre class=" language-javascript"><code class="language-javascript"> onOpen <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//当窗口打开后执行</span>                        <span class="token keyword">var</span> _win <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>                        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"ul"</span><span class="token punctuation">,</span>_win<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tree</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                            url<span class="token punctuation">:</span><span class="token string">'/item/cat/list'</span><span class="token punctuation">,</span>                            animate<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>                            onClick <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">{</span>                                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tree</span><span class="token punctuation">(</span><span class="token string">"isLeaf"</span><span class="token punctuation">,</span>node<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                                    <span class="token comment" spellcheck="true">// 填写到cid中</span>                                    _ele<span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"[name=cid]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>                                    _ele<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"cid"</span><span class="token punctuation">,</span>node<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token function">$</span><span class="token punctuation">(</span>_win<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">window</span><span class="token punctuation">(</span><span class="token string">'close'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token keyword">if</span><span class="token punctuation">(</span>data <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">.</span>fun<span class="token punctuation">)</span><span class="token punctuation">{</span>                                        data<span class="token punctuation">.</span>fun<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token punctuation">}</span>                                <span class="token punctuation">}</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><h3 id="2-4-3-页面URL"><a href="#2-4-3-页面URL" class="headerlink" title="2.4.3 页面URL"></a>2.4.3 页面URL</h3><p><img src="./images/loading.gif" data-original="../images/posts/JT-%E9%A1%B9%E7%9B%AE%E4%B8%9A%E5%8A%A1%E5%AE%9E%E7%8E%B0/image-20200611154357994.png" alt=""></p><h3 id="2-4-4-关闭EasyUITree中异步数加载"><a href="#2-4-4-关闭EasyUITree中异步数加载" class="headerlink" title="2.4.4 关闭EasyUITree中异步数加载"></a>2.4.4 关闭EasyUITree中异步数加载</h3><p><img src="./images/loading.gif" data-original="../images/posts/JT-%E9%A1%B9%E7%9B%AE%E4%B8%9A%E5%8A%A1%E5%AE%9E%E7%8E%B0/image-20200611154442432.png" alt=""></p><h3 id="2-4-5-编辑ItemCatController"><a href="#2-4-5-编辑ItemCatController" class="headerlink" title="2.4.5 编辑ItemCatController"></a>2.4.5 编辑ItemCatController</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * url:http://localhost:8091/item/cat/list     * 参数:  暂时没有参数     * 返回值: List&lt;EasyUITree>对象     *      * 业务说明:     *     1.用户第一次查询时展现的是全部的一级目录   没有携带数据  应该制定默认值     *     2.当用户查询子级目录时 ,会携带当前节点的id  id=1     *  根据父级查询子级     *       * 参数转化注解:@RequestParam     * 作用:接收用户参数,并且可以实现数据的转化     * 参数说明:     *         value/name: 用户传递的参数名称     *         boolean required() default true;  是否为必传项     *         defaultValue: 设定默认值     *      * 说明:如果用户没有传递参数则parentId默认为0,否则使用用户的参数查询子级信息.     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/list"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>EasyUITree<span class="token operator">></span> <span class="token function">findItemCatList</span><span class="token punctuation">(</span>        <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"id"</span><span class="token punctuation">,</span>defaultValue<span class="token operator">=</span><span class="token string">"0"</span><span class="token punctuation">)</span>Long parentId<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*         * Long parentId = id; if(parentId ==null) { parentId = 0L; }         */</span>        <span class="token keyword">return</span> itemCatService<span class="token punctuation">.</span><span class="token function">findItemCatList</span><span class="token punctuation">(</span>parentId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="2-4-6-编辑ItemCatService"><a href="#2-4-6-编辑ItemCatService" class="headerlink" title="2.4.6 编辑ItemCatService"></a>2.4.6 编辑ItemCatService</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * 数据转化:     *     List&lt;EasyUITree> VO对象 页面要求返回的数据结果     *  List&lt;ItemCat>    数据库记录     *  ItemCat对象转化EasyUITree对象     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>EasyUITree<span class="token operator">></span> <span class="token function">findItemCatList</span><span class="token punctuation">(</span>Long parentId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.根据parentId查询数据库记录 </span>        List<span class="token operator">&lt;</span>ItemCat<span class="token operator">></span> catList <span class="token operator">=</span> <span class="token function">findItemCatListByParentId</span><span class="token punctuation">(</span>parentId<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>EasyUITree<span class="token operator">></span> treeList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>EasyUITree<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.利用循环的方式实现数据的遍历</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>ItemCat itemCat <span class="token operator">:</span> catList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//目的为了封装VO对象</span>            Long id <span class="token operator">=</span> itemCat<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String text <span class="token operator">=</span> itemCat<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取节点名称</span>            <span class="token comment" spellcheck="true">//如果是父级则默认closed,否则open  可以被选中</span>            String state <span class="token operator">=</span> itemCat<span class="token punctuation">.</span><span class="token function">getIsParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"closed"</span> <span class="token operator">:</span> <span class="token string">"open"</span><span class="token punctuation">;</span>            EasyUITree tree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EasyUITree</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> text<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将tree对象封装到List集合中</span>            treeList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> treeList<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>ItemCat<span class="token operator">></span> <span class="token function">findItemCatListByParentId</span><span class="token punctuation">(</span>Long parentId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        QueryWrapper<span class="token operator">&lt;</span>ItemCat<span class="token operator">></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span>ItemCat<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"parent_id"</span><span class="token punctuation">,</span> parentId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> itemCatMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="2-4-7-页面展现"><a href="#2-4-7-页面展现" class="headerlink" title="2.4.7 页面展现"></a>2.4.7 页面展现</h3><p><img src="./images/loading.gif" data-original="../images/posts/JT-%E9%A1%B9%E7%9B%AE%E4%B8%9A%E5%8A%A1%E5%AE%9E%E7%8E%B0/image-20200611154752404.png" alt=""></p><h2 id="2-5-商品后台管理–商品新增"><a href="#2-5-商品后台管理–商品新增" class="headerlink" title="2.5 商品后台管理–商品新增"></a>2.5 商品后台管理–商品新增</h2><h3 id="2-5-1-商品新增流程"><a href="#2-5-1-商品新增流程" class="headerlink" title="2.5.1 商品新增流程"></a>2.5.1 商品新增流程</h3><ol><li>表单提交中,需要进行数据的校验</li><li>将表单提交, ajax提交实现数据新增 </li><li>后台服务器接收用户的请求,实现数据的入库</li><li>定义系统级别的返回值的VO对象.控制操作是否正确.</li><li>定义全局异常处理机制.实现VO对象的封装</li></ol><h3 id="2-5-2-表单页面分析"><a href="#2-5-2-表单页面分析" class="headerlink" title="2.5.2 表单页面分析"></a>2.5.2 表单页面分析</h3><ol><li>商品提交按钮</li></ol><pre class=" language-jsp"><code class="language-jsp"><div style="padding:5px">    <a href="javascript:void(0)" class="easyui-linkbutton" onclick="submitForm()">提交</a>    <a href="javascript:void(0)" class="easyui-linkbutton" onclick="clearForm()">重置</a></div></code></pre><ol start="2"><li>数据的校验</li></ol><pre class=" language-jsp"><code class="language-jsp">data-options="required:true"        该项为必填项validType:'length[0,150]            长度的有效性校验(内容描述)data-options="min:1,max:99999999,precision:2,required:true" 取值范围,设定几位小数(价格)</code></pre><ol start="3"><li>页面JS校验</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#itemAddForm'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">form</span><span class="token punctuation">(</span><span class="token string">'validate'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    $<span class="token punctuation">.</span>messager<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'提示'</span><span class="token punctuation">,</span><span class="token string">'表单还未填写完成!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//当前jS结束</span><span class="token punctuation">}</span></code></pre><h3 id="2-5-3-数据转化"><a href="#2-5-3-数据转化" class="headerlink" title="2.5.3 数据转化"></a>2.5.3 数据转化</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#itemAddForm [name=price]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span>XXXX<span class="token punctuation">)</span><span class="token punctuation">;</span>     赋值操作<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#itemAddForm [name=priceView]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     取值操作<span class="token function">eval</span><span class="token punctuation">(</span>一般都是num<span class="token punctuation">)</span>   主要是做算数运算<span class="token punctuation">.</span>避免由于string类型导致异常</code></pre><h3 id="2-5-4-ajax提交"><a href="#2-5-4-ajax提交" class="headerlink" title="2.5.4 ajax提交"></a>2.5.4 ajax提交</h3><p>关于ajax参数写法:</p><ol><li><p>{“key”:”value”,”key2”:”value2”}</p></li><li><p>“key=value&amp;key2=value2”    常规参数拼接</p></li></ol><p><img src="./images/loading.gif" data-original="../images/posts/JT-%E9%A1%B9%E7%9B%AE%E4%B8%9A%E5%8A%A1%E5%AE%9E%E7%8E%B0/image-20200611155742632.png" alt=""></p><blockquote><p>$(“#itemAddForm”).serialize():该函数的作用就是将整个form表单中的参数实现key=value拼接.</p></blockquote><pre class=" language-javascript"><code class="language-javascript">$<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/item/save"</span><span class="token punctuation">,</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#itemAddForm"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        $<span class="token punctuation">.</span>messager<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'提示'</span><span class="token punctuation">,</span><span class="token string">'新增商品成功!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        $<span class="token punctuation">.</span>messager<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"提示"</span><span class="token punctuation">,</span><span class="token string">"新增商品失败!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-5-5-系统级VO对象-SysResult"><a href="#2-5-5-系统级VO对象-SysResult" class="headerlink" title="2.5.5 系统级VO对象 SysResult"></a>2.5.5 系统级VO对象 SysResult</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>chain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SysResult</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer status<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//标识状态信息 200成功  201失败</span>    <span class="token keyword">private</span> String msg<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//提示信息</span>    <span class="token keyword">private</span> Object data<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//服务器返回页面数据信息</span>    <span class="token comment" spellcheck="true">//编辑公共的API,简化用户的调用</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SysResult <span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SysResult</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"操作成功"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SysResult <span class="token function">success</span><span class="token punctuation">(</span>Object data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SysResult</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"操作成功"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SysResult <span class="token function">success</span><span class="token punctuation">(</span>String msg<span class="token punctuation">,</span>Object data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SysResult</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SysResult <span class="token function">fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SysResult</span><span class="token punctuation">(</span><span class="token number">201</span><span class="token punctuation">,</span> <span class="token string">"业务调用失败"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-5-6-商品新增参数分析"><a href="#2-5-6-商品新增参数分析" class="headerlink" title="2.5.6 商品新增参数分析"></a>2.5.6 商品新增参数分析</h3><p><code>页面分析:</code></p><p><img src="./images/loading.gif" data-original="../images/posts/JT-%E9%A1%B9%E7%9B%AE%E4%B8%9A%E5%8A%A1%E5%AE%9E%E7%8E%B0/image-20200611160250190.png" alt=""></p><p><code>参数分析:</code></p><p><img src="./images/loading.gif" data-original="../images/posts/JT-%E9%A1%B9%E7%9B%AE%E4%B8%9A%E5%8A%A1%E5%AE%9E%E7%8E%B0/image-20200611160322548.png" alt=""></p><h3 id="2-5-7-编辑ItemController"><a href="#2-5-7-编辑ItemController" class="headerlink" title="2.5.7 编辑ItemController"></a>2.5.7 编辑ItemController</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**  * 1.url:http://localhost:8091/item/save  * 2.参数: form表单提交  * 3.返回值: VO对象  */</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/save"</span><span class="token punctuation">)</span><span class="token keyword">public</span> SysResult <span class="token function">saveItem</span><span class="token punctuation">(</span>Item item<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        itemService<span class="token punctuation">.</span><span class="token function">saveItem</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> SysResult<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> SysResult<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//try-catch 必然导致代码可读性差 优化</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-5-8-编辑ItemService"><a href="#2-5-8-编辑ItemService" class="headerlink" title="2.5.8 编辑ItemService"></a>2.5.8 编辑ItemService</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token annotation punctuation">@Transactional</span>    <span class="token comment" spellcheck="true">//控制事务</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveItem</span><span class="token punctuation">(</span>Item item<span class="token punctuation">)</span> <span class="token punctuation">{</span>    item<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">setCreated</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">setUpdated</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getCreated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    itemMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-5-9-业务效果"><a href="#2-5-9-业务效果" class="headerlink" title="2.5.9 业务效果"></a>2.5.9 业务效果</h3><p><img src="./images/loading.gif" data-original="../images/posts/JT-%E9%A1%B9%E7%9B%AE%E4%B8%9A%E5%8A%A1%E5%AE%9E%E7%8E%B0/image-20200611160556016.png" alt=""></p><h2 id="2-6-商品后台管理–商品分类回显"><a href="#2-6-商品后台管理–商品分类回显" class="headerlink" title="2.6 商品后台管理–商品分类回显"></a>2.6 商品后台管理–商品分类回显</h2><h3 id="2-6-1-业务说明"><a href="#2-6-1-业务说明" class="headerlink" title="2.6.1 业务说明"></a>2.6.1 业务说明</h3><p>当用户选择商品点击修改按钮时,执行如下的操作流程</p><ol><li><p>点击修改按钮时需要有效性校验 js</p></li><li><p>实现弹出框操作,并且展现商品修改页面</p></li><li><p>展现页面的同时,需要实现页面数据的回显.</p></li><li><p>将商品分类信息进行格式化处理.</p></li><li><p>修改商品信息之后,完成业务更新.</p></li></ol><h3 id="2-6-2-有效性校验"><a href="#2-6-2-有效性校验" class="headerlink" title="2.6.2 有效性校验"></a>2.6.2 有效性校验</h3><pre class=" language-java"><code class="language-java">function <span class="token function">getSelectionsIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    var itemList <span class="token operator">=</span> $<span class="token punctuation">(</span><span class="token string">"#itemList"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//.datagrid("getSelections"); easyUI提供的 筛选用户选中的数据</span>    var sels <span class="token operator">=</span> itemList<span class="token punctuation">.</span><span class="token function">datagrid</span><span class="token punctuation">(</span><span class="token string">"getSelections"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    var ids <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>var i in sels<span class="token punctuation">)</span><span class="token punctuation">{</span>        ids<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>sels<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//为数组添加id值</span>    <span class="token punctuation">}</span>    ids <span class="token operator">=</span> ids<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//将数组转化为字符串 1,2,3,4,5</span>    <span class="token keyword">return</span> ids<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//获取用户选中的数据</span>var ids <span class="token operator">=</span> <span class="token function">getSelectionsIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1,2,3,4,5 id字符串</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ids<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        $<span class="token punctuation">.</span>messager<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'提示'</span><span class="token punctuation">,</span><span class="token string">'必须选择一个商品才能编辑!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>ids<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//100,200</span>    $<span class="token punctuation">.</span>messager<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'提示'</span><span class="token punctuation">,</span><span class="token string">'只能选择一个商品!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-6-3-弹出框效果"><a href="#2-6-3-弹出框效果" class="headerlink" title="2.6.3 弹出框效果"></a>2.6.3 弹出框效果</h3><pre class=" language-Java"><code class="language-Java"><div id="itemEditWindow" class="easyui-window" title="编辑商品" data-options="modal:true,closed:true,iconCls:'icon-save',href:'/page/item-edit'" style="width:80%;height:80%;padding:10px;"></div>    $("#itemEditWindow").window({onLoad :function(){    //回显数据    var data = $("#itemList").datagrid("getSelections")[0];    data.priceView = KindEditorUtil.formatPrice(data.price);    $("#itemeEditForm").form("load",data);                     // 加载商品描述    //_data = SysResult.ok(itemDesc)    $.getJSON('/item/query/item/desc/'+data.id,function(_data){        if(_data.status == 200){                            //UM.getEditor('itemeEditDescEditor').setContent(_data.data.itemDesc, false);            itemEditEditor.html(_data.data.itemDesc);        }     }); }</code></pre><h3 id="2-6-4-商品分类信息回显"><a href="#2-6-4-商品分类信息回显" class="headerlink" title="2.6.4 商品分类信息回显"></a>2.6.4 商品分类信息回显</h3><p>操作方式:</p><p><img src="./images/loading.gif" data-original="../images/posts/JT-%E9%A1%B9%E7%9B%AE%E4%B8%9A%E5%8A%A1%E5%AE%9E%E7%8E%B0/image-20200611161753890.png" alt=""></p><p>页面js编辑:</p><pre class=" language-Java"><code class="language-Java">/*    考点:jQuery用法根据cid 动态查询数据,实现数据回显  利用F12开发者工具选择标签,进行回显*/var itemCatId = data.cid;$.get("/item/cat/queryItemName",{"itemCatId":itemCatId},function(name){    $("#itemeEditForm [name=cid]").siblings("span").text(name);});</code></pre><p>页面效果展现:</p><p><img src="./images/loading.gif" data-original="../images/posts/JT-%E9%A1%B9%E7%9B%AE%E4%B8%9A%E5%8A%A1%E5%AE%9E%E7%8E%B0/image-20200611161932261.png" alt=""></p><h2 id="2-7-商品后台管理–商品修改"><a href="#2-7-商品后台管理–商品修改" class="headerlink" title="2.7 商品后台管理–商品修改"></a>2.7 商品后台管理–商品修改</h2><h3 id="2-7-1-页面分析"><a href="#2-7-1-页面分析" class="headerlink" title="2.7.1 页面分析"></a>2.7.1 页面分析</h3><pre class=" language-Java"><code class="language-Java">//alert($("#itemeEditForm").serialize());$.post("/item/update",$("#itemeEditForm").serialize(), function(data){    if(data.status == 200){        $.messager.alert('提示','修改商品成功!','info',function(){            $("#itemEditWindow").window('close');            $("#itemList").datagrid("reload");        });    }else{        $.message.alert("提示",data.msg);    }});</code></pre><h3 id="2-7-2-编辑ItemController"><a href="#2-7-2-编辑ItemController" class="headerlink" title="2.7.2 编辑ItemController"></a>2.7.2 编辑ItemController</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**  * 商品更新  * 1.url:/item/update  * 2.参数:form表单序列化  * 3.返回值:Sysresult对象  */</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/update"</span><span class="token punctuation">)</span><span class="token keyword">public</span> SysResult <span class="token function">updateItem</span><span class="token punctuation">(</span>Item item<span class="token punctuation">)</span> <span class="token punctuation">{</span>    itemService<span class="token punctuation">.</span><span class="token function">updateItem</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> SysResult<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-7-3-编辑ItemService"><a href="#2-7-3-编辑ItemService" class="headerlink" title="2.7.3 编辑ItemService"></a>2.7.3 编辑ItemService</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateItem</span><span class="token punctuation">(</span>Item item<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//根据主键进行修改.</span>    item<span class="token punctuation">.</span><span class="token function">setUpdated</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    itemMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-7-4-关于jQuery页面取值问题"><a href="#2-7-4-关于jQuery页面取值问题" class="headerlink" title="2.7.4 关于jQuery页面取值问题"></a>2.7.4 关于jQuery页面取值问题</h3><p>例子:</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>html<span class="token operator">></span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span> <span class="token operator">></span>        <span class="token operator">&lt;</span>input id<span class="token operator">=</span><span class="token string">"username"</span> type<span class="token operator">=</span><span class="token string">"text"</span> value<span class="token operator">=</span><span class="token string">"abc"</span> name<span class="token operator">=</span><span class="token string">"username"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>a id<span class="token operator">=</span><span class="token string">"urlAdd"</span> href<span class="token operator">=</span><span class="token string">"http://xxxxx"</span><span class="token operator">></span>访问地址<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>        <span class="token operator">&lt;</span>a id<span class="token operator">=</span><span class="token string">"urlAdd"</span> href<span class="token operator">=</span><span class="token string">"http://xxxxx"</span><span class="token operator">></span>替换文本信息<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span>取值<span class="token punctuation">;</span> <span class="token function">html</span><span class="token punctuation">(</span><span class="token string">"xxxxxx"</span><span class="token punctuation">)</span>赋值  获取指定元素的html标签<span class="token punctuation">,</span>如果元素信息必须由浏览器负责解析  $<span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">"&lt;a href="</span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>xxxxx<span class="token string">">测试地址&lt;/a>"</span><span class="token punctuation">)</span><span class="token number">2</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 取值<span class="token operator">/</span><span class="token function">text</span><span class="token punctuation">(</span>xxxxx<span class="token punctuation">)</span><span class="token punctuation">;</span> 赋值  $<span class="token punctuation">(</span><span class="token string">"#urlAdd"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"替换文本信息"</span><span class="token punctuation">)</span><span class="token number">3</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token string">"xxxxx"</span><span class="token punctuation">)</span>  val一般代表属性值  $<span class="token punctuation">(</span><span class="token string">"#username"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取value属性的值</span>  $<span class="token punctuation">(</span><span class="token string">"#username"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token string">"admin123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//为input标签啊添加value属性值  </span></code></pre><h2 id="2-8-商品后台管理–商品删除"><a href="#2-8-商品后台管理–商品删除" class="headerlink" title="2.8 商品后台管理–商品删除"></a>2.8 商品后台管理–商品删除</h2><h3 id="2-8-1-删除的页面分析"><a href="#2-8-1-删除的页面分析" class="headerlink" title="2.8.1 删除的页面分析"></a>2.8.1 删除的页面分析</h3><p>页面名称:item-list.jsp</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">{</span>    text<span class="token operator">:</span><span class="token string">'删除'</span><span class="token punctuation">,</span>    iconCls<span class="token operator">:</span><span class="token string">'icon-cancel'</span><span class="token punctuation">,</span>    handler<span class="token operator">:</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//动态获取商品id字符串信息</span>        var ids <span class="token operator">=</span> <span class="token function">getSelectionsIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ids<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            $<span class="token punctuation">.</span>messager<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'提示'</span><span class="token punctuation">,</span><span class="token string">'未选中商品!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        $<span class="token punctuation">.</span>messager<span class="token punctuation">.</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">'确认'</span><span class="token punctuation">,</span><span class="token string">'确定删除ID为 '</span><span class="token operator">+</span>ids<span class="token operator">+</span><span class="token string">' 的商品吗？'</span><span class="token punctuation">,</span><span class="token function">function</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>                var params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"ids"</span><span class="token operator">:</span>ids<span class="token punctuation">}</span><span class="token punctuation">;</span>                $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/item/delete"</span><span class="token punctuation">,</span>params<span class="token punctuation">,</span> <span class="token function">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        $<span class="token punctuation">.</span>messager<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'提示'</span><span class="token punctuation">,</span><span class="token string">'删除商品成功!'</span><span class="token punctuation">,</span>undefined<span class="token punctuation">,</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                            $<span class="token punctuation">(</span><span class="token string">"#itemList"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">datagrid</span><span class="token punctuation">(</span><span class="token string">"reload"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                        $<span class="token punctuation">.</span>messager<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"提示"</span><span class="token punctuation">,</span>data<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><img src="./images/loading.gif" data-original="../images/posts/JT-%E9%A1%B9%E7%9B%AE%E4%B8%9A%E5%8A%A1%E5%AE%9E%E7%8E%B0/image-20200611170646400.png" alt=""></p><h3 id="2-8-2-编辑ItemController"><a href="#2-8-2-编辑ItemController" class="headerlink" title="2.8.2 编辑ItemController"></a>2.8.2 编辑ItemController</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**  * url:/item/delete  * 参数: ids:1001,1002  如果中间有","号 则可以使用数组/可变参数方式接收  * 返回值: SysResult  */</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/delete"</span><span class="token punctuation">)</span><span class="token keyword">public</span> SysResult <span class="token function">deleteItems</span><span class="token punctuation">(</span>Long<span class="token punctuation">[</span><span class="token punctuation">]</span> ids<span class="token punctuation">)</span> <span class="token punctuation">{</span>    itemService<span class="token punctuation">.</span><span class="token function">deleteItems</span><span class="token punctuation">(</span>ids<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> SysResult<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-8-3-编辑ItemService"><a href="#2-8-3-编辑ItemService" class="headerlink" title="2.8.3 编辑ItemService"></a>2.8.3 编辑ItemService</h3><pre class=" language-Java"><code class="language-Java">@Overridepublic void deleteItems(Long[] ids) {    List<Long> idList = Arrays.asList(ids);    //MP方式实现数据删除    //itemMapper.deleteBatchIds(idList);    //手动的实现数据删除操作    itemMapper.deleteItems(ids);}</code></pre><h3 id="2-8-4-编辑ItemMapper-xml配置文件"><a href="#2-8-4-编辑ItemMapper-xml配置文件" class="headerlink" title="2.8.4 编辑ItemMapper.xml配置文件"></a>2.8.4 编辑ItemMapper.xml配置文件</h3><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>mapper namespace<span class="token operator">=</span><span class="token string">"com.jt.mapper.ItemMapper"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>留着以后用  <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>delete id<span class="token operator">=</span><span class="token string">"deleteItems"</span><span class="token operator">></span>        delete from tb_item where id <span class="token function">in</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>foreach collection<span class="token operator">=</span><span class="token string">"array"</span> item<span class="token operator">=</span><span class="token string">"id"</span> separator<span class="token operator">=</span><span class="token string">","</span><span class="token operator">></span>            #<span class="token punctuation">{</span>id<span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>foreach<span class="token operator">></span>        <span class="token punctuation">)</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>delete<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>mapper<span class="token operator">></span></code></pre><h2 id="2-9-商品后台管理–商品上架-下架"><a href="#2-9-商品后台管理–商品上架-下架" class="headerlink" title="2.9 商品后台管理–商品上架/下架"></a>2.9 商品后台管理–商品上架/下架</h2><h3 id="2-9-1-业务说明"><a href="#2-9-1-业务说明" class="headerlink" title="2.9.1 业务说明"></a>2.9.1 业务说明</h3><p><code>如果使用上架  status=1   updated/    下架   status=2  updated</code></p><p><strong>item-list页面分析</strong></p><p><strong>方式1</strong>:分别发起ajax请求实现业务操作</p><pre class=" language-java"><code class="language-java">$<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/item/instock"</span><span class="token punctuation">,</span>params<span class="token punctuation">,</span> <span class="token function">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        $<span class="token punctuation">.</span>messager<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'提示'</span><span class="token punctuation">,</span><span class="token string">'下架商品成功!'</span><span class="token punctuation">,</span>undefined<span class="token punctuation">,</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            $<span class="token punctuation">(</span><span class="token string">"#itemList"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">datagrid</span><span class="token punctuation">(</span><span class="token string">"reload"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>$<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/item/reshelf"</span><span class="token punctuation">,</span>params<span class="token punctuation">,</span> <span class="token function">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        $<span class="token punctuation">.</span>messager<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'提示'</span><span class="token punctuation">,</span><span class="token string">'上架商品成功!'</span><span class="token punctuation">,</span>undefined<span class="token punctuation">,</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            $<span class="token punctuation">(</span><span class="token string">"#itemList"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">datagrid</span><span class="token punctuation">(</span><span class="token string">"reload"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>方式二</strong>: 利用 restFul 风格实现上下架业务</p><pre class=" language-java"><code class="language-java">$<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/item/updateStatus/1"</span><span class="token punctuation">,</span>params<span class="token punctuation">,</span> <span class="token function">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        $<span class="token punctuation">.</span>messager<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'提示'</span><span class="token punctuation">,</span><span class="token string">'上架商品成功!'</span><span class="token punctuation">,</span>undefined<span class="token punctuation">,</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            $<span class="token punctuation">(</span><span class="token string">"#itemList"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">datagrid</span><span class="token punctuation">(</span><span class="token string">"reload"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-9-2-编辑ItemController"><a href="#2-9-2-编辑ItemController" class="headerlink" title="2.9.2 编辑ItemController"></a>2.9.2 编辑ItemController</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**  * 1.url:http://localhost:8091/item/updateStatus/2  * 2.参数:ids: 1474391963,1001,1002  * 3.返回值结果  SysResult  * @return  */</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/updateStatus/{status}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> SysResult <span class="token function">updateStatus</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">int</span> status<span class="token punctuation">,</span>Long<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> ids<span class="token punctuation">)</span> <span class="token punctuation">{</span>    itemService<span class="token punctuation">.</span><span class="token function">updateStatus</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span>ids<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> SysResult<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-9-3-编辑ItemService"><a href="#2-9-3-编辑ItemService" class="headerlink" title="2.9.3 编辑ItemService"></a>2.9.3 编辑ItemService</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateStatus</span><span class="token punctuation">(</span><span class="token keyword">int</span> status<span class="token punctuation">,</span> Long<span class="token punctuation">[</span><span class="token punctuation">]</span> ids<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1.使用MP的方式实现数据更新  entity 修改修改的数据,updateWrapper</span>    Item item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Item</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    item<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">setUpdated</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    UpdateWrapper<span class="token operator">&lt;</span>Item<span class="token operator">></span> updateWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UpdateWrapper</span><span class="token operator">&lt;</span>Item<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    updateWrapper<span class="token punctuation">.</span><span class="token function">in</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>ids<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    itemMapper<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> updateWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2.使用sql的方式进行数据更新</span>    <span class="token comment" spellcheck="true">//&lt;update id="updateStatus"></span>    <span class="token comment" spellcheck="true">//    update tb_item set status = #{status} where id in (</span>    <span class="token comment" spellcheck="true">//        &lt;foreach collection="ids" item="id" separator=","></span>    <span class="token comment" spellcheck="true">//            #{id}</span>    <span class="token comment" spellcheck="true">//        &lt;/foreach>)</span>    <span class="token comment" spellcheck="true">//&lt;/update></span>    <span class="token comment" spellcheck="true">//itemMapper.updateStatus(status, new Date(), ids);</span><span class="token punctuation">}</span></code></pre><h3 id="2-9-4-业务效果"><a href="#2-9-4-业务效果" class="headerlink" title="2.9.4 业务效果"></a>2.9.4 业务效果</h3><p><img src="./images/loading.gif" data-original="../images/posts/JT-%E9%A1%B9%E7%9B%AE%E4%B8%9A%E5%8A%A1%E5%AE%9E%E7%8E%B0/image-20200611171847839.png" alt=""></p><h2 id="2-10-多表操作设计"><a href="#2-10-多表操作设计" class="headerlink" title="2.10 多表操作设计"></a>2.10 多表操作设计</h2><h3 id="2-10-1-表设计"><a href="#2-10-1-表设计" class="headerlink" title="2.10.1 表设计"></a>2.10.1 表设计</h3><p>商品进行定义时, tb_item,tb_itemDesc,为了让用户查询的速度更快将商品表数据进行分隔.将商品详情信息单独准备了一张表.</p><p>设计:  商品表的主键的值与商品描述表的值相同.    一对一关联</p><p><img src="./images/loading.gif" data-original="../images/posts/JT-%E9%A1%B9%E7%9B%AE%E4%B8%9A%E5%8A%A1%E5%AE%9E%E7%8E%B0/image-20200611172518450.png" alt=""></p><h3 id="2-10-2-编辑ItemDesc-POJO对象"><a href="#2-10-2-编辑ItemDesc-POJO对象" class="headerlink" title="2.10.2 编辑ItemDesc POJO对象"></a>2.10.2 编辑ItemDesc POJO对象</h3><p>在jt-common中添加pojo</p><pre class=" language-Java"><code class="language-Java">@Data@Accessors(chain = true)@NoArgsConstructor@AllArgsConstructor@TableName("tb_item_desc")public class ItemDesc extends BasePojo{    @TableId //只设定主键  不能自增    private Long itemId;    private String itemDesc;}</code></pre><p>2.10.3 编辑ItemMapper</p><pre class=" language-Java"><code class="language-Java">public interface ItemDescMapper extends BaseMapper<ItemDesc>{}</code></pre><h2 id="2-11-富文本编辑器介绍"><a href="#2-11-富文本编辑器介绍" class="headerlink" title="2.11 富文本编辑器介绍"></a>2.11 富文本编辑器介绍</h2><h3 id="2-11-1KindEditor"><a href="#2-11-1KindEditor" class="headerlink" title="2.11.1KindEditor"></a>2.11.1KindEditor</h3><p><a href="http://kindeditor.net/down.php" target="_blank" rel="noopener">http://kindeditor.net/down.php</a></p><p>KindEditor 是一套开源的在线HTML编辑器，主要用于让用户在网站上<strong>获得所见即所得编辑效果</strong>，开发人员可以用 KindEditor 把传统的多行文本输入框(textarea)替换为可视化的富文本输入框。 KindEditor 使用 JavaScript 编写，可以无缝地与 Java、.NET、PHP、ASP 等程序集成，比较适合在 CMS、商城、论坛、博客、Wiki、电子邮件等互联网应用上使用。</p><h3 id="2-11-2入门案例"><a href="#2-11-2入门案例" class="headerlink" title="2.11.2入门案例"></a>2.11.2入门案例</h3><p>访问网址:<a href="http://localhost:8091/KindEditor.jsp" target="_blank" rel="noopener">http://localhost:8091/KindEditor.jsp</a></p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>link href<span class="token operator">=</span><span class="token string">"/js/kindeditor-4.1.10/themes/default/default.css"</span> type<span class="token operator">=</span><span class="token string">"text/css"</span> rel<span class="token operator">=</span><span class="token string">"stylesheet"</span><span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> charset<span class="token operator">=</span><span class="token string">"utf-8"</span> src<span class="token operator">=</span><span class="token string">"/js/kindeditor-4.1.10/kindeditor-all-min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> charset<span class="token operator">=</span><span class="token string">"utf-8"</span> src<span class="token operator">=</span><span class="token string">"/js/kindeditor-4.1.10/lang/zh_CN.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> charset<span class="token operator">=</span><span class="token string">"utf-8"</span> src<span class="token operator">=</span><span class="token string">"/js/jquery-easyui-1.4.1/jquery.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    $<span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        KindEditor<span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            KindEditor<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"#editor"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>h1<span class="token operator">></span>富文本编辑器<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token operator">&lt;</span>textarea style<span class="token operator">=</span><span class="token string">"width:700px;height:350px"</span> id<span class="token operator">=</span><span class="token string">"editor"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>textarea<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span></code></pre><h3 id="2-11-3富文本效果"><a href="#2-11-3富文本效果" class="headerlink" title="2.11.3富文本效果"></a>2.11.3富文本效果</h3><p><img src="./images/loading.gif" data-original="../images/posts/JT-%E9%A1%B9%E7%9B%AE%E4%B8%9A%E5%8A%A1%E5%AE%9E%E7%8E%B0/image-20200611172809871.png" alt=""></p><h2 id="2-12-重构商品新增"><a href="#2-12-重构商品新增" class="headerlink" title="2.12 重构商品新增"></a>2.12 重构商品新增</h2><h3 id="2-12-1-页面参数分析"><a href="#2-12-1-页面参数分析" class="headerlink" title="2.12.1 页面参数分析"></a>2.12.1 页面参数分析</h3><ol><li><p>页面url地址:</p><p><img src="./images/loading.gif" data-original="../images/posts/JT-%E9%A1%B9%E7%9B%AE%E4%B8%9A%E5%8A%A1%E5%AE%9E%E7%8E%B0/image-20200611172931880.png" alt=""></p></li><li><p>页面参数:</p><p><img src="./images/loading.gif" data-original="../images/posts/JT-%E9%A1%B9%E7%9B%AE%E4%B8%9A%E5%8A%A1%E5%AE%9E%E7%8E%B0/image-20200611172953691.png" alt=""></p></li></ol><h3 id="2-12-2-重构ItemController"><a href="#2-12-2-重构ItemController" class="headerlink" title="2.12.2 重构ItemController"></a>2.12.2 重构ItemController</h3><pre class=" language-Java"><code class="language-Java">/** * 1.url:http://localhost:8091/item/save * 2.参数: form表单提交 * 3.返回值: VO对象 */@RequestMapping("/save")public SysResult saveItem(Item item,ItemDesc itemDesc) {    /*         * try { itemService.saveItem(item); return SysResult.success(); } catch         * (Exception e) { e.printStackTrace(); return SysResult.fail(); //try-catch         * 必然导致代码可读性差 优化 }         */    itemService.saveItem(item,itemDesc);    return SysResult.success();}</code></pre><h3 id="2-12-3-重构ItemService"><a href="#2-12-3-重构ItemService" class="headerlink" title="2.12.3 重构ItemService"></a>2.12.3 重构ItemService</h3><p>说明:MybatisPlus中可以根据入库信息,自动实现映射.返回全部数据.</p><p>所以item.getId()才能有值.</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 用户点击一次提交之后,实现2张表数据,同时入库 * tb_item,tb_itemDesc,id的值应该相同 */</span><span class="token annotation punctuation">@Override</span><span class="token annotation punctuation">@Transactional</span>    <span class="token comment" spellcheck="true">//控制事务</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveItem</span><span class="token punctuation">(</span>Item item<span class="token punctuation">,</span>ItemDesc itemDesc<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//实现tb_item入库</span>    item<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>         <span class="token punctuation">.</span><span class="token function">setCreated</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">setUpdated</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getCreated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    itemMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//主键自增,入库之后,将所有字段自动映射!!</span>    <span class="token comment" spellcheck="true">//实现tb_itemDesc入库操作</span>    itemDesc<span class="token punctuation">.</span><span class="token function">setItemId</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">setCreated</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getCreated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">setUpdated</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getUpdated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    itemDescMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>itemDesc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-12-4-Mybatis主键返回的说明"><a href="#2-12-4-Mybatis主键返回的说明" class="headerlink" title="2.12.4 Mybatis主键返回的说明"></a>2.12.4 Mybatis主键返回的说明</h3><p>如果没有使用MP,默认条件下Mybatis是不会返回任何信息.如果这时需要使用主键自动的返回,则需要</p><pre class=" language-MySQL"><code class="language-MySQL"><select  useGeneratedKeys="true" keyProperty="id"></select></code></pre><p>MP:号称是面向对象的开发,所以事先对象与字段自动映射,自动的回显.</p><ol><li><p>insert into 入库操作,</p></li><li><p>返回主键ID.  </p></li><li><pre class=" language-mysql"><code class="language-mysql">select * from  tb_item where id= #{id}</code></pre></li></ol><h1 id="3-前台业务"><a href="#3-前台业务" class="headerlink" title="3. 前台业务"></a>3. 前台业务</h1><blockquote><p>实现购物车商品的添加,以及购物车中商品列表的展现</p></blockquote><h3 id="2-1-构建jt-cart"><a href="#2-1-构建jt-cart" class="headerlink" title="2.1 构建jt-cart"></a>2.1 构建jt-cart</h3><h4 id="2-1-1-创建jt-cart项目"><a href="#2-1-1-创建jt-cart项目" class="headerlink" title="2.1.1 创建jt-cart项目"></a>2.1.1 创建jt-cart项目</h4><p><img src="./images/loading.gif" data-original="../images/posts/Dubbo%E6%A1%86%E6%9E%B6%E4%B8%8B%E8%B4%AD%E7%89%A9%E8%BD%A6%E4%B8%9A%E5%8A%A1%E5%AE%9E%E7%8E%B0/image-20200609192850806.png" alt=""></p><h4 id="2-1-2-添加继承-依赖-插件"><a href="#2-1-2-添加继承-依赖-插件" class="headerlink" title="2.1.2 添加继承/依赖/插件"></a>2.1.2 添加继承/依赖/插件</h4><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.jt.vip<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jt-cart<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.jt.vip<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jt-common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--跳过测试类打包 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-surefire-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>skip</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>skip</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><h4 id="2-1-3-创建Cart-POJO"><a href="#2-1-3-创建Cart-POJO" class="headerlink" title="2.1.3 创建Cart POJO"></a>2.1.3 创建Cart POJO</h4><p>在jt-common中添加pojo对象</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>chain<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token annotation punctuation">@TableName</span><span class="token punctuation">(</span><span class="token string">"tb_cart"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cart</span> <span class="token keyword">extends</span> <span class="token class-name">BasePojo</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span>type<span class="token operator">=</span>IdType<span class="token punctuation">.</span>AUTO<span class="token punctuation">)</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//购物车主键</span>    <span class="token keyword">private</span> Long userId<span class="token punctuation">;</span>        <span class="token keyword">private</span> Long itemId<span class="token punctuation">;</span>    <span class="token keyword">private</span> String itemTitle<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//商品的标题</span>    <span class="token keyword">private</span> String itemImage<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//商品图片</span>    <span class="token keyword">private</span> Long itemPrice<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//商品价格</span>    <span class="token keyword">private</span> Integer num<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//商品数量</span><span class="token punctuation">}</span></code></pre><h4 id="2-1-4-修改application-yml配置"><a href="#2-1-4-修改application-yml配置" class="headerlink" title="2.1.4 修改application.yml配置"></a>2.1.4 修改application.yml配置</h4><pre class=" language-yml"><code class="language-yml">server:  port: 8094  servlet:    context-path: /spring:  datasource:    driver-class-name: com.mysql.cj.jdbc.Driver    url: jdbc:mysql://127.0.0.1:3306/jtdb?serverTimezone=GMT%2B8&useUnicode=true&characterEncoding=utf8&autoReconnect=true&allowMultiQueries=true    username: root    password: root#mybatis-plush配置mybatis-plus:  type-aliases-package: com.jt.pojo  mapper-locations: classpath:/mybatis/mappers/*.xml  configuration:    map-underscore-to-camel-case: true  #引入日志信息logging:  level:     com.jt.mapper: debug #关于Dubbo配置   dubbo:  scan:    basePackages: com.jt    #扫描dubbo注解的包路径  application:              #应用名称    name: provider-cart     #一个接口对应一个服务名称,                            #如果一个接口有多个实现类,则名称也应该相同  registry:    address: zookeeper://192.168.126.129:2181?backup=192.168.126.129:2182,192.168.126.129:2183  protocol:  #指定协议    name: dubbo  #使用dubbo协议(tcp-ip)  web-controller直接调用sso-Service                 #port是dubbo协议内部的通信端口    port: 20881  #每一个服务都有自己特定的端口 不能重复.   </code></pre><h4 id="2-1-5-构建代码结构"><a href="#2-1-5-构建代码结构" class="headerlink" title="2.1.5 构建代码结构"></a>2.1.5 构建代码结构</h4><blockquote><p>按照dubbo分别在消费者和生产者</p></blockquote><ol><li>在jt-common模块中提供业务接口</li></ol><p><img src="./images/loading.gif" data-original="../images/posts/Dubbo%E6%A1%86%E6%9E%B6%E4%B8%8B%E8%B4%AD%E7%89%A9%E8%BD%A6%E4%B8%9A%E5%8A%A1%E5%AE%9E%E7%8E%B0/image-20200609193731712.png" alt=""></p><ol start="2"><li>在jt-cart模块中提供业务实现–生产者</li></ol><p><img src="./images/loading.gif" data-original="../images/posts/Dubbo%E6%A1%86%E6%9E%B6%E4%B8%8B%E8%B4%AD%E7%89%A9%E8%BD%A6%E4%B8%9A%E5%8A%A1%E5%AE%9E%E7%8E%B0/image-20200609193956829.png" alt=""></p><blockquote><p>注意mybatis配置</p></blockquote><ol start="3"><li>在jt-cart模块中提供前台页面访问–消费者</li></ol><p><img src="./images/loading.gif" data-original="../images/posts/Dubbo%E6%A1%86%E6%9E%B6%E4%B8%8B%E8%B4%AD%E7%89%A9%E8%BD%A6%E4%B8%9A%E5%8A%A1%E5%AE%9E%E7%8E%B0/image-20200609194341964.png" alt=""></p><h3 id="2-2-JT-CART购物车展现"><a href="#2-2-JT-CART购物车展现" class="headerlink" title="2.2 JT-CART购物车展现"></a>2.2 JT-CART购物车展现</h3><h4 id="2-2-1-业务需求"><a href="#2-2-1-业务需求" class="headerlink" title="2.2.1 业务需求"></a>2.2.1 业务需求</h4><p>当用户点击购物车按钮时,会跳转到购物车的展现页面.需要通过<code>userId</code>查询购物车记录.页面展现的名称为:<code>cart.jsp</code>并且通过<code>${cartList}</code>获取购物车列表信息.</p><p>jsp代码</p><pre class=" language-jsp"><code class="language-jsp"><c:forEach items="${cartList}" var="cart">    <c:set var="totalPrice"  value="${ totalPrice + (cart.itemPrice * cart.num)}"/>    <div id="product_11345721" data-bind="rowid:1" class="item item_selected ">        ......    </div> </c:forEach></code></pre><p><img src="./images/loading.gif" data-original="../images/posts/Dubbo%E6%A1%86%E6%9E%B6%E4%B8%8B%E8%B4%AD%E7%89%A9%E8%BD%A6%E4%B8%9A%E5%8A%A1%E5%AE%9E%E7%8E%B0/image-20200609195359566.png" alt=""></p><h4 id="2-2-2编辑CartController-消费者"><a href="#2-2-2编辑CartController-消费者" class="headerlink" title="2.2.2编辑CartController(消费者)"></a>2.2.2编辑CartController(消费者)</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/cart"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CartController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Reference</span>    <span class="token keyword">private</span> DubboCartService cartService<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 业务需求:展现购物车列表页面     * url: http://www.jt.com/cart/show.html     * 参数:无     * 返回值: cart.jsp页面     * 页面取值: ${cartList}     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/show"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">findCartList</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//通过cookie获取用户ID</span>        User user <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"JT_USER"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Long userId <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Cart<span class="token operator">></span> cartList <span class="token operator">=</span> cartService<span class="token punctuation">.</span><span class="token function">findCartListByUserId</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"cartList"</span><span class="token punctuation">,</span> cartList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"cart"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-2-3编辑CartService"><a href="#2-2-3编辑CartService" class="headerlink" title="2.2.3编辑CartService"></a>2.2.3编辑CartService</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DubboCartServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">DubboCartService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> CartMapper cartMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Cart<span class="token operator">></span> <span class="token function">findCartListByUserId</span><span class="token punctuation">(</span>Long userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>                QueryWrapper<span class="token operator">&lt;</span>Cart<span class="token operator">></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span>Cart<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"user_id"</span><span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> cartMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h4 id="2-2-4-页面效果"><a href="#2-2-4-页面效果" class="headerlink" title="2.2.4 页面效果"></a>2.2.4 页面效果</h4><p><img src="./images/loading.gif" data-original="../images/posts/Dubbo%E6%A1%86%E6%9E%B6%E4%B8%8B%E8%B4%AD%E7%89%A9%E8%BD%A6%E4%B8%9A%E5%8A%A1%E5%AE%9E%E7%8E%B0/image-20200609195820560.png" alt=""></p><h3 id="2-3-购物车新增"><a href="#2-3-购物车新增" class="headerlink" title="2.3 购物车新增"></a>2.3 购物车新增</h3><h4 id="2-3-1-业务分析"><a href="#2-3-1-业务分析" class="headerlink" title="2.3.1 业务分析"></a>2.3.1 业务分析</h4><p>业务说明:</p><p>1.当点击加入购物车时,会将当前商品信息加入购物车.并且跳转到购物车列表页面.同时实现购物车数据的新增操作.</p><p>2.注意事项:</p><p>​    如果用户加购的是同一件商品,则只做数量的更新.</p><p><img src="./images/loading.gif" data-original="../images/posts/Dubbo%E6%A1%86%E6%9E%B6%E4%B8%8B%E8%B4%AD%E7%89%A9%E8%BD%A6%E4%B8%9A%E5%8A%A1%E5%AE%9E%E7%8E%B0/image-20200609195922006.png" alt=""></p><h4 id="2-3-2-页面分析"><a href="#2-3-2-页面分析" class="headerlink" title="2.3.2 页面分析"></a>2.3.2 页面分析</h4><ol><li>页面form表单</li></ol><pre class=" language-jsp"><code class="language-jsp"><form id="cartForm" method="post">    <input class="text" id="buy-num" name="num" value="1"                        onkeyup="setAmount.modify('#buy-num');"/>    <input type="hidden" class="text"  name="itemTitle" value="${item.title }"/>    <input type="hidden" class="text" name="itemImage" value="${item.images[0]}"/>    <input type="hidden" class="text" name="itemPrice" value="${item.price}"/></form></code></pre><ol start="2"><li>页面JS提交</li></ol><pre class=" language-jsp"><code class="language-jsp">//利用post传值function addCart(){    var url = "http://www.jt.com/cart/add/${item.id}.html";    document.forms[0].action = url;        //js设置提交链接    document.forms[0].submit();            //js表单提交}</code></pre><h4 id="2-3-3-编辑CartController"><a href="#2-3-3-编辑CartController" class="headerlink" title="2.3.3 编辑CartController"></a>2.3.3 编辑CartController</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 购物车新增 * 1.url:http://www.jt.com/cart/add/562379.html * 2.参数:  form表单的形式提交   Cart对象接收 * 3.返回值: 重定向到购物车列表页面 * 注意事项:如果购物车中有记录,则更新数量. */</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/add/{itemId}"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//可以自动的为属性赋值</span><span class="token keyword">public</span> String <span class="token function">saveCart</span><span class="token punctuation">(</span>Cart cart<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//通过cookie获取用户ID</span>    User user <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"JT_USER"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Long userId <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cart<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    cartService<span class="token punctuation">.</span><span class="token function">saveCart</span><span class="token punctuation">(</span>cart<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"redirect:/cart/show.html"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="2-3-4-编辑CartService"><a href="#2-3-4-编辑CartService" class="headerlink" title="2.3.4 编辑CartService"></a>2.3.4 编辑CartService</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 如果购物车中有记录,则更新数据 * 问题: 如何判断购物车中是否有记录     user_id/item_id */</span><span class="token annotation punctuation">@Override</span><span class="token annotation punctuation">@Transactional</span> <span class="token comment" spellcheck="true">//事务控制</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveCart</span><span class="token punctuation">(</span>Cart cart<span class="token punctuation">)</span> <span class="token punctuation">{</span>    QueryWrapper<span class="token operator">&lt;</span>Cart<span class="token operator">></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span>Cart<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//使用user_id和item_id作为联合主键进行查询</span>    queryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"user_id"</span><span class="token punctuation">,</span> cart<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"item_id"</span><span class="token punctuation">,</span> cart<span class="token punctuation">.</span><span class="token function">getItemId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Cart cartDB <span class="token operator">=</span> cartMapper<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//应该购物车新增</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cartDB <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            cart<span class="token punctuation">.</span><span class="token function">setCreated</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">setUpdated</span><span class="token punctuation">(</span>cart<span class="token punctuation">.</span><span class="token function">getCreated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cartMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>cart<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//更新数据库的数量</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> cart<span class="token punctuation">.</span><span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> cartDB<span class="token punctuation">.</span><span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cartDB<span class="token punctuation">.</span><span class="token function">setNum</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setUpdated</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cartMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>cartDB<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-3-5-页面效果"><a href="#2-3-5-页面效果" class="headerlink" title="2.3.5 页面效果"></a>2.3.5 页面效果</h4><p><img src="./images/loading.gif" data-original="../images/posts/Dubbo%E6%A1%86%E6%9E%B6%E4%B8%8B%E8%B4%AD%E7%89%A9%E8%BD%A6%E4%B8%9A%E5%8A%A1%E5%AE%9E%E7%8E%B0/image-20200609200629248.png" alt=""></p><h3 id="2-4-购物车删除"><a href="#2-4-购物车删除" class="headerlink" title="2.4 购物车删除"></a>2.4 购物车删除</h3><h4 id="2-4-1-业务说明"><a href="#2-4-1-业务说明" class="headerlink" title="2.4.1 业务说明"></a>2.4.1 业务说明</h4><p>当用户点击购物车删除按钮时.执行删除业务,并且重定向到购物车列表页面.</p><p><img src="./images/loading.gif" data-original="../images/posts/Dubbo%E6%A1%86%E6%9E%B6%E4%B8%8B%E8%B4%AD%E7%89%A9%E8%BD%A6%E4%B8%9A%E5%8A%A1%E5%AE%9E%E7%8E%B0/image-20200609200717327.png" alt=""></p><h4 id="2-4-2-编辑CartController"><a href="#2-4-2-编辑CartController" class="headerlink" title="2.4.2 编辑CartController"></a>2.4.2 编辑CartController</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 购物车删除操作 * 1.url地址:http://www.jt.com/cart/delete/562379.html * 2.参数:  562379 商品id号 * 3.返回值: 重定向到购物车列表页面 */</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/delete/{itemId}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">deleteCart</span><span class="token punctuation">(</span>Cart cart<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Long userId <span class="token operator">=</span> 7L<span class="token punctuation">;</span>    cart<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    cartService<span class="token punctuation">.</span><span class="token function">deleteCart</span><span class="token punctuation">(</span>cart<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"redirect:/cart/show.html"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="2-3-3编辑CartService"><a href="#2-3-3编辑CartService" class="headerlink" title="2.3.3编辑CartService"></a>2.3.3编辑CartService</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteCart</span><span class="token punctuation">(</span>Cart cart<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//MP规则: 根据对象中不为null的属性充当where条件  itemId/userId</span>    QueryWrapper<span class="token operator">&lt;</span>Cart<span class="token operator">></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span>Cart<span class="token operator">></span><span class="token punctuation">(</span>cart<span class="token punctuation">)</span><span class="token punctuation">;</span>    cartMapper<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-5-购物车商品数量增删"><a href="#2-5-购物车商品数量增删" class="headerlink" title="2.5 购物车商品数量增删"></a>2.5 购物车商品数量增删</h3><h1 id="4-全局异常处理机制"><a href="#4-全局异常处理机制" class="headerlink" title="4. 全局异常处理机制"></a>4. 全局异常处理机制</h1><h2 id="4-1-业务说明"><a href="#4-1-业务说明" class="headerlink" title="4.1 业务说明"></a>4.1 业务说明</h2><p>由于业务执行时不能保证程序不出错,所以写代码必须添加try-catch,但是如果频繁的添加try-catch则必然导致代码结构混乱.所以需要进行优化.</p><p>原则:如果出现了问题一般将检查异常,转化为运行时异常.</p><p>核心原理: 代理动态思想——-&gt;AOP操作</p><h2 id="4-2-编辑全局异常处理"><a href="#4-2-编辑全局异常处理" class="headerlink" title="4.2 编辑全局异常处理"></a>4.2 编辑全局异常处理</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestControllerAdvice</span>    <span class="token comment" spellcheck="true">//返回值结果都是json字符串</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SysConfigExceptionAOP</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 1.拦截什么样的异常   运行时异常     * 2.返回值结果是什么   系统返回值VO对象     */</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>RuntimeException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">sysResult</span><span class="token punctuation">(</span>Exception exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>exception<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        exception<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> SysResult<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Project </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis常见的性能问题</title>
      <link href="/undefined/776d.html"/>
      <url>/undefined/776d.html</url>
      
        <content type="html"><![CDATA[<h2 id="Redis-常见的性能问题都有哪些？如何解决？"><a href="#Redis-常见的性能问题都有哪些？如何解决？" class="headerlink" title="Redis 常见的性能问题都有哪些？如何解决？"></a>Redis 常见的性能问题都有哪些？如何解决？</h2><ul><li>Master写内存快照，save命令调度rdbSave函数，会阻塞主线程的工作，当快照比较大时对性能影响是非常大的，会间断性暂停服务，所以Master最好不要写内存快照。</li><li>Master AOF持久化，如果不重写AOF文件，这个持久化方式对性能的影响是最小的，但是AOF文件会不断增大，AOF文件过大会影响Master重启的恢复速度。Master最好不要做任何持久化工作，包括内存快照和AOF日志文件，特别是不要启用内存快照做持久化,如果数据比较关键，某个Slave开启AOF备份数据，策略为每秒同步一次。</li><li>Master调用BGREWRITEAOF重写AOF文件，AOF在重写的时候会占大量的CPU和内存资源，导致服务load过高，出现短暂服务暂停现象。</li><li>Redis主从复制的性能问题，为了主从复制的速度和连接的稳定性，Slave和Master最好在同一个局域网内</li></ul><h3 id="MySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据？"><a href="#MySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据？" class="headerlink" title="MySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据？"></a>MySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据？</h3><p>redis 内存数据集大小上升到一定大小的时候，就会施行数据淘汰策略。redis 提供 6种数据淘汰策略：</p><ul><li>voltile-lru：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰</li><li>volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰</li><li>volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰</li><li>allkeys-lru：从数据集（server.db[i].dict）中挑选最近最少使用的数据淘汰</li><li>allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰</li><li>no-enviction（驱逐）：禁止驱逐数据</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zookeeper安装与单机集群</title>
      <link href="/undefined/e6b7.html"/>
      <url>/undefined/e6b7.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-Zookeeper介绍"><a href="#1-Zookeeper介绍" class="headerlink" title="1 Zookeeper介绍"></a>1 Zookeeper介绍</h2><p>ZooKeeper是一个<a href="https://baike.baidu.com/item/分布式/19276232" target="_blank" rel="noopener">分布式</a>的，开放源码的<a href="https://baike.baidu.com/item/分布式应用程序/9854429" target="_blank" rel="noopener">分布式应用程序</a>协调服务，是<a href="https://baike.baidu.com/item/Google" target="_blank" rel="noopener">Google</a>的Chubby一个<a href="https://baike.baidu.com/item/开源/246339" target="_blank" rel="noopener">开源</a>的实现，是Hadoop和Hbase的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等。</p><p>ZooKeeper的目标就是封装好复杂易出错的关键服务，将简单易用的接口和性能高效、功能稳定的系统提供给用户。</p><p>ZooKeeper包含一个简单的原语集,提供Java和C的接口。</p><p>ZooKeeper代码版本中，提供了分布式独享锁、选举、队列的接口，代码在zookeeper-3.4.3\src\recipes。其中分布锁和队列有<a href="https://baike.baidu.com/item/Java/85979" target="_blank" rel="noopener">Java</a>和C两个版本，选举只有Java版本。</p><blockquote><p>总结:Zookeeper负责服务的协调调度.当客户端发起请求时,返回正确的服务器地址.</p></blockquote><h2 id="2-Zookeeper下载"><a href="#2-Zookeeper下载" class="headerlink" title="2 Zookeeper下载"></a>2 Zookeeper下载</h2><p>网址: <a href="http://zookeeper.apache.org/releases.html;下载路径,点击download" target="_blank" rel="noopener">http://zookeeper.apache.org/releases.html;下载路径,点击download</a>.</p><p><img src="./images/loading.gif" data-original="../images/posts/Zookeeper-install-2020-6-6/image-20200606194329029.png" alt="下载页"></p><p>下载Zookeeper地址.</p><p><a href="http://mirrors.hust.edu.cn/apache/zookeeper/" target="_blank" rel="noopener">http://mirrors.hust.edu.cn/apache/zookeeper/</a></p><p><img src="./images/loading.gif" data-original="../images/posts/Zookeeper-install-2020-6-6/image-20200606195018229.png" alt="选择对应的版本下载"></p><h2 id="3-Zookeeper安装"><a href="#3-Zookeeper安装" class="headerlink" title="3 Zookeeper安装"></a>3 Zookeeper安装</h2><h3 id="3-1-安装jdk"><a href="#3-1-安装jdk" class="headerlink" title="3.1 安装jdk"></a>3.1 安装jdk</h3><p>ZooKeeper是用Java编写的，运行在baiJava环境上，du因此，在部署zk的机器上zhi需要安装Java运行环境。dao为了正常运行zk，我们需要JRE1.6或者以上的版本。</p><ol><li>将JDK1.8文件上传到Linux操作系统中/src/usr/local/java/文件下.</li></ol><p><img src="./images/loading.gif" data-original="../images/posts/Zookeeper-install-2020-6-6/image-20200606195329119.png" alt="jdk目录"></p><ol start="2"><li>解压文件</li></ol><pre class=" language-shell"><code class="language-shell"># 解压上传的压缩包xxx.tar.gztar -xvf jdk-8u51-linux-x64.tar.gz# 重命名mv jdk.1.8.0_51 jdk.1.8</code></pre><ol start="3"><li>配置环境变量<code>/etc/profile</code></li></ol><pre class=" language-shell"><code class="language-shell">vim /etc/profile# 添加如下内容export JAVA_HOME=/usr/local/src/jdk1.8export PATH=$JAVA_HOME/bin:$PATHexport CLASSPATH=.:$JAVA_HOME/lib</code></pre><p><img src="./images/loading.gif" data-original="../images/posts/Zookeeper-install-2020-6-6/image-20200606195639550.png" alt="jdk环境变量"></p><ol start="4"><li>检查安装是否成功</li></ol><pre class=" language-shell"><code class="language-shell"># 添加完环境变量后,执行下面命令使之生效source /etc/profile# 查看JDK版本信息java -version</code></pre><p><img src="./images/loading.gif" data-original="../images/posts/Zookeeper-install-2020-6-6/image-20200606195923698.png" alt="JDK版本信息"></p><h3 id="3-2-安装Zookeeper"><a href="#3-2-安装Zookeeper" class="headerlink" title="3.2 安装Zookeeper"></a>3.2 安装Zookeeper</h3><ol><li>上传下载好的安装包到服务器</li></ol><p><img src="./images/loading.gif" data-original="../images/posts/Zookeeper-install-2020-6-6/image-20200606200230461.png" alt="image-20200606200230461"></p><ol start="2"><li>解压文件</li></ol><pre class=" language-shell"><code class="language-shell"># 解压上传的压缩包xxx.tar.gztar -xvf apache-zookeeper-3.6.0-bin.tar.gz# 重命名mv apache-zookeeper-3.6.0-bin zookeeper-3.6.0</code></pre><ol start="3"><li>修改配置文件</li></ol><ul><li>在zookeeper-3.6.0目录下面新建2个文件夹<code>data</code>和<code>log</code></li></ul><pre class=" language-shell"><code class="language-shell">mkdir data log</code></pre><p><img src="./images/loading.gif" data-original="../images/posts/Zookeeper-install-2020-6-6/image-20200606200603349.png" alt="新建文件夹"></p><ul><li>进入conf目录中修改配置文件<code>zoo_sample.cfg</code></li></ul><pre class=" language-shell"><code class="language-shell"># 复制配置文件并修改名称cp zoo_sample.cfg zoo.cfg</code></pre><p>​    修改该下面图片中红框中的内容</p><p><img src="./images/loading.gif" data-original="../images/posts/Zookeeper-install-2020-6-6/image-20200606200852656.png" alt="修改内容"></p><ul><li>启动Zookeeper</li></ul><p>进入<code>bin</code>目录下, 执行下面命令进行测试</p><pre class=" language-shell"><code class="language-shell">sh zkServer.sh start     或者  ./zkServer.sh startsh zkServer.sh stopsh zkServer.sh status</code></pre><h2 id="4-Zookeeper单机集群安装"><a href="#4-Zookeeper单机集群安装" class="headerlink" title="4. Zookeeper单机集群安装"></a>4. Zookeeper单机集群安装</h2><h3 id="4-1-准备安装文件夹"><a href="#4-1-准备安装文件夹" class="headerlink" title="4.1 准备安装文件夹"></a>4.1 准备安装文件夹</h3><p>在zookeeper根目录中创建新的集群目录<code>zkCluster</code>.</p><pre><code>mkdir zkClusters</code></pre><p><img src="./images/loading.gif" data-original="../images/posts/Zookeeper-install-2020-6-6/image-20200606201617137.png" alt="新建文件夹"></p><p>在集群目录<code>zkCluster</code>中创建节点目录<code>zk1</code>,<code>zk2</code>,<code>zk3</code>,并在每个目录里创建data/log文件夹</p><pre class=" language-shell"><code class="language-shell">mkdir {zk1,zk2,zk3}/{data,log}</code></pre><p><img src="./images/loading.gif" data-original="../images/posts/Zookeeper-install-2020-6-6/image-20200606202106144.png" alt="节点目录"></p><h3 id="4-2-添加myid文件"><a href="#4-2-添加myid文件" class="headerlink" title="4.2 添加myid文件"></a>4.2 添加myid文件</h3><p>分别在zk1/zk2/zk3中的<strong>data</strong>文件夹中创建新的文件myid.其中的内容依次为1/2/3,与zk节点号对应.</p><pre class=" language-shell"><code class="language-shell">echo "1">/usr/local/src/zookeeper-3.6.0/zkClusters/zk1/data/myidecho "2">/usr/local/src/zookeeper-3.6.0/zkClusters/zk2/data/myidecho "3">/usr/local/src/zookeeper-3.6.0/zkClusters/zk3/data/myid</code></pre><h3 id="4-3-编辑配置文件"><a href="#4-3-编辑配置文件" class="headerlink" title="4.3 编辑配置文件"></a>4.3 编辑配置文件</h3><p>将zoo_sample.cfg 复制为zoo1.cfg之后修改配置文件.</p><pre class=" language-shell"><code class="language-shell">dataDir=/usr/local/src/zookeeper-3.6.0/zkClusters/zk1/datadataLogDir=/usr/local/src/zookeeper-3.6.0/zkClusters/zk1/log# the port at which the clients will connectclientPort=2181server.1=192.168.126.129:2887:3887server.2=192.168.126.129:2888:3888server.3=192.168.126.129:2889:3889</code></pre><p><img src="./images/loading.gif" data-original="../images/posts/Zookeeper-install-2020-6-6/image-20200606203040917.png" alt="配置文件修改内容"></p><p>配置完成后将zoo1.cfg复制为zoo2.cfg和zoo3.cfg.修改与之对应的节点目录和端口号.</p><p><img src="./images/loading.gif" data-original="../images/posts/Zookeeper-install-2020-6-6/image-20200606203314615.png" alt="zoo1.cfg复制为zoo2.cfg和zoo3.cfg"></p><p>修改zoo2.cgf</p><p><img src="./images/loading.gif" data-original="../images/posts/Zookeeper-install-2020-6-6/image-20200606203424913.png" alt="zoo2.cgf"></p><p>修改zoo3.cgf</p><p><img src="./images/loading.gif" data-original="../images/posts/Zookeeper-install-2020-6-6/image-20200606203514557.png" alt="zoo3.cgf"></p><h3 id="4-4-集群测试"><a href="#4-4-集群测试" class="headerlink" title="4.4 集群测试"></a>4.4 集群测试</h3><ol><li>启动集群</li></ol><pre class=" language-shell"><code class="language-shell">sh zkServer.sh start  zoo1.cfgsh zkServer.sh start  zoo2.cfgsh zkServer.sh start  zoo3.cfg</code></pre><p><img src="./images/loading.gif" data-original="../images/posts/Zookeeper-install-2020-6-6/image-20200606205816143.png" alt="启动zookeeper"></p><ol start="2"><li>启动后集群状态</li></ol><pre class=" language-shell"><code class="language-shell">sh zkServer.sh status  zoo1.cfgsh zkServer.sh status  zoo2.cfgsh zkServer.sh status  zoo3.cfg</code></pre><p><img src="./images/loading.gif" data-original="../images/posts/Zookeeper-install-2020-6-6/image-20200606205915659.png" alt="集群状态"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> software </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA使用</title>
      <link href="/undefined/91c5.html"/>
      <url>/undefined/91c5.html</url>
      
        <content type="html"><![CDATA[<p>springboot项目访问项目主页出现404</p><h2 id="项目报错汇总"><a href="#项目报错汇总" class="headerlink" title="项目报错汇总"></a>项目报错汇总</h2><p>springboot项目访问项目主页出现404</p><p><img src="./images/loading.gif" data-original="../images/posts/Tool-IDEA/image-20200603104528243.png" alt="访问-404"></p><p>IDEA设置: 添加工作目录</p><p><img src="./images/loading.gif" data-original="../images/posts/Tool-IDEA/image-20200603104601900.png" alt="IDEA设置"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> cate1 </category>
          
          <category> cate2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> keyword1,keyword2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>synchronized</title>
      <link href="/undefined/7ebc.html"/>
      <url>/undefined/7ebc.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h2><p><code>synchronized</code> 是 Java 中的关键字，是利用锁的机制来实现同步的。</p><p>锁机制有如下两种特性：</p><ul><li><code>互斥性</code>：即在同一时间只允许一个线程持有某个对象锁，通过这种特性来实现多线程中的协调机制，这样在同一时间只有一个线程对需同步的代码块(复合操作)进行访问。互斥性我们也往往称为操作的原子性。</li><li><code>可见性</code>：必须确保在锁被释放之前，对共享变量所做的修改，对于随后获得该锁的另一个线程是可见的（即在获得锁时应获得最新共享变量的值），否则另一个线程可能是在本地缓存的某个副本上继续操作从而引起不一致。</li></ul><h2 id="2-对象锁和类锁"><a href="#2-对象锁和类锁" class="headerlink" title="2. 对象锁和类锁"></a>2. 对象锁和类锁</h2><h3 id="2-1-对象锁"><a href="#2-1-对象锁" class="headerlink" title="2.1 对象锁"></a>2.1 对象锁</h3><p>在 Java 中，每个对象都会有一个 monitor 对象，这个对象其实就是 Java 对象的锁，通常会被称为“内置锁”或“对象锁”。类的对象可以有多个，所以每个对象有其独立的对象锁，互不干扰。</p><h3 id="2-2-类锁"><a href="#2-2-类锁" class="headerlink" title="2.2 类锁"></a>2.2 类锁</h3><p>在 Java 中，针对每个类也有一个锁，可以称为“类锁”，类锁实际上是通过对象锁实现的，即类的 Class 对象锁。每个类只有一个 Class 对象，所以每个类只有一个类锁。</p><h2 id="3-synchronized的三种应用方式"><a href="#3-synchronized的三种应用方式" class="headerlink" title="3. synchronized的三种应用方式"></a>3. synchronized的三种应用方式</h2><h3 id="3-1-同步普通方法"><a href="#3-1-同步普通方法" class="headerlink" title="3.1 同步普通方法"></a>3.1 同步普通方法</h3><p>锁的是当前对象,  进入同步代码块前要获得当前实例的锁</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountingSync</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//共享资源(临界资源)</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * synchronized 修饰实例方法     */</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">increase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">1000000</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">increase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        AccountingSync instance<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">AccountingSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//join含义:当前线程A等待thread线程终止之后才能从thread.join()返回</span>        t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 输出结果:     * 2000000     */</span><span class="token punctuation">}</span></code></pre><p>上述代码中，我们开启两个线程操作同一个共享资源即变量i，由于i++;操作并不具备原子性，该操作是先读取值，然后写回一个新值，相当于原来的值加上1，分两步完成，如果第二个线程在第一个线程读取旧值和写回新值期间读取i的域值，那么第二个线程就会与第一个线程一起看到同一个值，并执行相同值的加1操作，这也就造成了线程安全失败，因此对于increase方法必须使用synchronized修饰，以便保证线程安全。此时我们应该注意到synchronized修饰的是实例方法increase，在这样的情况下，当前线程的锁便是实例对象instance，注意Java中的线程同步锁可以是任意对象。</p><h3 id="3-2-同步静态方法"><a href="#3-2-同步静态方法" class="headerlink" title="3.2 同步静态方法"></a>3.2 同步静态方法</h3><p>锁的是当前 <code>Class</code> 对象, 进入同步代码前要获得当前类对象的锁. </p><p>由于静态成员不专属于任何一个实例对象，是类成员，因此通过class对象锁可以控制静态 成员的并发操作。</p><p>需要注意的是如果一个线程A调用一个实例对象的非static synchronized方法，而线程B需要调用这个实例对象所属类的静态 synchronized方法，是允许的，不会发生互斥现象，因为访问静态 synchronized 方法占用的锁是当前类的class对象，而访问非静态 synchronized 方法占用的锁是当前实例对象锁，但我们应该意识到这种情况下可能会发现线程安全问题(操作了共享静态变量i)。</p><p>看如下代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountingSyncClass</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 作用于静态方法,锁是当前class对象,也就是     * AccountingSyncClass类对应的class对象     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">increase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 非静态,访问时锁不一样不会发生互斥     */</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">increase4Obj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">1000000</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">increase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//new新实例</span>        Thread t1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AccountingSyncClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//new新实例</span>        Thread t2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AccountingSyncClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//启动线程</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-3-同步代码块"><a href="#3-3-同步代码块" class="headerlink" title="3.3 同步代码块"></a>3.3 同步代码块</h3><p>指定加锁对象,  锁的是 <code>( )</code> 中的对象, 进入同步代码库前要获得给定对象的锁</p><p>在某些情况下，我们编写的方法体可能比较大，同时存在一些比较耗时的操作，而需要同步的代码又只有一小部分，如果直接对整个方法进行同步操作，可能会得不偿失，此时我们可以使用同步代码块的方式对需要同步的代码进行包裹，这样就无需对整个方法进行同步操作了，同步代码块的使用示例如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountingSync</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> AccountingSync instance<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">AccountingSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//省略其他耗时操作....</span>        <span class="token comment" spellcheck="true">//使用同步代码块对变量i进行同步操作,锁对象为instance</span>        <span class="token keyword">synchronized</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">1000000</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    i<span class="token operator">++</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        Thread t1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>从代码看出，将synchronized作用于一个给定的实例对象instance，即当前实例对象就是锁对象，每次当线程进入synchronized包裹的代码块时就会要求当前线程持有instance实例对象锁，如果当前有其他线程正持有该对象锁，那么新到的线程就必须等待，这样也就保证了每次只有一个线程执行i++;操作。当然除了instance作为对象外，我们还可以使用this对象(代表当前实例)或者当前类的class对象作为锁，如下代码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//this,当前实例对象锁</span><span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">1000000</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//class对象锁</span><span class="token keyword">synchronized</span><span class="token punctuation">(</span>AccountingSync<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">1000000</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="4-synchronized底层语义原理"><a href="#4-synchronized底层语义原理" class="headerlink" title="4. synchronized底层语义原理"></a>4. synchronized底层语义原理</h2><h3 id="4-1-JVM层级-synchronized底层语义原理（Hotspot）"><a href="#4-1-JVM层级-synchronized底层语义原理（Hotspot）" class="headerlink" title="4.1 JVM层级-synchronized底层语义原理（Hotspot）"></a>4.1 JVM层级-synchronized底层语义原理（Hotspot）</h3><p><code>理解Java对象头与Monitor</code></p><p>在JVM中，对象(new Object())在内存中的布局分为四块区域：对象头、实例数据和对齐填充。如下：</p><p><img src="./images/loading.gif" data-original="../images/posts/Java-synchronized/image-20200601223036762.png" alt="image-20200601223036762"></p><ul><li><code>mark word</code>和 <code>class pointer</code>表示Java头对象</li><li><code>实例变量</code>: 存放类的属性数据信息，包括父类的属性信息，如果是数组的实例部分还包括数组的长度，这部分内存按4字节对齐。</li><li><code>填充数据</code>: 由于虚拟机要求对象起始地址必须是8字节的整数倍。填充数据不是必须存在的，仅仅是为了字节对齐，这点了解即可。</li></ul><p>而对于顶部，则是<code>Java头对象</code>，它实现synchronized的锁对象的基础. 一般而言，synchronized使用的锁对象是存储在Java对象头里的，jvm中采用2个字来存储对象头(如果对象是数组则会分配3个字，多出来的1个字记录的是数组长度)，其主要结构是由<code>Mark Word</code> 和 <code>Class pointer</code>组成，其结构说明如下表：</p><table><thead><tr><th>虚拟机位数</th><th>头对象结构</th><th>说明</th></tr></thead><tbody><tr><td>32/64bit</td><td>Mark Word</td><td>存储对象的hashCode、锁信息或分代年龄或GC标志等信息</td></tr><tr><td>32/64bit</td><td>Class pointer</td><td>类型指针指向对象的类元数据，JVM通过这个指针确定该对象是哪个类的实例</td></tr></tbody></table><p>其中Mark Word在默认情况下存储着对象的<code>HashCode</code>、<code>分代年龄</code>、<code>锁标记位</code>等以下是32位JVM的Mark Word默认存储结构<br>由于对象头的信息是与对象自身定义的数据没有关系的额外存储成本，因此考虑到JVM的空间效率，Mark Word 被设计成为一个非固定的数据结构，以便存储更多有效的数据，它会根据对象本身的状态复用自己的存储空间，如32位JVM下，除了上述列出的Mark Word默认存储结构外，还有如下可能变化的结构：</p><p><img src="./images/loading.gif" data-original="../images/posts/Java-synchronized/image-20200601224108043.png" alt="image-20200601224108043"></p><p>其中轻量级锁和偏向锁是Java 6 对 synchronized 锁进行优化后新增加的，稍后我们会简要分析。这里我们主要分析一下重量级锁也就是通常说synchronized的对象锁，锁标识位为10，其中指针指向的是monitor对象（也称为管程或监视器锁）的起始地址。每个对象都存在着一个 monitor 与之关联，对象与其 monitor 之间的关系有存在多种实现方式，如monitor可以与对象一起创建销毁或当线程试图获取对象锁时自动生成，但当一个 monitor 被某个线程持有后，它便处于锁定状态。在Java虚拟机(HotSpot)中，monitor是由ObjectMonitor实现的，其主要数据结构如下（位于HotSpot虚拟机源码ObjectMonitor.hpp文件，C++实现的）</p><pre class=" language-c++"><code class="language-c++">ObjectMonitor() {    _header       = NULL;    _count        = 0; //记录个数    _waiters      = 0,    _recursions   = 0;    _object       = NULL;    _owner        = NULL;    _WaitSet      = NULL; //处于wait状态的线程，会被加入到_WaitSet    _WaitSetLock  = 0 ;    _Responsible  = NULL ;    _succ         = NULL ;    _cxq          = NULL ;    FreeNext      = NULL ;    _EntryList    = NULL ; //处于等待锁block状态的线程，会被加入到该列表    _SpinFreq     = 0 ;    _SpinClock    = 0 ;    OwnerIsThread = 0 ;  }</code></pre><p>ObjectMonitor中有两个队列，_WaitSet 和 _EntryList，用来保存ObjectWaiter对象列表( 每个等待锁的线程都会被封装成ObjectWaiter对象)，_owner指向持有ObjectMonitor对象的线程，当多个线程同时访问一段同步代码时，首先会进入 _EntryList 集合，当线程获取到对象的monitor 后进入 _Owner 区域并把monitor中的owner变量设置为当前线程同时monitor中的计数器count加1，若线程调用 wait() 方法，将释放当前持有的monitor，owner变量恢复为null，count自减1，同时该线程进入 WaitSe t集合中等待被唤醒。若当前线程执行完毕也将释放monitor(锁)并复位变量的值，以便其他线程进入获取monitor(锁)。如下图所示</p><p><img src="./images/loading.gif" data-original="../images/posts/Java-synchronized/image-20200601231928952.png" alt="image-20200601231928952"></p><p>由此看来，monitor对象存在于每个Java对象的对象头中(存储的指针的指向)，synchronized锁便是通过这种方式获取锁的，也是为什么Java中任意对象可以作为锁的原因，同时也是notify/notifyAll/wait等方法存在于顶级对象Object中的原因,有了上述知识基础后，下面我们将进一步分析synchronized在字节码层面的具体语义实现。</p><h3 id="4-2-字节码层级-synchronized代码块底层原理"><a href="#4-2-字节码层级-synchronized代码块底层原理" class="headerlink" title="4.2 字节码层级-synchronized代码块底层原理"></a>4.2 字节码层级-synchronized代码块底层原理</h3><p><code>JVM</code> 是通过进入、退出对象监视器( <code>Monitor</code> )来实现对方法、同步块的同步的。</p><p>具体实现是在编译之后在同步方法调用前加入一个 <code>monitor.enter</code> 指令，在退出方法和异常处插入 <code>monitor.exit</code> 的指令。</p><p>其本质就是对一个对象监视器( <code>Monitor</code> )进行获取，而这个获取过程具有排他性从而达到了同一时刻只能一个线程访问的目的。</p><p>而对于没有获取到锁的线程将会阻塞到方法入口处，直到获取锁的线程 <code>monitor.exit</code> 之后才能尝试继续获取锁。</p><p>现在我们重新定义一个synchronized修饰的同步代码块，在代码块中操作共享变量i，如下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SyncCodeBlock</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">syncTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//同步代码库</span>       <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           i<span class="token operator">++</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>编译上述代码并使用javap反编译后得到字节码如下(这里我们省略一部分没有必要的信息)：</p><pre class=" language-java"><code class="language-java"> MD5 checksum c80bc322c87b312de760942820b4fed5  Compiled from <span class="token string">"SyncCodeBlock.java"</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">com<span class="token punctuation">.</span>zejian<span class="token punctuation">.</span>concurrencys<span class="token punctuation">.</span>SyncCodeBlock</span>  minor version<span class="token operator">:</span> <span class="token number">0</span>  major version<span class="token operator">:</span> <span class="token number">52</span>  flags<span class="token operator">:</span> ACC_PUBLIC<span class="token punctuation">,</span> ACC_SUPERConstant pool<span class="token operator">:</span>  <span class="token comment" spellcheck="true">//........省略常量池中数据</span>  <span class="token comment" spellcheck="true">//构造函数</span>  <span class="token keyword">public</span> com<span class="token punctuation">.</span>zejian<span class="token punctuation">.</span>concurrencys<span class="token punctuation">.</span><span class="token function">SyncCodeBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    descriptor<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>V    flags<span class="token operator">:</span> ACC_PUBLIC    Code<span class="token operator">:</span>      stack<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">1</span>         <span class="token number">0</span><span class="token operator">:</span> aload_0         <span class="token number">1</span><span class="token operator">:</span> invokespecial #<span class="token number">1</span>                  <span class="token comment" spellcheck="true">// Method java/lang/Object."&lt;init>":()V</span>         <span class="token number">4</span><span class="token operator">:</span> <span class="token keyword">return</span>      LineNumberTable<span class="token operator">:</span>        line <span class="token number">7</span><span class="token operator">:</span> <span class="token number">0</span>  <span class="token comment" spellcheck="true">//===========主要看看syncTask方法实现================</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">syncTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    descriptor<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>V    flags<span class="token operator">:</span> ACC_PUBLIC    Code<span class="token operator">:</span>      stack<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">1</span>         <span class="token number">0</span><span class="token operator">:</span> aload_0         <span class="token number">1</span><span class="token operator">:</span> dup         <span class="token number">2</span><span class="token operator">:</span> astore_1         <span class="token number">3</span><span class="token operator">:</span> monitorenter  <span class="token comment" spellcheck="true">//注意此处，进入同步方法</span>         <span class="token number">4</span><span class="token operator">:</span> aload_0         <span class="token number">5</span><span class="token operator">:</span> dup         <span class="token number">6</span><span class="token operator">:</span> getfield      #<span class="token number">2</span>             <span class="token comment" spellcheck="true">// Field i:I</span>         <span class="token number">9</span><span class="token operator">:</span> iconst_1        <span class="token number">10</span><span class="token operator">:</span> iadd        <span class="token number">11</span><span class="token operator">:</span> putfield      #<span class="token number">2</span>            <span class="token comment" spellcheck="true">// Field i:I</span>        <span class="token number">14</span><span class="token operator">:</span> aload_1        <span class="token number">15</span><span class="token operator">:</span> monitorexit   <span class="token comment" spellcheck="true">//注意此处，退出同步方法</span>        <span class="token number">16</span><span class="token operator">:</span> <span class="token keyword">goto</span>          <span class="token number">24</span>        <span class="token number">19</span><span class="token operator">:</span> astore_2        <span class="token number">20</span><span class="token operator">:</span> aload_1        <span class="token number">21</span><span class="token operator">:</span> monitorexit <span class="token comment" spellcheck="true">//注意此处，退出同步方法</span>        <span class="token number">22</span><span class="token operator">:</span> aload_2        <span class="token number">23</span><span class="token operator">:</span> athrow        <span class="token number">24</span><span class="token operator">:</span> <span class="token keyword">return</span>      Exception table<span class="token operator">:</span>      <span class="token comment" spellcheck="true">//省略其他字节码.......</span><span class="token punctuation">}</span>SourceFile<span class="token operator">:</span> <span class="token string">"SyncCodeBlock.java"</span></code></pre><p>我们主要关注字节码中的如下代码</p><pre class=" language-java"><code class="language-java"><span class="token number">3</span><span class="token operator">:</span> monitorenter  <span class="token comment" spellcheck="true">//进入同步方法</span><span class="token comment" spellcheck="true">//..........省略其他  </span><span class="token number">15</span><span class="token operator">:</span> monitorexit   <span class="token comment" spellcheck="true">//退出同步方法</span><span class="token number">16</span><span class="token operator">:</span> <span class="token keyword">goto</span>          <span class="token number">24</span><span class="token comment" spellcheck="true">//省略其他.......</span><span class="token number">21</span><span class="token operator">:</span> monitorexit <span class="token comment" spellcheck="true">//退出同步方法</span></code></pre><p>从字节码中可知同步语句块的实现使用的是monitorenter 和 monitorexit 指令.</p><p>其中monitorenter指令指向同步代码块的开始位置，monitorexit指令则指明同步代码块的结束位置.</p><p>当执行monitorenter指令时，当前线程将试图获取 objectref(即对象锁) 所对应的 monitor 的持有权，当 objectref 的 monitor 的进入计数器为 0，那线程可以成功取得 monitor，并将计数器值设置为 1，取锁成功。</p><p>如果当前线程已经拥有 objectref 的 monitor 的持有权，那它可以重入这个 monitor (关于重入性稍后会分析)，重入时计数器的值也会加 1。</p><p>倘若其他线程已经拥有 objectref 的 monitor 的所有权，那当前线程将被阻塞，直到正在执行线程执行完毕，即monitorexit指令被执行，执行线程将释放 monitor(锁)并设置计数器值为0 ，其他线程将有机会持有 monitor 。</p><p>值得注意的是编译器将会确保无论方法通过何种方式完成，方法中调用过的每条 monitorenter 指令都有执行其对应 monitorexit 指令，而无论这个方法是正常结束还是异常结束。</p><p>为了保证在方法异常完成时 monitorenter 和 monitorexit 指令依然可以正确配对执行，编译器会自动产生一个异常处理器，这个异常处理器声明可处理所有的异常，它的目的就是用来执行 monitorexit 指令。</p><p>从字节码中也可以看出多了一个monitorexit指令，它就是异常结束时被执行的释放monitor 的指令。</p><h3 id="4-3-字节码层级-synchronized方法底层原理"><a href="#4-3-字节码层级-synchronized方法底层原理" class="headerlink" title="4.3 字节码层级-synchronized方法底层原理"></a>4.3 字节码层级-synchronized方法底层原理</h3><p>方法级的同步是隐式，即无需通过字节码指令来控制的，它实现在方法调用和返回操作之中。</p><p>JVM可以从方法常量池中的方法表结构(method_info Structure) 中的<code>ACC_SYNCHRONIZED</code>访问标志区分一个方法是否同步方法。</p><p>当方法调用时，调用指令将会 检查方法的<code>ACC_SYNCHRONIZED</code>访问标志是否被设置，如果设置了，执行线程将先持有monitor（虚拟机规范中用的是管程一词）， 然后再执行方法，最后再方法完成(无论是正常完成还是非正常完成)时释放monitor。</p><p>在方法执行期间，执行线程持有了monitor，其他任何线程都无法再获得同一个monitor。如果一个同步方法执行期间抛 出了异常，并且在方法内部无法处理此异常，那这个同步方法所持有的monitor将在异常抛到同步方法之外时自动释放。</p><p>下面我们看看字节码层面如何实现：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SyncMethod</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">syncTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           i<span class="token operator">++</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用javap反编译后的字节码如下：</p><pre class=" language-java"><code class="language-java"> Last modified <span class="token number">2017</span><span class="token operator">-</span><span class="token number">6</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span> size <span class="token number">308</span> bytes  MD5 checksum f34075a8c059ea65e4cc2fa610e0cd94  Compiled from <span class="token string">"SyncMethod.java"</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">com<span class="token punctuation">.</span>zejian<span class="token punctuation">.</span>concurrencys<span class="token punctuation">.</span>SyncMethod</span>  minor version<span class="token operator">:</span> <span class="token number">0</span>  major version<span class="token operator">:</span> <span class="token number">52</span>  flags<span class="token operator">:</span> ACC_PUBLIC<span class="token punctuation">,</span> ACC_SUPERConstant pool<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//省略没必要的字节码</span>  <span class="token comment" spellcheck="true">//==================syncTask方法======================</span>  <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">syncTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    descriptor<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>V    <span class="token comment" spellcheck="true">//方法标识ACC_PUBLIC代表public修饰，ACC_SYNCHRONIZED指明该方法为同步方法</span>    flags<span class="token operator">:</span> ACC_PUBLIC<span class="token punctuation">,</span> ACC_SYNCHRONIZED    Code<span class="token operator">:</span>      stack<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">1</span>         <span class="token number">0</span><span class="token operator">:</span> aload_0         <span class="token number">1</span><span class="token operator">:</span> dup         <span class="token number">2</span><span class="token operator">:</span> getfield      #<span class="token number">2</span>                  <span class="token comment" spellcheck="true">// Field i:I</span>         <span class="token number">5</span><span class="token operator">:</span> iconst_1         <span class="token number">6</span><span class="token operator">:</span> iadd         <span class="token number">7</span><span class="token operator">:</span> putfield      #<span class="token number">2</span>                  <span class="token comment" spellcheck="true">// Field i:I</span>        <span class="token number">10</span><span class="token operator">:</span> <span class="token keyword">return</span>      LineNumberTable<span class="token operator">:</span>        line <span class="token number">12</span><span class="token operator">:</span> <span class="token number">0</span>        line <span class="token number">13</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">}</span>SourceFile<span class="token operator">:</span> <span class="token string">"SyncMethod.java"</span></code></pre><p>从字节码中可以看出，synchronized修饰的方法并没有monitorenter指令和monitorexit指令，取得代之的确实是``ACC_SYNCHRONIZED`标识，该标识指明了该方法是一个同步方法，JVM通过该ACC_SYNCHRONIZED访问标志来辨别一个方法是否声明为同步方法，从而执行相应的同步调用。</p><p>这便是synchronized锁在同步代码块和同步方法上实现的基本原理。</p><h2 id="5-Java虚拟机对synchronized的优化"><a href="#5-Java虚拟机对synchronized的优化" class="headerlink" title="5. Java虚拟机对synchronized的优化"></a>5. Java虚拟机对synchronized的优化</h2><p>在<code>Java早期版本</code>中，<code>synchronized属于重量级锁</code>，效率低下，因为监视器锁（monitor）是依赖于底层的操作系统的<code>Mutex Lock</code>来实现的，而操作系统实现线程之间的切换时需要从<code>用户态转换到内核态</code>，这个状态之间的转换需要相对比较长的时间，时间成本相对较高，这也是为什么早期的synchronized效率低的原因。庆幸的是在Java 6之后Java官方对从JVM层面对synchronized较大优化，所以现在的synchronized锁效率也优化得很不错了，Java 6之后，为了减少获得锁和释放锁所带来的性能消耗，引入了轻量级锁和偏向锁，接下来我们将简单了解一下Java官方在JVM层面对synchronized锁的优化。</p><h3 id="5-1-偏向锁"><a href="#5-1-偏向锁" class="headerlink" title="5.1 偏向锁"></a>5.1 偏向锁</h3><p>偏向锁是Java 6之后加入的新锁，它是一种针对加锁操作的优化手段，经过研究发现，在大多数情况下，锁不仅不存在多线程竞争，而且总是由同一线程多次获得，因此为了减少同一线程获取锁(会涉及到一些CAS操作,耗时)的代价而引入偏向锁。</p><p>偏向锁的核心思想是，如果一个线程获得了锁，那么锁就进入偏向模式，此时Mark Word 的结构也变为偏向锁结构，当这个线程再次请求锁时，无需再做任何同步操作，即获取锁的过程，这样就省去了大量有关锁申请的操作，从而也就提供程序的性能。所以，对于没有锁竞争的场合，偏向锁有很好的优化效果，毕竟极有可能连续多次是同一个线程申请相同的锁。</p><p>但是对于锁竞争比较激烈的场合，偏向锁就失效了，因为这样场合极有可能每次申请锁的线程都是不相同的，因此这种场合下不应该使用偏向锁，否则会得不偿失，需要注意的是，偏向锁失败后，并不会立即膨胀为重量级锁，而是先升级为轻量级锁。</p><h3 id="5-2-轻量级锁"><a href="#5-2-轻量级锁" class="headerlink" title="5.2 轻量级锁"></a>5.2 轻量级锁</h3><p>倘若偏向锁失败，虚拟机并不会立即升级为重量级锁，它还会尝试使用一种称为轻量级锁的优化手段(1.6之后加入的)，此时Mark Word 的结构也变为轻量级锁的结构。</p><p>轻量级锁能够提升程序性能的依据是“对绝大部分的锁，在整个同步周期内都不存在竞争”，<code>注意这是经验数据</code>。需要了解的是，轻量级锁所适应的场景是线程交替执行同步块的场合，如果存在同一时间访问同一锁的场合，就会导致轻量级锁膨胀为重量级锁。</p><h3 id="5-3-自旋锁"><a href="#5-3-自旋锁" class="headerlink" title="5.3 自旋锁"></a>5.3 自旋锁</h3><p>轻量级锁失败后，虚拟机为了避免线程真实地在操作系统层面挂起，还会进行一项称为<code>自旋锁</code>的优化手段。</p><p>这是基于在大多数情况下，线程持有锁的时间都不会太长，如果直接挂起操作系统层面的线程可能会得不偿失，毕竟操作系统实现线程之间的切换时需要从用户态转换到核心态，这个状态之间的转换需要相对比较长的时间，时间成本相对较高，因此自旋锁会假设在不久将来，当前的线程可以获得锁，因此虚拟机会让当前想要获取锁的线程做几个空循环(这也是称为自旋的原因)，一般不会太久，可能是50个循环或100循环，在经过若干次循环后，如果得到锁，就顺利进入临界区。如果还不能获得锁，那就会将线程在操作系统层面挂起，这就是自旋锁的优化方式，这种方式确实也是可以提升效率的。最后没办法也就只能升级为重量级锁了。</p><h3 id="5-4-锁消除"><a href="#5-4-锁消除" class="headerlink" title="5.4 锁消除"></a>5.4 锁消除</h3><p>消除锁是虚拟机另外一种锁的优化，这种优化更彻底，Java虚拟机在JIT编译时(可以简单理解为当某段代码即将第一次被执行时进行编译，又称即时编译)，通过对运行上下文的扫描，去除不可能存在共享资源竞争的锁，通过这种方式消除没有必要的锁，可以节省毫无意义的请求锁时间，如下StringBuffer的append是一个同步方法，但是在add方法中的StringBuffer属于一个局部变量，并且不会被其他线程所使用，因此StringBuffer不可能存在共享资源竞争的情景，JVM会自动将其锁消除。</p><h3 id="5-5-锁升级过程"><a href="#5-5-锁升级过程" class="headerlink" title="5.5 锁升级过程"></a>5.5 锁升级过程</h3><p><img src="./images/loading.gif" data-original="../images/posts/Java-synchronized/image-20200602084623471.png" alt="image-20200602084623471"></p><p><code>new → 偏向锁 → 轻量级锁 （无锁, 自旋锁，自适应自旋）→ 重量级锁</code></p><p>synchronized优化的过程和markword息息相关</p><p>用markword中最低的三位代表锁状态 其中1位是偏向锁位 两位是普通锁位用markword中最低的三位代表锁状态 </p><p>其中1位是偏向锁位 两位是普通锁位</p><ol><li><p>Object o = new Object()<br>锁 = 0 01 无锁态<br>注意：如果偏向锁打开，默认是匿名偏向状态</p></li><li><p>o.hashCode()<br>001 + hashcode</p><pre class=" language-java"><code class="language-java"><span class="token number">00000001</span> <span class="token number">10101101</span> <span class="token number">00110100</span> <span class="token number">00110110</span><span class="token number">01011001</span> <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span></code></pre><p>little endian big endian </p><p>00000000 00000000 00000000 01011001 00110110 00110100 10101101 00000000</p></li><li><p>默认synchronized(o)<br>00 -&gt; 轻量级锁<br>默认情况 偏向锁有个时延，默认是4秒<br>why? 因为JVM虚拟机自己有一些默认启动的线程，里面有好多sync代码，这些sync代码启动时就知道肯定会有竞争，如果使用偏向锁，就会造成偏向锁不断的进行锁撤销和锁升级的操作，效率较低。</p><pre class=" language-shell"><code class="language-shell">-XX:BiasedLockingStartupDelay=0</code></pre></li><li><p>如果设定上述参数<br>new Object () - &gt; 101 偏向锁 -&gt;线程ID为0 -&gt; Anonymous BiasedLock<br>打开偏向锁，new出来的对象，默认就是一个可偏向匿名对象101</p></li><li><p>如果有线程上锁<br>上偏向锁，指的就是，把markword的线程ID改为自己线程ID的过程<br>偏向锁不可重偏向 批量偏向 批量撤销</p></li><li><p>如果有线程竞争<br>撤销偏向锁，升级轻量级锁<br>线程在自己的线程栈生成LockRecord ，用CAS操作将markword设置为指向自己这个线程的LR的指针，设置成功者得到锁</p></li><li><p>如果竞争加剧<br>竞争加剧：有线程超过10次自旋， -XX:PreBlockSpin， 或者自旋线程数超过CPU核数的一半， 1.6之后，加入自适应自旋 Adapative Self Spinning ， JVM自己控制<br>升级重量级锁：-&gt; 向操作系统申请资源，linux mutex , CPU从3级-0级系统调用，线程挂起，进入等待队列，等待操作系统的调度，然后再映射回用户空间</p></li></ol><p>偏向锁默认是打开的，但是有一个时延，如果要观察到偏向锁，应该设定参数</p><p><strong>为什么有自旋锁还需要重量级锁？ 自旋锁什么时候升级为重量级锁？</strong></p><blockquote><p>自旋是消耗CPU资源的，如果锁的时间长，或者自旋线程多，CPU会被大量消耗</p><p>重量级锁有等待队列，所有拿不到锁的进入等待队列，不需要消耗CPU资源</p></blockquote><p><strong>偏向锁是否一定比自旋锁效率高？</strong></p><blockquote><p>不一定，在明确知道会有多线程竞争的情况下，偏向锁肯定会涉及锁撤销，这时候直接使用自旋锁</p><p>JVM启动过程，会有很多线程竞争（明确），所以默认情况启动时不打开偏向锁，过一段儿时间再打开</p></blockquote><h2 id="6-关于synchronized-可能需要了解的关键点"><a href="#6-关于synchronized-可能需要了解的关键点" class="headerlink" title="6 关于synchronized 可能需要了解的关键点"></a>6 关于synchronized 可能需要了解的关键点</h2><h3 id="6-1-synchronized的可重入性"><a href="#6-1-synchronized的可重入性" class="headerlink" title="6.1 synchronized的可重入性"></a>6.1 synchronized的可重入性</h3><p>从互斥锁的设计上来说，当一个线程试图操作一个由其他线程持有的对象锁的临界资源时，将会处于阻塞状态，但当一个线程再次请求自己持有对象锁的临界资源时，这种情况属于重入锁，请求将会成功，在java中synchronized是基于原子性的内部锁机制，是可重入的，因此在一个线程调用synchronized方法的同时在其方法体内部调用该对象另一个synchronized方法，也就是说一个线程得到一个对象锁后再次请求该对象锁，是允许的，这就是synchronized的可重入性。如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountingSync</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> AccountingSync instance<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">AccountingSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">1000000</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//this,当前实例对象锁</span>            <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token function">increase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//synchronized的可重入性</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">increase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        j<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        Thread t1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>正如代码所演示的，在获取当前实例对象锁后进入synchronized代码块执行同步代码，并在代码块中调用了当前实例对象的另外一个synchronized方法，再次请求当前实例锁时，将被允许，进而执行方法体代码，这就是重入锁最直接的体现，需要特别注意另外一种情况，当子类继承父类时，子类也是可以通过可重入锁调用父类的同步方法。注意由于synchronized是基于monitor实现的，因此每次重入，monitor中的计数器仍会加1。</p><h3 id="6-2-线程中断与synchronized"><a href="#6-2-线程中断与synchronized" class="headerlink" title="6.2 线程中断与synchronized"></a>6.2 线程中断与synchronized</h3><h4 id="6-2-1线程中断"><a href="#6-2-1线程中断" class="headerlink" title="6.2.1线程中断"></a>6.2.1线程中断</h4><p>正如中断二字所表达的意义，在线程运行(run方法)中间打断它，在Java中，提供了以下3个有关线程中断的方法</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//中断线程（实例方法）</span><span class="token keyword">public</span> <span class="token keyword">void</span> Thread<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//判断线程是否被中断（实例方法）</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> Thread<span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//判断是否被中断并清除当前中断状态（静态方法）</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> Thread<span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>当一个线程处于被阻塞状态或者试图执行一个阻塞操作时，使用<code>Thread.interrupt()</code>方式中断该线程，注意此时将会抛出一个InterruptedException的异常，同时中断状态将会被复位(由中断状态改为非中断状态)，如下代码将演示该过程：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InterruputSleepThread3</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//while在try中，通过异常中断就可以退出run循环</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//当前线程处于阻塞状态，异常必须捕捉处理，无法往外抛出</span>                        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Interruted When Sleep"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">boolean</span> interrupt <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//中断状态被复位</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"interrupt:"</span><span class="token operator">+</span>interrupt<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//中断处于阻塞状态的线程</span>        t1<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 输出结果:           Interruted When Sleep           interrupt:false         */</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>如上述代码所示，我们创建一个线程，并在线程中调用了sleep方法从而使用线程进入阻塞状态，启动线程后，调用线程实例对象的interrupt方法中断阻塞异常，并抛出InterruptedException异常，此时中断状态也将被复位。这里有些人可能会诧异，为什么不用Thread.sleep(2000);而是用TimeUnit.SECONDS.sleep(2);其实原因很简单，前者使用时并没有明确的单位说明，而后者非常明确表达秒的单位，事实上后者的内部实现最终还是调用了Thread.sleep(2000);，但为了编写的代码语义更清晰，建议使用TimeUnit.SECONDS.sleep(2);的方式，注意TimeUnit是个枚举类型。ok~，除了阻塞中断的情景，我们还可能会遇到处于运行期且非阻塞的状态的线程，这种情况下，直接调用Thread.interrupt()中断线程是不会得到任响应的，如下代码，将无法中断非阻塞状态下的线程：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InterruputThread</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        Thread t1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"未被中断"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 输出结果(无限执行):             未被中断             未被中断             未被中断             ......         */</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>虽然我们调用了interrupt方法，但线程t1并未被中断，因为处于非阻塞状态的线程需要我们手动进行中断检测并结束程序，改进后代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InterruputThread</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        Thread t1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//判断当前线程是否被中断</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程中断"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"已跳出循环,线程中断!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 输出结果:            线程中断            已跳出循环,线程中断!         */</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>是的，我们在代码中使用了实例方法isInterrupted判断线程是否已被中断，如果被中断将跳出循环以此结束线程,注意非阻塞状态调用interrupt()并不会导致中断状态重置。综合所述，可以简单总结一下中断两种情况，一种是当线程处于阻塞状态或者试图执行一个阻塞操作时，我们可以使用实例方法interrupt()进行线程中断，执行中断操作后将会抛出interruptException异常(该异常必须捕捉无法向外抛出)并将中断状态复位，另外一种是当线程处于运行状态时，我们也可调用实例方法interrupt()进行线程中断，但同时必须手动判断中断状态，并编写中断线程的代码(其实就是结束run方法体的代码)。有时我们在编码时可能需要兼顾以上两种情况，那么就可以如下编写：</p><pre><code>public void run(){    try {    //判断当前线程是否已中断,注意interrupted方法是静态的,执行后会对中断状态进行复位    while (!Thread.interrupted()) {        TimeUnit.SECONDS.sleep(2);    }    } catch (InterruptedException e) {    }}</code></pre><h4 id="6-2-2-中断与synchronized"><a href="#6-2-2-中断与synchronized" class="headerlink" title="6.2.2 中断与synchronized"></a>6.2.2 中断与synchronized</h4><p>事实上线程的中断操作对于正在等待获取的锁对象的synchronized方法或者代码块并不起作用，也就是对于synchronized来说，如果一个线程在等待锁，那么结果只有两种，要么它获得这把锁继续执行，要么它就保存等待，即使调用中断线程的方法，也不会生效。演示代码如下</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by zejian on 2017/6/2. * Blog : http://blog.csdn.net/javazejian [原文地址,请尊重原创] */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedBlocked</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Trying to call f()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Never releases lock</span>            Thread<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 在构造器中创建新线程并启动获取对象锁     */</span>    <span class="token keyword">public</span> <span class="token function">SynchronizedBlocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//该线程已持有当前实例锁</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Lock acquired by this thread</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//中断判断</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"中断线程!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        SynchronizedBlocked sync <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynchronizedBlocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>sync<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//启动后调用f()方法,无法获取当前实例锁处于等待状态</span>        t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//中断线程,无法生效</span>        t<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我们在SynchronizedBlocked构造函数中创建一个新线程并启动获取调用f()获取到当前实例锁，由于SynchronizedBlocked自身也是线程，启动后在其run方法中也调用了f()，但由于对象锁被其他线程占用，导致t线程只能等到锁，此时我们调用了t.interrupt();但并不能中断线程。</p><h3 id="6-3-等待唤醒机制与synchronized"><a href="#6-3-等待唤醒机制与synchronized" class="headerlink" title="6.3 等待唤醒机制与synchronized"></a>6.3 等待唤醒机制与synchronized</h3><p>所谓等待唤醒机制本篇主要指的是notify/notifyAll和wait方法，在使用这3个方法时，必须处于synchronized代码块或者synchronized方法中，否则就会抛出IllegalMonitorStateException异常，这是因为调用这几个方法前必须拿到当前对象的监视器monitor对象，也就是说notify/notifyAll和wait方法依赖于monitor对象，在前面的分析中，我们知道monitor 存在于对象头的Mark Word 中(存储monitor引用指针)，而synchronized关键字可以获取 monitor ，这也就是为什么notify/notifyAll和wait方法必须在synchronized代码块或者synchronized方法调用的原因。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>       obj<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       obj<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       obj<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span></code></pre><p>需要特别理解的一点是，与sleep方法不同的是wait方法调用完成后，线程将被暂停，但wait方法将会释放当前持有的监视器锁(monitor)，直到有线程调用notify/notifyAll方法后方能继续执行，而sleep方法只让线程休眠并不释放锁。同时notify/notifyAll方法调用后，并不会马上释放监视器锁，而是在相应的synchronized(){}/synchronized方法执行结束后才自动释放锁。</p><hr><p>原文链接：<a href="https://blog.csdn.net/javazejian/article/details/72828483" target="_blank" rel="noopener">https://blog.csdn.net/javazejian/article/details/72828483</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> synchronized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> synchronized </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ObjectMapper工具API</title>
      <link href="/undefined/fcf2.html"/>
      <url>/undefined/fcf2.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>在了解ObjectMapper之前,我们先要了解下什么是JSON.</p><p>JSON(JavaScript Object Notation) 是一种轻量级的基于文本的数据交换格式。它采用完全独立于语言的文本格式，易于读写同时也易于机器解析和生成(网络传输速率)，因此使JSON成为理想的数据交换语言。</p><p>Java中的三种JSON库：<code>Jackson、Gson、Fastjson</code>. 其中Jackson旧称为：<strong>Java(或JVM平台)\</strong>的标准JSON库，或者是Java的*<em>最佳JSON解析器*</em>，或者简称为“<strong>Java的JSON</strong>”. </p><p>Jackson是一个简单的、功能强大的、基于Java的应用库。它可以很方便完成Java对象和json对象(xml文档or其它格式）进行互转。Jackson社区相对比较活跃，更新速度也比较快。Jackson库有如下几大特性：</p><ul><li>高性能且稳定：低内存占用，对大/小JSON串，大/小对象的解析表现均很优秀</li><li>流行度高：是很多流行框架的默认选择</li><li>容易使用：提供高层次的API，极大简化了日常使用案例</li><li>无需自己手动创建映射：内置了绝大部分序列化时和Java类型的映射关系</li><li>干净的JSON：创建的JSON具有干净、紧凑、体积小等特点</li><li>无三方依赖：仅依赖于JDK</li><li>Spring生态加持：jackson是Spring家族的默认JSON/XML解析器</li></ul></blockquote><h2 id="1-ObjectMapper工具API介绍"><a href="#1-ObjectMapper工具API介绍" class="headerlink" title="1. ObjectMapper工具API介绍"></a>1. ObjectMapper工具API介绍</h2><p>ObjectMapper是Jackson三大核心模块(<strong>core module</strong>)中的数据绑定模块(com.fasterxml.<strong>jackson</strong>.databind)包下的程序,  可以从 String，File，InputStream，URL，自定义的 Java 类中读取 JSON，ObjectMapper 中的重载方法 readValue() 实现了这些功能。</p><h2 id="2-ObjectMapper入门"><a href="#2-ObjectMapper入门" class="headerlink" title="2.ObjectMapper入门"></a>2.ObjectMapper入门</h2><ol><li>POJO与JSON之间的互相转化</li></ol><p>POJO类代码如下:</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EqualsAndHashCode</span><span class="token punctuation">(</span>callSuper <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>chain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@TableName</span><span class="token punctuation">(</span><span class="token string">"tb_item_desc"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ItemDesc</span> <span class="token keyword">extends</span> <span class="token class-name">BasePojo</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@TableId</span>    <span class="token comment" spellcheck="true">//只设定主键,不能自增</span>    <span class="token keyword">private</span> Long itemId<span class="token punctuation">;</span>    <span class="token keyword">private</span> String itemDesc<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>这里用private修饰属性, 使用lombok提供getters/setters.</p></blockquote><p>互相转化具体实现如下:</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> JsonProcessingException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//提供一个测试对象</span>    ItemDesc itemDesc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ItemDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    itemDesc<span class="token punctuation">.</span><span class="token function">setItemId</span><span class="token punctuation">(</span>100L<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">setItemDesc</span><span class="token punctuation">(</span><span class="token string">"测试数据"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">setCreated</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">setUpdated</span><span class="token punctuation">(</span>itemDesc<span class="token punctuation">.</span><span class="token function">getCreated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//使用databind，我们需要一个最基础的对象com.fasterxml.jackson.databind.ObjectMapper</span>    ObjectMapper objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//1.对象转化为JSON</span>    String json <span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>itemDesc<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//测试结果:</span>    <span class="token comment" spellcheck="true">//{"created":1590854279701,"updated":1590854279701,"itemId":100,"itemDesc":"测试数据"}</span>    <span class="token comment" spellcheck="true">//2.JSON转化为对象</span>    ItemDesc itemDesc2 <span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span>ItemDesc<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>itemDesc2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> itemDesc2<span class="token punctuation">.</span><span class="token function">getCreated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//测试结果:</span>    <span class="token comment" spellcheck="true">//ItemDesc(itemId=100, itemDesc=测试数据):Sat May 30 23:57:59 CST 2020</span><span class="token punctuation">}</span></code></pre><ol start="2"><li>list集合转化</li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> JsonProcessingException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//提供测试数据</span>    ItemDesc itemDesc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ItemDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    itemDesc<span class="token punctuation">.</span><span class="token function">setItemId</span><span class="token punctuation">(</span>100L<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">setItemDesc</span><span class="token punctuation">(</span><span class="token string">"测试数据"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">setCreated</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">setUpdated</span><span class="token punctuation">(</span>itemDesc<span class="token punctuation">.</span><span class="token function">getCreated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ItemDesc itemDesc2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ItemDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    itemDesc<span class="token punctuation">.</span><span class="token function">setItemId</span><span class="token punctuation">(</span>100L<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">setItemDesc</span><span class="token punctuation">(</span><span class="token string">"测试数据"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">setCreated</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">setUpdated</span><span class="token punctuation">(</span>itemDesc<span class="token punctuation">.</span><span class="token function">getCreated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//提供集合</span>    List<span class="token operator">&lt;</span>ItemDesc<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>itemDesc<span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>itemDesc2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//1.list转化为JSON</span>    String json <span class="token operator">=</span> OBJECTMAPPER<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//测试结果</span>    <span class="token comment" spellcheck="true">//[{"created":1590854579886,"updated":1590854579886,"itemId":100,"itemDesc":"测试数据"},{"created":1590854579886,"updated":1590854579886,"itemId":101,"itemDesc":"测试数据2"}]</span>    <span class="token comment" spellcheck="true">//2.json转化为list</span>    List<span class="token operator">&lt;</span>ItemDesc<span class="token operator">></span> list2 <span class="token operator">=</span> OBJECTMAPPER<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span>list<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//测试结果</span>    <span class="token comment" spellcheck="true">//[{created=1590854579886, updated=1590854579886, itemId=100, itemDesc=测试数据},                {created=1590854579886, updated=1590854579886, itemId=101, itemDesc=测试数据2}]</span></code></pre><h2 id="3-JSON转化的原理"><a href="#3-JSON转化的原理" class="headerlink" title="3. JSON转化的原理"></a>3. JSON转化的原理</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * 原理说明:     *     1.对象转化JSON时,其实调用的是对象身上的getXXXX()方法.     *     获取所有的getLyj()方法-----之后去掉get-----首字母小写---lyj属性.     *  json串中的key就是该属性.value就是属性的值.  lyj:"xxxxx"     *       *  2.JSON转化为对象原理说明     *  1).定义转化对象的类型(ItemDesc.class)     *  2).利用反射机制实例化对象  class.forName(class)   现在的属性都为null     *  3).将json串解析     *                object key:value     *                array  value1,value2     *  4).根据json串中的属性的itemId,之后调用对象的(set+首字母大写)setItemId方法实现赋值     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> JsonProcessingException <span class="token punctuation">{</span>        ItemDesc itemDesc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ItemDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        itemDesc<span class="token punctuation">.</span><span class="token function">setItemId</span><span class="token punctuation">(</span>100L<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setItemDesc</span><span class="token punctuation">(</span><span class="token string">"测试数据"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setCreated</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setUpdated</span><span class="token punctuation">(</span>itemDesc<span class="token punctuation">.</span><span class="token function">getCreated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//思考:对象转化为JSON时,底层实现如何.</span>        String json <span class="token operator">=</span> OBJECTMAPPER<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>itemDesc<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//{id:1,name:"xxxx"}</span>        OBJECTMAPPER<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span>ItemDesc<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="4-封装ObjectMapperUtil"><a href="#4-封装ObjectMapperUtil" class="headerlink" title="4. 封装ObjectMapperUtil"></a>4. 封装ObjectMapperUtil</h2><p>:该方法的主要的作用 就是将对象与json实现灵活的转化,并且内部优化了异常. 为了通用,将ObjectMapperUtil写入common中.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ObjectMapperUtil</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1.定义mapper对象</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span>  ObjectMapper MAPPER <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//该类被调用1次   则对象被创建1次</span>    <span class="token comment" spellcheck="true">//static 属性属于类的  无论调用多少次  对象1个   类.OBJECTmAPPER=修改的对象</span>    <span class="token comment" spellcheck="true">//static final 为了安全  不允许别人修改</span>    <span class="token comment" spellcheck="true">//2.将对象转化为JSON</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">toJSON</span><span class="token punctuation">(</span>Object target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> MAPPER<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JsonProcessingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//检查异常转化为运行时异常</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//3.将JSON串转化为对象   用户传递什么类型,就能返回什么对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">toObj</span><span class="token punctuation">(</span>String json<span class="token punctuation">,</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> MAPPER<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JsonProcessingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> API </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ObjectMapper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 7安装Docker</title>
      <link href="/undefined/674f.html"/>
      <url>/undefined/674f.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h3><p>Docker 使用越来越多，安装也很简单，本次记录一下基本的步骤。</p><p>Docker 目前支持 CentOS 7 及以后的版本，内核要求至少为 3.10。</p><p>Docker 官网有安装步骤，本文只是记录一下，您也可以参考 <a href="https://docs.docker.com/install/linux/docker-ce/centos/" target="_blank" rel="noopener">Get Docker CE for CentOS</a></p><h3 id="2-环境说明"><a href="#2-环境说明" class="headerlink" title="2. 环境说明"></a>2. 环境说明</h3><p>RedHat 7.6 (Minimal Install)</p><pre class=" language-shell"><code class="language-shell">[root@localhost ~]# cat /etc/redhat-release CentOS Linux release 7.7.1908 (Core)</code></pre><h3 id="3-准备工作"><a href="#3-准备工作" class="headerlink" title="3. 准备工作"></a>3. 准备工作</h3><ol><li>操作系统要求</li></ol><p>CentOS 7 以后都可以安装 Docker 了，也可以确认一下。</p><pre class=" language-shell"><code class="language-shell">[root@localhost ~]# uname -aLinux localhost.localdomain 3.10.0-1062.18.1.el7.x86_64 #1 SMP Tue Mar 17 23:49:17 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux</code></pre><p>Docker 需要用到 <code>centos-extra</code> 这个源，如果关闭了，需要重启启用，可以参考 <a href="https://wiki.centos.org/AdditionalResources/Repositories" target="_blank" rel="noopener">Available Repositories for CentOS</a>。</p><p>官方软件源默认启用了最新的软件，您可以通过编辑软件源的方式获取各个版本的软件包。例如官方并没有将测试版本的软件源置为可用，你可以通过以下方式开启。同理可以开启各种测试版本等。</p><pre class=" language-shell"><code class="language-shell">vim /etc/yum.repos.d/docker-ce.repo</code></pre><p> 将 [docker-ce-test] 下方的 enabled=0 修改为 enabled=1</p><ol start="2"><li>卸载旧版本的Docker</li></ol><p>旧版本的 Docker 被叫做 <code>docker</code> 或 <code>docker-engine</code>，如果安装了旧版本的 Docker ，您需要卸载掉它。</p><p>我的系统上没有安装,所以结果下</p><pre class=" language-shell"><code class="language-shell">[root@localhost ~]# yum remove docker \> docker-client \> docker-client-latest \> docker-common \> docker-latest \> docker-latest-logrotate \> docker-logrotate \> docker-engine已加载插件：fastestmirror参数 docker 没有匹配参数 docker-client 没有匹配参数 docker-client-latest 没有匹配参数 docker-common 没有匹配参数 docker-latest 没有匹配参数 docker-latest-logrotate 没有匹配参数 docker-logrotate 没有匹配参数 docker-engine 没有匹配不删除任何软件包</code></pre><p>旧版本的内容在 <code>/var/lib/docker</code> 下，目录中的镜像(images), 容器(containers), 存储卷(volumes), 和 网络配置（networks）都可以保留。</p><p>Docker CE 包，目前的包名为 <code>docker-ce</code>。</p><h3 id="4-安装Docker-CE"><a href="#4-安装Docker-CE" class="headerlink" title="4. 安装Docker-CE:"></a>4. 安装Docker-CE:</h3><ol><li>安装准备</li></ol><p>为了方便添加软件源，支持 device-mapper 存储类型，安装如下软件包</p><pre class=" language-shell"><code class="language-shell">[root@localhost ~]# sudo yum update[root@localhost ~]# sudo yum install -y yum-utils device-mapper-persistent-data lvm2</code></pre><ol start="2"><li>添加 yum 软件源</li></ol><p>添加 Docker 稳定版本的 yum 软件源</p><pre class=" language-shell"><code class="language-shell"># 官方源yum-config-manager --add-repo  https://download.docker.com/linux/centos/docker-ce.repo# 阿里云源sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</code></pre><ol start="3"><li>安装</li></ol><p>更新一下 yum 软件源的缓存，并安装 Docker,下载慢的话可以尝试使用下面阿里云Docker CE 镜像源站安装</p><pre class=" language-shell"><code class="language-shell">[root@localhost ~]# sudo yum update[root@localhost ~]# sudo yum -y install docker-ce</code></pre><p>如果弹出 GPG key 的接收提示，请确认是否为 <code>060a 61c5 1b55 8a7f 742b 77aa c52f eb6b 621e 9f35</code>，如果是，可以接受并继续安装。</p><p>至此，Docker 已经安装完成了，Docker 服务是没有启动的，操作系统里的 docker 组被创建，但是没有用户在这个组里。</p><blockquote><p><strong><code>注意</code></strong></p><p>默认的 docker 组是没有用户的（也就是说需要使用 sudo 才能使用 docker 命令）。<br>您可以将用户添加到 docker 组中（此用户就可以直接使用 docker 命令了）。</p></blockquote><p>加入 docker 用户组命令</p><pre class=" language-shell"><code class="language-shell">sudo usermod -aG docker USER_NAME</code></pre><p>用户更新组信息后，重新登录系统即可生效。</p><h3 id="5-安装指定版本Docker-CE"><a href="#5-安装指定版本Docker-CE" class="headerlink" title="5. 安装指定版本Docker-CE:"></a>5. 安装指定版本Docker-CE:</h3><ol><li>查找Docker-CE的版本:</li></ol><pre class=" language-shell"><code class="language-shell">yum list docker-ce.x86_64 --showduplicates | sort -r  Loading mirror speeds from cached hostfile  Loaded plugins: branch, fastestmirror, langpacks  docker-ce.x86_64            17.03.1.ce-1.el7.centos            docker-ce-stable  docker-ce.x86_64            17.03.1.ce-1.el7.centos            @docker-ce-stable  docker-ce.x86_64            17.03.0.ce-1.el7.centos            docker-ce-stable  Available Packages</code></pre><ol start="2"><li>安装指定版本的Docker-CE: (VERSION 例如上面的 17.03.0.ce.1-1.el7.centos)</li></ol><pre class=" language-shell"><code class="language-shell">sudo yum -y install docker-ce-[VERSION]</code></pre><blockquote><p>注意：在某些版本之后，docker-ce安装出现了其他依赖包，如果安装失败的话请关注错误信息。例如 docker-ce 17.03 之后，需要先安装 docker-ce-selinux。</p><pre><code>yum list docker-ce-selinux- --showduplicates | sort -rsudo yum -y install docker-ce-selinux-[VERSION]</code></pre></blockquote><ol start="3"><li>通过经典网络、VPC网络内网安装时，用以下命令替换Step 2中的命令</li></ol><ul><li>经典网络：sudo yum-config-manager –add-repo <a href="http://mirrors.aliyuncs.com/doer-ce/linux/centos/docker-ce.repo" target="_blank" rel="noopener">http://mirrors.aliyuncs.com/doer-ce/linux/centos/docker-ce.repo</a></li><li>VPC网络：sudo yum-config-manager –add-repo <a href="http://mirrors.could.aliyuncs.com/docker-ce/linux/centos/docker-ce.repo" target="_blank" rel="noopener">http://mirrors.could.aliyuncs.com/docker-ce/linux/centos/docker-ce.repo</a></li></ul><h3 id="6-启动Docker"><a href="#6-启动Docker" class="headerlink" title="6. 启动Docker"></a>6. 启动Docker</h3><p>启动 docker 服务</p><pre class=" language-shell"><code class="language-shell">sudo systemctl start docker</code></pre><p>添加到开机启动</p><pre class=" language-shell"><code class="language-shell">sudo systemctl enable docker</code></pre><h3 id="7-安装校验"><a href="#7-安装校验" class="headerlink" title="7. 安装校验"></a>7. 安装校验</h3><pre class=" language-shell"><code class="language-shell">[root@localhost ~]# docker versionClient: Version:      17.03.0-ce API version:  1.26 Go version:   go1.7.5 Git commit:   3a232c8 Built:        Tue Feb 28 07:52:04 2017 OS/Arch:      linux/amd64Server: Version:      17.03.0-ce API version:  1.26 (minimum version 1.12) Go version:   go1.7.5 Git commit:   3a232c8 Built:        Tue Feb 28 07:52:04 2017 OS/Arch:      linux/amd64 Experimental: false</code></pre><p>运行 <code>hello-world</code> 镜像</p><pre class=" language-shell"><code class="language-shell">sudo docker run hello-world</code></pre><h3 id="8-更新和卸载"><a href="#8-更新和卸载" class="headerlink" title="8. 更新和卸载"></a>8. 更新和卸载</h3><p>使用 yum 管理，更新和卸载都很方便。</p><ol><li>更新Docker CE</li></ol><pre class=" language-shell"><code class="language-shell">sudo yum update docker-ce</code></pre><ol start="2"><li>卸载Docker CE</li></ol><pre class=" language-shell"><code class="language-shell">sudo yum remove docker-ce</code></pre><ol start="3"><li>删除本地文件</li></ol><p>注意，docker 的本地文件，包括镜像(images), 容器(containers), 存储卷(volumes)等，都需要手工删除。默认目录存储在 <code>/var/lib/docker</code>。</p><pre class=" language-shell"><code class="language-shell">sudo rm -rf /var/lib/docker</code></pre><h3 id="9-Docker拉取镜像慢解决方法"><a href="#9-Docker拉取镜像慢解决方法" class="headerlink" title="9. Docker拉取镜像慢解决方法"></a>9. Docker拉取镜像慢解决方法</h3><p>镜像加速<br>鉴于国内网络问题，后续拉取 Docker 镜像十分缓慢，我们可以需要配置加速器来解决，我使用的是网易的镜像地址：<a href="http://hub-mirror.c.163.com。" target="_blank" rel="noopener">http://hub-mirror.c.163.com。</a></p><p>新版的 Docker 使用 /etc/docker/daemon.conf（Linux） 或者 %programdata%\docker\config\daemon.json（Windows） 来配置 Daemon。</p><p>请在该配置文件中加入（没有该文件的话，请先建一个）：</p><p>{<br>    “registry-mirrors”: [“<a href="http://hub-mirror.c.163.com&quot;]">http://hub-mirror.c.163.com"]</a><br>}</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Software_Install </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis安装与用法</title>
      <link href="/undefined/d618.html"/>
      <url>/undefined/d618.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-在Redis官网下载软件包"><a href="#1-在Redis官网下载软件包" class="headerlink" title="1. 在Redis官网下载软件包"></a>1. 在Redis官网下载软件包</h2><p><a href="http://download.redis.io/releases/redis-5.0.4.tar.gz" target="_blank" rel="noopener">下载地址</a></p><p><img src="./images/loading.gif" data-original="../images/posts/SoftwareInstall-2020-05-27-CentsOS-Redis/image-20200527173143687.png" alt="Redis下载"></p><h2 id="2-上传文件到Linux"><a href="#2-上传文件到Linux" class="headerlink" title="2. 上传文件到Linux"></a>2. 上传文件到Linux</h2><p>使用lrzsz或者ftp上传</p><pre class=" language-shell"><code class="language-shell">[root@localhost src]# rz -Erz waiting to receive.[root@localhost src]# lsimages  jdk1.8  nginx-1.19.0  redis-6.0.3.tar.gz  tomcats# 检查防火墙状态是否关闭[root@localhost src]# firewall-cmd --state not running</code></pre><h2 id="3-解压Redis压缩包"><a href="#3-解压Redis压缩包" class="headerlink" title="3. 解压Redis压缩包"></a>3. 解压Redis压缩包</h2><pre class=" language-shell"><code class="language-shell"># 解压并删除tar.gz压缩包[root@localhost src]# tar -xvf redis-5.0.4.tar.gz[root@localhost src]# rm -f redis-5.0.4.tar.gz [root@localhost src]# lsimages  jdk1.8  nginx-1.19.0  redis-5.0.4  tomcats</code></pre><h2 id="4-安装Redis"><a href="#4-安装Redis" class="headerlink" title="4. 安装Redis"></a>4. 安装Redis</h2><ol><li>进入解压后的redis目录</li></ol><pre class=" language-shell"><code class="language-shell">[root@localhost src]# cd redis-5.0.4/[root@localhost redis-5.0.4]# ll总用量 252-rw-rw-r--.  1 root root 99445 3月  19 2019 00-RELEASENOTES-rw-rw-r--.  1 root root    53 3月  19 2019 BUGS-rw-rw-r--.  1 root root  1894 3月  19 2019 CONTRIBUTING-rw-rw-r--.  1 root root  1487 3月  19 2019 COPYINGdrwxrwxr-x.  6 root root   124 3月  19 2019 deps-rw-rw-r--.  1 root root    11 3月  19 2019 INSTALL-rw-rw-r--.  1 root root   151 3月  19 2019 Makefile-rw-rw-r--.  1 root root  4223 3月  19 2019 MANIFESTO-rw-rw-r--.  1 root root 20555 3月  19 2019 README.md-rw-rw-r--.  1 root root 62155 3月  19 2019 redis.conf-rwxrwxr-x.  1 root root   275 3月  19 2019 runtest-rwxrwxr-x.  1 root root   280 3月  19 2019 runtest-cluster-rwxrwxr-x.  1 root root   281 3月  19 2019 runtest-sentinel-rw-rw-r--.  1 root root  9710 3月  19 2019 sentinel.confdrwxrwxr-x.  3 root root  4096 3月  19 2019 srcdrwxrwxr-x. 10 root root   167 3月  19 2019 testsdrwxrwxr-x.  8 root root  4096 3月  19 2019 utils</code></pre><ol start="2"><li>编译redis</li></ol><pre class=" language-shell"><code class="language-shell">[root@localhost src]# makecd src && make allmake[1]: 进入目录“/usr/local/src/redis-5.0.4/src”    CC Makefile.depmake[1]: 离开目录“/usr/local/src/redis-5.0.4/src”make[1]: 进入目录“/usr/local/src/redis-5.0.4/src”...    LINK redis-server    INSTALL redis-sentinel    CC redis-cli.o    LINK redis-cli    CC redis-benchmark.o    LINK redis-benchmark    INSTALL redis-check-rdb    INSTALL redis-check-aofHint: It's a good idea to run 'make test' ;)make[1]: 离开目录“/usr/local/src/redis-5.0.4/src”</code></pre><ol start="3"><li>执行安装</li></ol><pre class=" language-shell"><code class="language-shell">[root@localhost redis-5.0.4]# make installcd src && make installmake[1]: 进入目录“/usr/local/src/redis-5.0.4/src”    CC Makefile.depmake[1]: 离开目录“/usr/local/src/redis-5.0.4/src”make[1]: 进入目录“/usr/local/src/redis-5.0.4/src”Hint: It's a good idea to run 'make test' ;)    INSTALL install    INSTALL install    INSTALL install    INSTALL install    INSTALL installmake[1]: 离开目录“/usr/local/src/redis-5.0.4/src”</code></pre><h2 id="5-修改Redis配置文件"><a href="#5-修改Redis配置文件" class="headerlink" title="5. 修改Redis配置文件"></a>5. 修改Redis配置文件</h2><ol start="2"><li>关闭IP绑定</li></ol><p>注释配置文件中的IP绑定</p><p>只有去除IP绑定,远程机才能进行访问</p><p><img src="./images/loading.gif" data-original="../images/posts/SoftwareInstall-2020-05-27-CentsOS-Redis/image-20200527174107387.png" alt="关闭IP绑定"></p><ol start="3"><li><p>关闭保护模式</p><p>protected-mode yes     yes—to—&gt;no</p></li></ol><p><img src="./images/loading.gif" data-original="../images/posts/SoftwareInstall-2020-05-27-CentsOS-Redis/image-20200527174220370.png" alt="关闭保护模式"></p><ol start="3"><li><p>开启后台启动</p><p>daemonize yes    no—to—&gt;yes    阻止启动redis后独占终端</p></li></ol><p><img src="./images/loading.gif" data-original="../images/posts/SoftwareInstall-2020-05-27-CentsOS-Redis/image-20200527174336486.png" alt="开启后台启动"></p><ol start="4"><li>Esc———-:wq———-保存退出</li></ol><h2 id="6-Reids命令"><a href="#6-Reids命令" class="headerlink" title="6. Reids命令"></a>6. Reids命令</h2><p>可以在官网查看Redis命令的使用<a href="https://redis.io/commands" target="_blank" rel="noopener">https://redis.io/commands</a></p><ol><li>启动Redis</li></ol><pre class=" language-shell"><code class="language-shell">[root@localhost redis-5.0.4]# redis-server redis.conf 9700:C 27 May 2020 17:47:09.537 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo9700:C 27 May 2020 17:47:09.537 # Redis version=5.0.4, bits=64, commit=00000000, modified=0, pid=9700, just started9700:C 27 May 2020 17:47:09.537 # Configuration loaded</code></pre><ol start="2"><li>检查Redis进程信息</li></ol><pre class=" language-shell"><code class="language-shell">[root@localhost redis-5.0.4]# ps -ef | grep redisroot       9701      1  0 17:47 ?        00:00:00 redis-server *:6379root       9708   1448  0 17:48 pts/0    00:00:00 grep --color=auto redis</code></pre><ol start="3"><li>关闭Redis</li></ol><pre class=" language-shell"><code class="language-shell">[root@localhost redis-5.0.4]# redis-cli -p 6379 shutdown</code></pre><ol start="4"><li>进入Redis客户端</li></ol><pre class=" language-shell"><code class="language-shell">[root@localhost redis-5.0.4]# redis-cli -p 6379127.0.0.1:6379> # 使用默认端口6379可以省略不写[root@localhost redis-5.0.4]# redis-cli</code></pre><ol start="5"><li>关闭客户端</li></ol><pre><code>Ctrl + C</code></pre><h3 id="6-1-String类型数据"><a href="#6-1-String类型数据" class="headerlink" title="6.1 String类型数据"></a>6.1 String类型数据</h3><table><thead><tr><th>命令</th><th>说明</th><th><strong>案例</strong></th></tr></thead><tbody><tr><td>set</td><td>添加key-value</td><td>set username admin</td></tr><tr><td>get</td><td>根据key获取数据</td><td>get username</td></tr><tr><td>strlen</td><td>根据key获取值的长度</td><td>strlen key</td></tr><tr><td>exists</td><td>判断key是否存在</td><td>exists name   返回1存在 0不存在</td></tr><tr><td>del</td><td>删除redis中的key</td><td>del key</td></tr><tr><td>Keys</td><td>用于查询符合条件的key</td><td>keys * 查询redis中全部的key  keys n?me 使用占位符获取数据  keys nam* 获取nam开头的数据</td></tr><tr><td>mset</td><td>赋值多个key-value</td><td>mset key1 value1 key2 value2 key3 value3</td></tr><tr><td>mget</td><td>获取多个key的值</td><td>mget key1 key2</td></tr><tr><td>append</td><td>对某个key的值进行追加</td><td>append key value</td></tr><tr><td>type</td><td>检查某个key的类型</td><td>type key</td></tr><tr><td>select</td><td>切换redis数据库</td><td>select 0-15 redis中共有16个数据库</td></tr><tr><td>flushdb</td><td>清空单个数据库</td><td>flushdb</td></tr><tr><td>flushall</td><td>清空全部数据库</td><td>flushall</td></tr><tr><td>incr</td><td>自动加1</td><td>incr key</td></tr><tr><td>decr</td><td>自动减1</td><td>decr key</td></tr><tr><td>incrby</td><td>指定数值添加</td><td>incrby 10</td></tr><tr><td>decrby</td><td>指定数值减</td><td>decrby 10</td></tr><tr><td>expire</td><td>指定key的生效时间 单位秒</td><td>expire key 20   key20秒后失效</td></tr><tr><td>pexpire</td><td>指定key的失效时间 单位毫秒</td><td>pexpire key 2000  key 2000毫秒后失效</td></tr><tr><td>ttl</td><td>检查key的剩余存活时间</td><td>ttl key -2数据不存在  -1该数据永不超时</td></tr><tr><td>persist</td><td>撤销key的失效时间</td><td>persist key</td></tr></tbody></table><h3 id="6-2-Hash类型"><a href="#6-2-Hash类型" class="headerlink" title="6.2 Hash类型"></a>6.2 Hash类型</h3><p>说明:可以用散列类型保存对象和属性值</p><p>例子:User对象{id:2,name:小明,age:19}</p><table><thead><tr><th>命令</th><th>说明</th><th><strong>案例</strong></th></tr></thead><tbody><tr><td>hset</td><td>为对象添加数据</td><td>hset key field value</td></tr><tr><td>hget</td><td>获取对象的属性值</td><td>hget key field</td></tr><tr><td>hexists</td><td>判断对象的属性是否存在</td><td>HEXISTS key field  1表示存在  0表示不存在</td></tr><tr><td>hdel</td><td>删除hash中的属性</td><td>hdel user field [field …]</td></tr><tr><td>hgetall</td><td>获取hash全部元素和值</td><td>HGETALL key</td></tr><tr><td>hkyes</td><td>获取hash中的所有字段</td><td>HKEYS  key</td></tr><tr><td>hlen</td><td>获取hash中所有属性的数量</td><td>hlen key</td></tr><tr><td>hmget</td><td>获取hash里面指定字段的值</td><td>hmget key field [field …]</td></tr><tr><td>hmset</td><td>为hash的多个字段设定值</td><td>hmset key  field value [field value …]</td></tr><tr><td>hsetnx</td><td>设置hash的一个字段,只有当这个字段不存在时有效</td><td>HSETNX key field value</td></tr><tr><td>hstrlen</td><td>获取hash中指定key的值的长度</td><td>HSTRLEN key field</td></tr><tr><td>hvals</td><td>获取hash的所有值</td><td>HVALS user</td></tr></tbody></table><h3 id="6-3-List类型"><a href="#6-3-List类型" class="headerlink" title="6.3 List类型"></a>6.3 List类型</h3><p>说明:Redis中的List集合是双端循环列表,分别可以从左右两个方向插入数据.</p><p>List集合可以当做队列使用,也可以当做栈使用</p><p>队列:存入数据的方向和获取数据的方向相反</p><p>栈:存入数据的方向和获取数据的方向相同</p><table><thead><tr><th>命令</th><th>说明</th><th><strong>案例</strong></th></tr></thead><tbody><tr><td>lpush</td><td>从队列的左边入队一个或多个元素</td><td>LPUSH key value [value …]</td></tr><tr><td>rpush</td><td>从队列的右边入队一个或多个元素</td><td>RPUSH key value [value …]</td></tr><tr><td>lpop</td><td>从队列的左端出队一个元素</td><td>LPOP key</td></tr><tr><td>rpop</td><td>从队列的右端出队一个元素</td><td>RPOP key</td></tr><tr><td>lpushx</td><td>当队列存在时从队列的左侧入队一个元素</td><td>LPUSHX key value</td></tr><tr><td>rpushx</td><td>当队列存在时从队列的右侧入队一个元素</td><td>RPUSHx key value</td></tr><tr><td>lrange</td><td>从列表中获取指定返回的元素</td><td>LRANGE key start stop   Lrange key 0 -1 获取全部队列的数据</td></tr><tr><td>lrem</td><td>从存于 key 的列表里移除前 count 次出现的值为 value 的元素。 这个 count 参数通过下面几种方式影响这个操作：  ·      count &gt; 0: 从头往尾移除值为 value 的元素。  ·      count &lt; 0: 从尾往头移除值为 value 的元素。  ·      count = 0: 移除所有值为 value 的元素。</td><td>LREM list -2  “hello” 会从存于 list 的列表里移除最后两个出现的 “hello”。  需要注意的是，如果list里没有存在key就会被当作空list处理，所以当 key 不存在的时候，这个命令会返回 0。</td></tr><tr><td>Lset</td><td>设置 index 位置的list元素的值为 value</td><td>LSET key index value</td></tr></tbody></table><h3 id="6-4-Redis事务命令"><a href="#6-4-Redis事务命令" class="headerlink" title="6.4 Redis事务命令"></a>6.4 Redis事务命令</h3><p>说明:redis中操作可以添加事务的支持.一项任务可以由多个redis命令完成,如果有一个命令失败导致入库失败时.需要实现事务回滚.</p><table><thead><tr><th>命令</th><th>说明</th><th><strong>案例</strong></th></tr></thead><tbody><tr><td>multi</td><td>标记一个事务开始</td><td>127.0.0.1:6379&gt; MULTI  OK</td></tr><tr><td>exec</td><td>执行所有multi之后发的命令</td><td>127.0.0.1:6379&gt; EXEC   OK</td></tr><tr><td>discard</td><td>丢弃所有multi之后发的命令</td><td></td></tr></tbody></table><h2 id="7-Redis高级应用"><a href="#7-Redis高级应用" class="headerlink" title="7. Redis高级应用"></a>7. Redis高级应用</h2><h3 id="7-1-在pom-xml中添加jar包文件"><a href="#7-1-在pom-xml中添加jar包文件" class="headerlink" title="7.1 在pom.xml中添加jar包文件"></a>7.1 在pom.xml中添加jar包文件</h3><p>说明:在JT-PARENT项目中添加jar包文件</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- jedis --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${jedis.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--添加spring-datajar包  --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.data<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="7-2-String类型数据测试"><a href="#7-2-String类型数据测试" class="headerlink" title="7.2 String类型数据测试"></a>7.2 String类型数据测试</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>jt<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span>BeforeEach<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span>Jedis<span class="token punctuation">;</span><span class="token keyword">import</span> redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span>params<span class="token punctuation">.</span>SetParams<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestRedis</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testString01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.连接Redis</span>        String host <span class="token operator">=</span> <span class="token string">"192.168.126.129"</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> port<span class="token operator">=</span> <span class="token number">6379</span><span class="token punctuation">;</span>        Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.操作redis</span>        jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"2002"</span><span class="token punctuation">,</span><span class="token string">"学习好辛苦"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String value <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"2002"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.判断redis中是否有指定数据</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>jedis<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token string">"2002"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"2002"</span><span class="token punctuation">,</span><span class="token string">"两会精神"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//4.删除</span>        jedis<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span><span class="token string">"2002"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5.检索数据</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//6.清空数据</span>        jedis<span class="token punctuation">.</span><span class="token function">flushAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//测试类的初始化操作</span>    <span class="token keyword">private</span> Jedis jedis<span class="token punctuation">;</span>    <span class="token annotation punctuation">@BeforeEach</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"192.168.126.129"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//如果采用expire则不能保证超时时间的原子性操作!!!</span>    <span class="token comment" spellcheck="true">//lock锁: 死锁</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testStringEX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span><span class="token string">"测试数据的有效期"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//1.没有设定超时时间,用不过期</span>        <span class="token comment" spellcheck="true">//int a = 1/0;                        //如果发生异常,数据已存入redis数据库中</span>        jedis<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//2.设定超时</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Long seconds <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">ttl</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"abc剩余的存活时间: "</span> <span class="token operator">+</span> seconds<span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">persist</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//保证赋值的原子性操作</span>        jedis<span class="token punctuation">.</span><span class="token function">setex</span><span class="token punctuation">(</span><span class="token string">"www"</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">"超时测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 需求:如果a存在,则不允许重新赋值     * @throws InterruptedException     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testStringNX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*jedis.set("a","123");        jedis.set("a","456");        System.out.println(jedis.get("a"));        if (!jedis.exists("a")){            jedis.set("a","11111111");        }        System.out.println(jedis.get("a"));*/</span>        <span class="token comment" spellcheck="true">//如果key不存在时,则赋值</span>        jedis<span class="token punctuation">.</span><span class="token function">setnx</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">setnx</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//123</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 1.保证超时时间的原子性操作   EX     * 2.保证如果key存在,则不允许赋值   NX     * 需求:既满足超时定义,又要满足数据不允许修改     * SetParams:参数     *  EX: 秒     *  PX: 毫秒     *  NX: 有值不修改     *  XX: 如果key不存在,则数据不修改     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testStringEXNX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        SetParams setParams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SetParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        setParams<span class="token punctuation">.</span><span class="token function">ex</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"66666666666"</span><span class="token punctuation">,</span>setParams<span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"1111111111111111"</span><span class="token punctuation">,</span>setParams<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="7-3-hash类型测试"><a href="#7-3-hash类型测试" class="headerlink" title="7.3 hash类型测试"></a>7.3 hash类型测试</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * 一般会将有关联关系的数据利用hash方式进行保存.     * orderID:     *      userID:下单用户     *      price: xxxxx     *      items: [xxxxx]     *      orderShipping: xxxxx     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        jedis<span class="token punctuation">.</span><span class="token function">hset</span><span class="token punctuation">(</span><span class="token string">"orderID"</span><span class="token punctuation">,</span><span class="token string">"userID"</span><span class="token punctuation">,</span><span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">hset</span><span class="token punctuation">(</span><span class="token string">"orderID"</span><span class="token punctuation">,</span><span class="token string">"price"</span><span class="token punctuation">,</span><span class="token string">"2341.34"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">hset</span><span class="token punctuation">(</span><span class="token string">"orderID"</span><span class="token punctuation">,</span><span class="token string">"items"</span><span class="token punctuation">,</span><span class="token string">"描述信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">hset</span><span class="token punctuation">(</span><span class="token string">"orderID"</span><span class="token punctuation">,</span><span class="token string">"orderShipping"</span><span class="token punctuation">,</span><span class="token string">"物流信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">hgetAll</span><span class="token punctuation">(</span><span class="token string">"orderID"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">hkeys</span><span class="token punctuation">(</span><span class="token string">"orderID"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">hvals</span><span class="token punctuation">(</span><span class="token string">"orderID"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>结果展现:</p><pre class=" language-java"><code class="language-java">操作完成<span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">{</span>userID<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> items<span class="token operator">=</span>描述信息<span class="token punctuation">,</span> orderShipping<span class="token operator">=</span>物流信息<span class="token punctuation">,</span> price<span class="token operator">=</span><span class="token number">2341.34</span><span class="token punctuation">}</span><span class="token punctuation">[</span>userID<span class="token punctuation">,</span> items<span class="token punctuation">,</span> orderShipping<span class="token punctuation">,</span> price<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">2341.34</span><span class="token punctuation">,</span> 描述信息<span class="token punctuation">,</span> 物流信息<span class="token punctuation">]</span></code></pre><h3 id="7-4-List类型测试"><a href="#7-4-List类型测试" class="headerlink" title="7.4 List类型测试"></a>7.4 List类型测试</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        jedis<span class="token punctuation">.</span><span class="token function">lpush</span><span class="token punctuation">(</span><span class="token string">"list1"</span><span class="token punctuation">,</span><span class="token string">"1,2,3,4,5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String value1 <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">rpop</span><span class="token punctuation">(</span><span class="token string">"list1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1,2,3,4,5</span>        jedis<span class="token punctuation">.</span><span class="token function">lpush</span><span class="token punctuation">(</span><span class="token string">"list2"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">,</span><span class="token string">"4"</span><span class="token punctuation">,</span><span class="token string">"5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String value2 <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">rpop</span><span class="token punctuation">(</span><span class="token string">"list2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1</span>    <span class="token punctuation">}</span></code></pre><p>结果展现:</p><pre class=" language-java"><code class="language-java"><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token number">1</span></code></pre><h3 id="7-5-事务测试"><a href="#7-5-事务测试" class="headerlink" title="7.5 事务测试"></a>7.5 事务测试</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span>  <span class="token keyword">void</span>  <span class="token function">testTX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Transaction transaction <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">multi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//开始事务</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>        transaction<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        transaction<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        transaction<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//提交事务</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>        transaction<span class="token punctuation">.</span><span class="token function">discard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//事务回滚</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p><strong><code>注意:</code></strong></p><p>虽然redis提供了事务操作,但是该事务是一种<code>弱事务</code>.</p><p>只对单台redis有效</p><p>如果存在多台redis,并且需要使用事务控制,一般使用队列的形式进行事务控制</p></blockquote><h2 id="8-SpringBoot整合Redis"><a href="#8-SpringBoot整合Redis" class="headerlink" title="8. SpringBoot整合Redis"></a>8. SpringBoot整合Redis</h2><h3 id="8-1-整合Redis的步骤"><a href="#8-1-整合Redis的步骤" class="headerlink" title="8.1 整合Redis的步骤"></a>8.1 整合Redis的步骤</h3><ol><li>将redis的配置文件写入到properties文件中.</li><li>利用SpringBoot的配置类整合Redis.</li><li>实现Redis的复用.</li></ol><h3 id="8-2-编辑properties文件"><a href="#8-2-编辑properties文件" class="headerlink" title="8.2 编辑properties文件"></a>8.2 编辑properties文件</h3><blockquote><p>说明: 为了实现redis整合的通用,所以将redis.properties文件放到jt-common中</p></blockquote><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#配置单台redis</span><span class="token attr-name">redis.host</span><span class="token punctuation">=</span><span class="token attr-value">192.168.126.129</span><span class="token attr-name">redis.port</span><span class="token punctuation">=</span><span class="token attr-value">6379</span></code></pre><p><img src="./images/loading.gif" data-original="../images/posts/SoftwareInstall-2020-05-27-CentsOS-Redis/image-20200529161726075.png" alt="image-20200529161726075"></p><h3 id="8-3-编辑redis-config配置文件"><a href="#8-3-编辑redis-config配置文件" class="headerlink" title="8.3 编辑redis.config配置文件"></a>8.3 编辑redis.config配置文件</h3><blockquote><p>作用:将redis对象交给spring容器进行管理.并且用户通过@Autowired注解动态获取对象.</p><p>细节:在jt-common中编辑配置类</p></blockquote><p>配置类:</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span> <span class="token comment" spellcheck="true">//标识配置类 一般和@Bean注解连用</span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token string">"classpath:/properties/redis.properties"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${redis.host}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String host<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${redis.port}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer port<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将哪个对象交给容器管理,返回值就是什么对象</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Jedis <span class="token function">jedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试:</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfigTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> Jedis jedis<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">redisConfTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">,</span><span class="token string">"Hello Redis"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String value <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>结果:</p><p><img src="./images/loading.gif" data-original="../images/posts/SoftwareInstall-2020-05-27-CentsOS-Redis/image-20200529163505482.png" alt="image-20200529163505482"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Software_Install </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS7, Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7安装Mysql</title>
      <link href="/undefined/4871.html"/>
      <url>/undefined/4871.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-安装Maria-DB"><a href="#1-安装Maria-DB" class="headerlink" title="1. 安装Maria DB"></a>1. 安装Maria DB</h3><p>使用yum安装 (需要配置好yum,有网络)</p><pre class=" language-shell"><code class="language-shell">yum install mariadb-server</code></pre><p>需要依赖, 输入y 回车继续</p><p><img src="./images/loading.gif" data-original="../images/posts/SoftwareInstall-2020-05-26-CentOS-mysql/image-20200526161530741.png" alt="image-提示需要安装依赖"></p><p>安装完成后如下所示:</p><p><img src="./images/loading.gif" data-original="../images/posts/SoftwareInstall-2020-05-26-CentOS-mysql/image-20200526161623101.png" alt="image-安装完成"></p><h3 id="2-MariaDB-命令"><a href="#2-MariaDB-命令" class="headerlink" title="2. MariaDB 命令"></a>2. MariaDB 命令</h3><ol><li>启动数据库:</li></ol><pre class=" language-shell"><code class="language-shell">systemctl start mariadb</code></pre><ol start="2"><li>停止数据库:</li></ol><pre class=" language-shell"><code class="language-shell">systemctl stop mariadb</code></pre><ol start="3"><li>重启数据库:</li></ol><pre class=" language-shell"><code class="language-shell">systemctl restart mariadb</code></pre><h3 id="3-MariaDB-配置"><a href="#3-MariaDB-配置" class="headerlink" title="3. MariaDB 配置"></a>3. MariaDB 配置</h3><p>输入<code>mysql_secure_installation</code>命令配置数据库,如下注释中的解释</p><pre class=" language-shell"><code class="language-shell">[root@localhost src]# mysql_secure_installation NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB      SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!In order to log into MariaDB to secure it, we'll need the currentpassword for the root user.  If you've just installed MariaDB, andyou haven't set the root password yet, the password will be blank,so you should just press enter here.Enter current password for root (enter for none): OK, successfully used password, moving on...Setting the root password ensures that nobody can log into the MariaDBroot user without the proper authorisation.Set root password? [Y/n] Y    # 设置密码 yNew password:                 # 新密码Re-enter new password:         # 再次输入密码Password updated successfully!Reloading privilege tables.. ... Success!By default, a MariaDB installation has an anonymous user, allowing anyoneto log into MariaDB without having to have a user account created forthem.  This is intended only for testing, and to make the installationgo a bit smoother.  You should remove them before moving into aproduction environment.Remove anonymous users? [Y/n] Y        #是否移除匿名用户,输入Y,回车继续  ... Success!Normally, root should only be allowed to connect from 'localhost'.  Thisensures that someone cannot guess at the root password from the network.# 拒绝root远程登录,n, 不管y/n,都会拒绝root远程登录Disallow root login remotely? [Y/n] n  ... skipping.By default, MariaDB comes with a database named 'test' that anyone canaccess.  This is also intended only for testing, and should be removedbefore moving into a production environment.# 删除test数据库,y:删除 n:不删除. 数据库中会有一个test数据库,一般不需要Remove test database and access to it? [Y/n] n  ... skipping.Reloading the privilege tables will ensure that all changes made so farwill take effect immediately.Reload privilege tables now? [Y/n] y # 重新加载权限表,y. 或者重启服务也行 ... Success!Cleaning up...All done!  If you've completed all of the above steps, your MariaDBinstallation should now be secure.Thanks for using MariaDB!</code></pre><h3 id="4-数据库登录测试"><a href="#4-数据库登录测试" class="headerlink" title="4. 数据库登录测试"></a>4. 数据库登录测试</h3><p>使用用户名:root &amp; 密码:root 登录数据库</p><pre class=" language-shell"><code class="language-shell">[root@localhost src]# mysql -uroot -pEnter password: Welcome to the MariaDB monitor.  Commands end with ; or \g.Your MariaDB connection id is 7Server version: 5.5.65-MariaDB MariaDB ServerCopyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.MariaDB [(none)]> </code></pre><h3 id="5-设定远程访问"><a href="#5-设定远程访问" class="headerlink" title="5. 设定远程访问"></a>5. 设定远程访问</h3><p>说明:Mysql数据库默认条件下不允许远程用户访问数据库,只允许本地服务通过127.0.0.1/localhost的方式访问!</p><p>需求:想通过Windows的SqlYog程序远程访问数据库,则必须修改mysql的权限列表.</p><ol><li>本地登录数据库:</li></ol><pre class=" language-shell"><code class="language-shell">[root@localhost src]# mysql -uroot -pEnter password: Welcome to the MariaDB monitor.  Commands end with ; or \g.Your MariaDB connection id is 8Server version: 5.5.65-MariaDB MariaDB ServerCopyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.MariaDB [(none)]> </code></pre><ol start="2"><li>查看并切换数据库:</li></ol><pre class=" language-mysql"><code class="language-mysql">MariaDB [(none)]> show databases;    # 查看数据库+--------------------+| Database           |+--------------------+| information_schema || mysql              || performance_schema || test               |+--------------------+4 rows in set (0.00 sec)MariaDB [(none)]> use mysql;    # 切换数据库Reading table information for completion of table and column namesYou can turn off this feature to get a quicker startup with -ADatabase changedMariaDB [mysql]> </code></pre><ol start="3"><li>查看数据库表信息:</li></ol><pre class=" language-mysql"><code class="language-mysql">MariaDB [mysql]> show tables;    # 查看数据库表信息+---------------------------+| Tables_in_mysql           |+---------------------------+| columns_priv              || db                        || event                     || func                      || general_log               || help_category             || help_keyword              || help_relation             || help_topic                || host                      || ndb_binlog_index          || plugin                    || proc                      || procs_priv                || proxies_priv              || servers                   || slow_log                  || tables_priv               || time_zone                 || time_zone_leap_second     || time_zone_name            || time_zone_transition      || time_zone_transition_type || user                      |+---------------------------+24 rows in set (0.00 sec)</code></pre><ol start="4"><li>查看root账户权限信息</li></ol><pre class=" language-mysql"><code class="language-mysql"># host : 表示允许访问的主机# user : 用户信息# password : 密码信息 (MD5加密)MariaDB [mysql]> select host,user,password from user;+-----------+------+-------------------------------------------+| host      | user | password                                  |+-----------+------+-------------------------------------------+| localhost | root | *81F5E21E35407D884A6CD4A731AEBFB6AF209E1B || 127.0.0.1 | root | *81F5E21E35407D884A6CD4A731AEBFB6AF209E1B || ::1       | root | *81F5E21E35407D884A6CD4A731AEBFB6AF209E1B |+-----------+------+-------------------------------------------+3 rows in set (0.00 sec)</code></pre><ol start="5"><li>修改用户权限列表,实现用户远程访问</li></ol><p>将与主机名相等的字段改为<code>" % "</code>,我的主机名为root</p><pre class=" language-mysql"><code class="language-mysql">MariaDB [mysql]> update user set host='%' where host='localhost';Query OK, 1 rows affected (0.00 sec)Rows matched: 1  Changed: 1  Warnings: 0MariaDB [mysql]> select host,user,password from user;+-----------+------+-------------------------------------------+| host      | user | password                                  |+-----------+------+-------------------------------------------+| %            | root | *81F5E21E35407D884A6CD4A731AEBFB6AF209E1B || 127.0.0.1 | root | *81F5E21E35407D884A6CD4A731AEBFB6AF209E1B || ::1       | root | *81F5E21E35407D884A6CD4A731AEBFB6AF209E1B |+-----------+------+-------------------------------------------+3 rows in set (0.00 sec)</code></pre><ol start="6"><li>刷新权限列表或者重启数据库服务</li></ol><pre class=" language-mysql"><code class="language-mysql"># 刷新权限列表MariaDB [mysql]> flush privileges;        Query OK, 0 rows affected (0.00 sec)# 或者重启数据库服务[root@localhost src]# systemctl restart mariadb[root@localhost src]# </code></pre><ol start="7"><li>关闭Linux防火墙,使用SQLyog连接数据库</li></ol><p><img src="./images/loading.gif" data-original="../images/posts/SoftwareInstall-2020-05-26-CentOS-mysql/image-20200526173825486.png" alt="image-SQLyog连接数据库"></p><ol start="8"><li>设置Linux开机自动启动数据库服务</li></ol><pre class=" language-shell"><code class="language-shell">[root@localhost ~]# systemctl enable mariadbCreated symlink from /etc/systemd/system/multi-user.target.wants/mariadb.service to /usr/lib/systemd/system/mariadb.service.</code></pre><h3 id="6-Linux中的防火墙"><a href="#6-Linux中的防火墙" class="headerlink" title="6. Linux中的防火墙"></a>6. Linux中的防火墙</h3><ol><li>检查防火墙状态信息</li></ol><pre class=" language-shell"><code class="language-shell">[root@localhost src]# firewall-cmd --staterunning</code></pre><ol start="2"><li>临时关闭防火墙操作,系统重启后防火墙会重新开启.</li></ol><pre class=" language-shell"><code class="language-shell">[root@localhost src]# systemctl stop firewalld.service[root@localhost src]# firewall-cmd --statenot running</code></pre><ol start="3"><li>开启防火墙操作</li></ol><pre class=" language-shell"><code class="language-shell">[root@localhost src]# systemctl stop firewalld.service[root@localhost src]# firewall-cmd --statenot running</code></pre><ol start="4"><li>永久关闭防火墙操作</li></ol><pre class=" language-shell"><code class="language-shell"># 表示系统下次启动时不开启防火墙[root@localhost src]# systemctl disable firewalld.serviceRemoved symlink /etc/systemd/system/multi-user.target.wants/firewalld.service.Removed symlink /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service.# 防火墙还是运行状态[root@localhost src]# firewall-cmd --staterunning# 还需要将当前防火墙关闭[root@localhost src]# systemctl stop firewalld.service[root@localhost src]# firewall-cmd --statenot running</code></pre><ol start="5"><li>永久开启防火墙操作</li></ol><pre class=" language-shell"><code class="language-shell"># 表示系统下次启动时开启防火墙[root@localhost src]# systemctl enable firewalld.serviceCreated symlink from /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service to /usr/lib/systemd/system/firewalld.service.Created symlink from /etc/systemd/system/multi-user.target.wants/firewalld.service to /usr/lib/systemd/system/firewalld.service.# 防火墙还是关闭状态[root@localhost src]# firewall-cmd --statenot running# 还需要将当前防火墙开启[root@localhost src]# systemctl start firewalld.service[root@localhost src]# firewall-cmd --staterunning</code></pre><h3 id="7-使用Docker安装mysql"><a href="#7-使用Docker安装mysql" class="headerlink" title="7. 使用Docker安装mysql"></a>7. 使用Docker安装mysql</h3><p>项目的底层数据库采用MySQL，而MySQL采用衍生版本Percona，并且采用docker容器化的方式进行部<br>署。</p><ol><li>什么是percona？</li></ol><p>Percona 为 MySQL 数据库服务器进行了改进，在功能和性能上较 MySQL 有着很显著的提升。该版本提升了在高<br>负载情况下的 InnoDB 的性能、为 DBA 提供一些非常有用的性能诊断工具；另外有更多的参数和命令来控制服务<br>器行为。<br>Percona Server 只包含 MySQL 的服务器版，并没有提供相应对 MySQL 的 Connector 和 GUI 工具进行改进。<br>Percona Server 使用了一些 google-mysql-tools, Proven Scaling, Open Query 对 MySQL 进行改造。<br>官网：<a href="https://www.percona.com/software/mysql-database" target="_blank" rel="noopener">https://www.percona.com/software/mysql-database</a></p><ol start="2"><li>安装部署</li></ol><pre class=" language-shell"><code class="language-shell">#镜像地址：https://hub.docker.com/_/percona/#拉取镜像docker pull percona:5.7.23#创建容器docker create --name percona -v /data/mysql-data:/var/lib/mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root percona:5.7.23c5af61393e45d4565c247139f7daea1acce7b057a722fd877ee4e456e2ffc3a0#参数解释：--name： percona 指定是容器的名称-v： /data/mysql-data:/var/lib/mysql 将主机目录/data/mysql-data挂载到容器的/var/lib/mysql上-p： 3306:3306 设置端口映射，主机端口是3306，容器内部端口3306-e： MYSQL_ROOT_PASSWORD=root 设置容器参数，设置root用户的密码为rootpercona:5.7.23： 镜像名:版本#启动容器docker start percona</code></pre><ol start="3"><li>测试：</li></ol><p>启动percona的时候发现没啥问题，但是在docker ps查看的时候会发现没有percona，而且查看/data/mysql-data文件也没有写入内容。</p><p>使用docker ps -a查看就可以看见问题</p><p><img src="./images/loading.gif" data-original="../images/posts/SoftwareInstall-2020-05-26-CentOS-mysql/image-20200529003351809.png" alt="image-20200529003351809"></p><p>Exited (1) About a minute ago 服务闪退了</p><p>解决方案</p><p>给data文件添加权限即可 chmod -R 777 /data </p><p><img src="./images/loading.gif" data-original="../images/posts/SoftwareInstall-2020-05-26-CentOS-mysql/image-20200529003513638.png" alt="image-20200529003513638"></p><p>测试宿主机客户端: 连接成功</p><p><img src="./images/loading.gif" data-original="../images/posts/SoftwareInstall-2020-05-26-CentOS-mysql/image-20200529003316742.png" alt="image-20200529003316742"></p><h2 id="8-docker常用命令"><a href="#8-docker常用命令" class="headerlink" title="8. docker常用命令"></a>8. docker常用命令</h2><p>列出所有容器ID</p><pre class=" language-shell"><code class="language-shell">docker ps -aq</code></pre><p>查看所有运行或者不运行容器</p><pre class=" language-shell"><code class="language-shell">docker ps -a</code></pre><p>停止所有的container（容器），这样才能够删除其中的images：</p><pre class=" language-shell"><code class="language-shell">docker stop $(docker ps -a -q) 或者 docker stop $(docker ps -aq) </code></pre><p>如果想要删除所有container（容器）的话再加一个指令：</p><pre class=" language-shell"><code class="language-shell">docker rm $(docker ps -a -q) 或者 docker rm $(docker ps -aq)</code></pre><p> 查看当前有些什么images</p><pre class=" language-shell"><code class="language-shell">docker images</code></pre><p>删除images（镜像），通过image的id来指定删除谁</p><pre class=" language-shell"><code class="language-shell">docker rmi <image id></code></pre><p>想要删除untagged images，也就是那些id为的image的话可以用</p><pre class=" language-shell"><code class="language-shell">docker rmi $(docker images | grep "^<none>" | awk "{print $3}")</code></pre><p>要删除全部image（镜像）的话</p><pre class=" language-shell"><code class="language-shell">docker rmi $(docker images -q)</code></pre><p>强制删除全部image的话</p><p>强制删除全部image的话</p><pre class=" language-shell"><code class="language-shell">docker rmi -f $(docker images -q)</code></pre><p>从容器到宿主机复制</p><pre class=" language-shell"><code class="language-shell"> docker cp tomcat：/webapps/js/text.js /home/admin docker  cp 容器名:  容器路径       宿主机路径         </code></pre><p>从宿主机到容器复制</p><p>从宿主机到容器复制</p><pre class=" language-shell"><code class="language-shell"> docker cp /home/admin/text.js tomcat：/webapps/js docker cp 宿主路径中文件      容器名  容器路径  </code></pre><p> 删除所有停止的容器</p><pre class=" language-shell"><code class="language-shell">docker container prune</code></pre><p>删除所有不使用的镜像</p><pre class=" language-shell"><code class="language-shell">docker image prune --force --all或者docker image prune -f -a</code></pre><p>停止、启动、杀死、重启一个容器</p><p>停止、启动、杀死、重启一个容器</p><pre class=" language-shell"><code class="language-shell">docker stop Name或者ID  docker start Name或者ID  docker kill Name或者ID  docker restart name或者ID</code></pre><p>docker进入容器，查看配置文件</p><p>docker进入容器，查看配置文件</p><pre><code>docker exec ：在运行的容器中执行命令        -d :分离模式: 在后台运行        -i :即使没有附加也保持STDIN（标准输入） 打开,以交互模式运行容器，通常与 -t 同时使用；        -t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；docker exec -it  f94d2c317477 /bin/bash</code></pre><p>出现root@f94d2c317477:/usr/share/elasticsearch/config# vi elasticsearch.yml<br>bash: vi: command not found</p><pre class=" language-shell"><code class="language-shell">apt-get update && apt-get install vim -y</code></pre><p>修改配置、退出容器</p><pre class=" language-shell"><code class="language-shell">1、如果要正常退出不关闭容器，请按Ctrl+P+Q进行退出容器2、如果使用exit退出，那么在退出之后会关闭容器，可以使用下面的流程进行恢复使用docker restart命令重启容器使用docker attach命令进入容器</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Software_Install </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS7, mariadb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7安装Nginx</title>
      <link href="/undefined/981a.html"/>
      <url>/undefined/981a.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-下载Linux版的Ngnix"><a href="#1-下载Linux版的Ngnix" class="headerlink" title="1. 下载Linux版的Ngnix"></a>1. 下载Linux版的Ngnix</h3><p><img src="./images/loading.gif" data-original="../images/posts/SoftwareInstall-2020-05-26-Centos-nginx/image-20200527112925453.png" alt="下载Nginx"></p><p><a href="https://nginx.org/download/nginx-1.19.0.tar.gz" target="_blank" rel="noopener">下载链接</a></p><h3 id="2-上传文件到Linux服务器"><a href="#2-上传文件到Linux服务器" class="headerlink" title="2. 上传文件到Linux服务器"></a>2. 上传文件到Linux服务器</h3><p>使用lrzsz方式上传,直接拖拽</p><p><img src="./images/loading.gif" data-original="../images/posts/SoftwareInstall-2020-05-26-Centos-nginx/image-20200527113121487.png" alt="上传成功目录结构"></p><h3 id="3-解压上传文件-并删除压缩包"><a href="#3-解压上传文件-并删除压缩包" class="headerlink" title="3. 解压上传文件,并删除压缩包"></a>3. 解压上传文件,并删除压缩包</h3><pre class=" language-shell"><code class="language-shell"># 解压文件[root@localhost src]# tar -xzvf nginx-1.19.0.tar.gz nginx-1.19.0/nginx-1.19.0/auto/......nginx-1.19.0/auto/cc/namenginx-1.19.0/auto/cc/owcnginx-1.19.0/auto/cc/sunc# 查看文件目录结构[root@localhost src]# lsimages  jdk1.8  nginx-1.19.0  nginx-1.19.0.tar.gz  tomcats# 删除压缩包[root@localhost src]# rm -rf nginx-1.19.0.tar.gz </code></pre><h3 id="4-安装Nginx"><a href="#4-安装Nginx" class="headerlink" title="4. 安装Nginx"></a>4. 安装Nginx</h3><p>nginx安装中会有<code>源文件目录</code>和<code>工作目录</code>之分</p><ol><li>配置Nginx</li></ol><pre class=" language-shell"><code class="language-shell"># 查看文件目录结构[root@localhost nginx-1.19.0]# lsauto  CHANGES  CHANGES.ru  conf  configure  contrib  html  LICENSE  man  README  src[root@localhost nginx-1.19.0]# ./configure checking for OS + Linux 3.10.0-1062.18.1.el7.x86_64 x86_64checking for C compiler ... found + using GNU C compiler + gcc version: 4.8.5 20150623 (Red Hat 4.8.5-39) (GCC) .......    # 校验文件creating objs/MakefileConfiguration summary  + using system PCRE library  + OpenSSL library is not used  + using system zlib library  nginx path prefix: "/usr/local/nginx"    # 工作目录  nginx binary file: "/usr/local/nginx/sbin/nginx"  nginx modules path: "/usr/local/nginx/modules"  nginx configuration prefix: "/usr/local/nginx/conf"  nginx configuration file: "/usr/local/nginx/conf/nginx.conf"  nginx pid file: "/usr/local/nginx/logs/nginx.pid"  nginx error log file: "/usr/local/nginx/logs/error.log"  nginx http access log file: "/usr/local/nginx/logs/access.log"  nginx http client request body temporary files: "client_body_temp"  nginx http proxy temporary files: "proxy_temp"  nginx http fastcgi temporary files: "fastcgi_temp"  nginx http uwsgi temporary files: "uwsgi_temp"  nginx http scgi temporary files: "scgi_temp"</code></pre><ol start="2"><li>编译源文件</li></ol><pre class=" language-shell"><code class="language-shell">[root@localhost nginx-1.19.0]# make make -f objs/Makefilemake[1]: 进入目录“/usr/local/src/nginx-1.19.0”cc -c -pipe  -O -W -Wall -Wpointer-arith -Wno-unused-parameter -Werror -g  -I src/core -I src/event -I src/event/modules -I src/os/unix -I objs \......-Wl,-Esed -e "s|%%PREFIX%%|/usr/local/nginx|" \    -e "s|%%PID_PATH%%|/usr/local/nginx/logs/nginx.pid|" \    -e "s|%%CONF_PATH%%|/usr/local/nginx/conf/nginx.conf|" \    -e "s|%%ERROR_LOG_PATH%%|/usr/local/nginx/logs/error.log|" \    < man/nginx.8 > objs/nginx.8make[1]: 离开目录“/usr/local/src/nginx-1.19.0”</code></pre><ol start="3"><li>执行安装指令</li></ol><pre class=" language-shell"><code class="language-shell">[root@localhost nginx-1.19.0]# make installmake -f objs/Makefile installmake[1]: 进入目录“/usr/local/src/nginx-1.19.0”test -d '/usr/local/nginx' || mkdir -p '/usr/local/nginx'...make[1]: 离开目录“/usr/local/src/nginx-1.19.0”</code></pre><ol start="4"><li>检查安装路径</li></ol><pre class=" language-shell"><code class="language-shell"># 工作目录[root@localhost nginx-1.19.0]# whereis nginxnginx: /usr/local/nginx</code></pre><ol start="5"><li>安装中报错信息:</li></ol><pre class=" language-shell"><code class="language-shell">#安装Nginx时报错./configure: error: the HTTP rewrite module requires the PCRE library.#安装pcre-devel解决问题yum -y install pcre-devel#错误提示：./configure: error: the HTTP cache module requires md5 functionsfrom OpenSSL library.   You can either disable the module by using--without-http-cache option, or install the OpenSSL library into the system,or build the OpenSSL library statically from the source with nginx by using--with-http_ssl_module --with-openssl=<path> options.# 解决办法：yum -y install openssl openssl-devel# 总结：yum -y install pcre-devel openssl openssl-devel./configure --prefix=/usr/local/nginxmakemake install</code></pre><h3 id="5-Nginx命令"><a href="#5-Nginx命令" class="headerlink" title="5. Nginx命令"></a>5. Nginx命令</h3><ol><li>进入工作目录,查看目录结构</li></ol><pre class=" language-shell"><code class="language-shell">[root@localhost nginx-1.19.0]# cd /usr/local/nginx/[root@localhost nginx]# ll总用量 4drwxr-xr-x. 2 root root 4096 5月  27 11:43 conf    # 配置文件drwxr-xr-x. 2 root root   40 5月  27 11:43 html    # 欢迎页drwxr-xr-x. 2 root root    6 5月  27 11:43 logs    # 日志文件drwxr-xr-x. 2 root root   19 5月  27 11:43 sbin    # nginx命令</code></pre><ol start="2"><li>使用nginx命令</li></ol><ul><li>启动nginx并查看进程        ./nginx</li></ul><pre class=" language-shell"><code class="language-shell">[root@localhost nginx]# cd sbin/[root@localhost sbin]# ll总用量 3764-rwxr-xr-x. 1 root root 3851112 5月  27 11:43 nginx[root@localhost sbin]# ./nginx [root@localhost sbin]# ps -ef | grep nginx root      12672      1  0 11:49 ?        00:00:00 nginx: master process ./nginxnobody    12673  12672  0 11:49 ?        00:00:00 nginx: worker processroot      12687   1829  0 11:49 pts/0    00:00:00 grep --color=auto nginx</code></pre><ul><li>更新nginx配置</li></ul><pre class=" language-shell"><code class="language-shell">[root@localhost sbin]# ./nginx -s reload</code></pre><ul><li>停止nginx服务</li></ul><pre class=" language-shell"><code class="language-shell">[root@localhost sbin]# ./nginx -s stop</code></pre><h3 id="6-测试Nginx"><a href="#6-测试Nginx" class="headerlink" title="6. 测试Nginx"></a>6. 测试Nginx</h3><p>window浏览器访问localhost,虚拟机访问分配的ip地址:192.168.126.129</p><p><img src="./images/loading.gif" data-original="../images/posts/SoftwareInstall-2020-05-26-Centos-nginx/image-20200527115636132.png" alt="nginx欢迎首页"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Software_Install </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS7, Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7安装jdk1.8</title>
      <link href="/undefined/f754.html"/>
      <url>/undefined/f754.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-安装lrzsz"><a href="#1-安装lrzsz" class="headerlink" title="1. 安装lrzsz"></a>1. 安装lrzsz</h3><p>我们常用ftp上传一些文件到Linux服务器,或者从LInux服务器上下载一些文件到本地.如果只是传输一些小文件的话,可以使用lrzsz,作为ftp的代替品.</p><ol><li>使用如下命令安装lrzsz</li></ol><pre class=" language-shell"><code class="language-shell">yum -y install lrzsz</code></pre><ol start="2"><li>安装完成后在Xshell中到想安装的目录下,我的是在<code>/usr/local/src/</code>,直接拖拽上传:</li></ol><p><img src="./images/loading.gif" data-original="../images/posts/SoftwareInstall-2020-05-26-Centos-jdk/image-20200526153724829.png" alt="image-上传文件"></p><h3 id="2-解压上传的jdk文件"><a href="#2-解压上传的jdk文件" class="headerlink" title="2. 解压上传的jdk文件"></a>2. 解压上传的jdk文件</h3><pre class=" language-shell"><code class="language-shell">tar -zxvf jdk-8u51-linux-x64.tar.gz</code></pre><p>解压完成后目录文件如下:</p><p><img src="./images/loading.gif" data-original="../images/posts/SoftwareInstall-2020-05-26-Centos-jdk/image-20200526154030450.png" alt="image-解压后文件目录"></p><h3 id="3-删除jdk的压缩包"><a href="#3-删除jdk的压缩包" class="headerlink" title="3. 删除jdk的压缩包"></a>3. 删除jdk的压缩包</h3><pre class=" language-shell"><code class="language-shell">rm -f jdk-8u51-linux-x64.tar.gz</code></pre><h3 id="4-重命名jdk的解压文件夹"><a href="#4-重命名jdk的解压文件夹" class="headerlink" title="4. 重命名jdk的解压文件夹"></a>4. 重命名jdk的解压文件夹</h3><pre class=" language-shell"><code class="language-shell">[root@localhost src]# mv jdk1.8.0_51  jdk1.8[root@localhost src]# ll总用量 0drwxr-xr-x. 8 10 143 255 6月   9 2015 jdk1.8</code></pre><h3 id="5-配置环境变量"><a href="#5-配置环境变量" class="headerlink" title="5. 配置环境变量"></a>5. 配置环境变量</h3><pre class=" language-shell"><code class="language-shell">#修改/etc/profile文件,添加下面内容export JAVA_HOME=/usr/local/src/jdk1.8export PATH=$JAVA_HOME/bin:$PATHexport CLASSPATH=.:$JAVA_HOME/lib    #配置类加载器</code></pre><h3 id="6-刷新环境变量-是配置立即生效"><a href="#6-刷新环境变量-是配置立即生效" class="headerlink" title="6. 刷新环境变量,是配置立即生效"></a>6. 刷新环境变量,是配置立即生效</h3><pre class=" language-shell"><code class="language-shell">[root@localhost jdk1.8.0]# source /etc/profile</code></pre><h3 id="7-验证安装结果"><a href="#7-验证安装结果" class="headerlink" title="7. 验证安装结果"></a>7. 验证安装结果</h3><p>如下显示jdk版本则表示成功</p><pre class=" language-shell"><code class="language-shell">[root@localhost jdk1.8.0]# java -versionjava version "1.8.0_51"Java(TM) SE Runtime Environment (build 1.8.0_51-b16)Java HotSpot(TM) 64-Bit Server VM (build 25.51-b03, mixed mode)</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Software_Install </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS7, jdk1.8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql数据库优化</title>
      <link href="/undefined/276e.html"/>
      <url>/undefined/276e.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><h2 id="1-1-为什么要优化"><a href="#1-1-为什么要优化" class="headerlink" title="1.1 为什么要优化"></a>1.1 为什么要优化</h2><ul><li>系统的吞吐量瓶颈往往出现在数据库的访问速度上</li><li>随着应用程序的运行，数据库的中的数据会越来越多，处理时间会相应变慢</li><li>数据是存放在磁盘上的，读写速度无法和内存相比</li></ul><h2 id="1-2-如何优化"><a href="#1-2-如何优化" class="headerlink" title="1.2 如何优化"></a>1.2 如何优化</h2><ul><li>设计数据库时：数据库表、字段的设计，存储引擎</li><li>利用好MySQL自身提供的功能，如索引等</li><li>横向扩展：MySQL集群、负载均衡、读写分离</li><li>SQL语句的优化（收效甚微）</li></ul><h1 id="2-字段设计"><a href="#2-字段设计" class="headerlink" title="2. 字段设计"></a>2. 字段设计</h1><blockquote><p>字段类型的选择，设计规范，范式，常见设计案例</p></blockquote><h2 id="2-1-原则：尽量使用整型表示字符串"><a href="#2-1-原则：尽量使用整型表示字符串" class="headerlink" title="2.1 原则：尽量使用整型表示字符串"></a>2.1 原则：尽量使用整型表示字符串</h2><h3 id="2-1-1存储IP"><a href="#2-1-1存储IP" class="headerlink" title="2.1.1存储IP"></a>2.1.1存储IP</h3><p><code>INET_ATON(str)</code>，address to number</p><p><code>INET_NTOA(number)</code>，number to address</p><h3 id="2-1-2-MySQL内部的枚举类型（单选）和集合（多选）类型"><a href="#2-1-2-MySQL内部的枚举类型（单选）和集合（多选）类型" class="headerlink" title="2.1.2 MySQL内部的枚举类型（单选）和集合（多选）类型"></a>2.1.2 MySQL内部的枚举类型（单选）和集合（多选）类型</h3><p>但是因为维护成本较高因此不常使用，使用<strong>关联表</strong>的方式来替代<code>enum</code></p><h2 id="2-2-原则：定长和非定长数据类型的选择"><a href="#2-2-原则：定长和非定长数据类型的选择" class="headerlink" title="2.2 原则：定长和非定长数据类型的选择"></a>2.2 原则：定长和非定长数据类型的选择</h2><blockquote><p>decimal不会损失精度，存储空间会随数据的增大而增大。double占用固定空间，较大数的存储会损失精度。非定长的还有varchar、text</p></blockquote><h3 id="2-2-1-金额"><a href="#2-2-1-金额" class="headerlink" title="2.2.1 金额"></a>2.2.1 金额</h3><blockquote><p>对数据的精度要求较高，小数的运算和存储存在精度问题（不能将所有小数转换成二进制）</p></blockquote><h3 id="2-2-2-定点数decimal"><a href="#2-2-2-定点数decimal" class="headerlink" title="2.2.2 定点数decimal"></a>2.2.2 定点数decimal</h3><p><code>price decimal(8,2)</code>有2位小数的定点数，定点数支持很大的数（甚至是超过<code>int,bigint</code>存储范围的数）</p><h3 id="2-2-3-小单位大数额避免出现小数"><a href="#2-2-3-小单位大数额避免出现小数" class="headerlink" title="2.2.3 小单位大数额避免出现小数"></a>2.2.3 小单位大数额避免出现小数</h3><p>元-&gt;分</p><h3 id="2-2-4字符串存储"><a href="#2-2-4字符串存储" class="headerlink" title="2.2.4字符串存储"></a>2.2.4字符串存储</h3><p>定长<code>char</code>，非定长<code>varchar、text</code>（上限65535，其中<code>varchar</code>还会消耗1-3字节记录长度，而<code>text</code>使用额外空间记录长度）</p><h2 id="2-3-原则：尽可能选择小的数据类型和指定短的长度"><a href="#2-3-原则：尽可能选择小的数据类型和指定短的长度" class="headerlink" title="2.3 原则：尽可能选择小的数据类型和指定短的长度"></a>2.3 原则：尽可能选择小的数据类型和指定短的长度</h2><h2 id="2-4-原则：尽可能使用-not-null"><a href="#2-4-原则：尽可能使用-not-null" class="headerlink" title="2.4 原则：尽可能使用 not null"></a>2.4 原则：尽可能使用 not null</h2><p>非<code>null</code>字段的处理要比<code>null</code>字段的处理高效些！且不需要判断是否为<code>null</code>。</p><p><code>null</code>在MySQL中，不好处理，存储需要额外空间，运算也需要特殊的运算符。如<code>select null = null</code>和<code>select null &lt;&gt; null</code>（<code>&lt;&gt;</code>为不等号）有着同样的结果，只能通过<code>is null</code>和<code>is not null</code>来判断字段是否为<code>null</code>。</p><p>如何存储？MySQL中每条记录都需要额外的存储空间，表示每个字段是否为<code>null</code>。因此通常使用特殊的数据进行占位，比如<code>int not null default 0</code>、<code>string not null default ‘’</code></p><h2 id="2-5-原则：字段注释要完整，见名知意"><a href="#2-5-原则：字段注释要完整，见名知意" class="headerlink" title="2.5 原则：字段注释要完整，见名知意"></a>2.5 原则：字段注释要完整，见名知意</h2><h2 id="2-6-原则：单表字段不宜过多"><a href="#2-6-原则：单表字段不宜过多" class="headerlink" title="2.6 原则：单表字段不宜过多"></a>2.6 原则：单表字段不宜过多</h2><p>二三十个就极限了</p><h2 id="2-7-原则：可以预留字段"><a href="#2-7-原则：可以预留字段" class="headerlink" title="2.7 原则：可以预留字段"></a>2.7 原则：可以预留字段</h2><blockquote><p>在使用以上原则之前首先要满足业务需求</p></blockquote><h1 id="3-关联表的设计"><a href="#3-关联表的设计" class="headerlink" title="3. 关联表的设计"></a>3. 关联表的设计</h1><blockquote><p>外键<code>foreign key</code>只能实现一对一或一对多的映射</p></blockquote><h2 id="3-1-一对一"><a href="#3-1-一对一" class="headerlink" title="3.1 一对一"></a>3.1 一对一</h2><p>如商品的基本信息（<code>item</code>）和商品的详细信息（<code>item_intro</code>），通常使用相同的主键或者增加一个外键字段（<code>item_id</code>）</p><p><img src="./images/loading.gif" data-original="../images/posts/Mysql%E4%BC%98%E5%8C%96%E9%9D%A2%E8%AF%95-2020-05-25/392ee4d4c0f8fdd86adc4b9abc3ad6f5.png" alt="表关系-一对一"></p><h2 id="3-2-一对多"><a href="#3-2-一对多" class="headerlink" title="3.2 一对多"></a>3.2 一对多</h2><p>使用外键</p><p><img src="./images/loading.gif" data-original="../images/posts/Mysql%E4%BC%98%E5%8C%96%E9%9D%A2%E8%AF%95-2020-05-25/1e4a36daf517c88d356cbc3c8dbd3ea8.png" alt="表关系-一对多"></p><h2 id="3-3-多对多"><a href="#3-3-多对多" class="headerlink" title="3.3 多对多"></a>3.3 多对多</h2><p>单独新建一张表将多对多拆分成两个一对多</p><p><img src="./images/loading.gif" data-original="../images/posts/Mysql%E4%BC%98%E5%8C%96%E9%9D%A2%E8%AF%95-2020-05-25/55f5505ecfd67ae14e8c81da6ad7fd55.png" alt="表关系-多对多"></p><h1 id="4-范式-Normal-Format"><a href="#4-范式-Normal-Format" class="headerlink" title="4. 范式 Normal Format"></a>4. 范式 Normal Format</h1><blockquote><p>数据表的设计规范，一套越来越严格的规范体系（如果需要满足N范式，首先要满足N-1范式）。N</p></blockquote><h2 id="4-1-第一范式1NF：字段原子性"><a href="#4-1-第一范式1NF：字段原子性" class="headerlink" title="4.1 第一范式1NF：字段原子性"></a>4.1 第一范式1NF：字段原子性</h2><p>字段原子性，字段不可再分割。</p><blockquote><p>关系型数据库，默认满足第一范式</p></blockquote><p>注意比较容易出错的一点，在一对多的设计中使用逗号分隔多个外键，这种方法虽然存储方便，但不利于维护和索引（比如查找带标签<code>java</code>的文章）</p><h2 id="4-2-第二范式：消除对主键的部分依赖"><a href="#4-2-第二范式：消除对主键的部分依赖" class="headerlink" title="4.2 第二范式：消除对主键的部分依赖"></a>4.2 第二范式：消除对主键的部分依赖</h2><blockquote><p>即在表中加上一个与业务逻辑无关的字段作为主键</p></blockquote><p>主键：可以唯一标识记录的字段或者字段集合。</p><table><thead><tr><th>course_name</th><th>course_class</th><th>weekday（周几）</th><th>course_teacher</th></tr></thead><tbody><tr><td>MySQL</td><td>教育大楼1525</td><td>周一</td><td>张三</td></tr><tr><td>Java</td><td>教育大楼1521</td><td>周三</td><td>李四</td></tr><tr><td>MySQL</td><td>教育大楼1521</td><td>周五</td><td>张三</td></tr></tbody></table><p>依赖：A字段可以确定B字段，则B字段依赖A字段。比如知道了下一节课是数学课，就能确定任课老师是谁。于是<strong>周几</strong>和<strong>下一节课</strong>和就能构成复合主键，能够确定去哪个教室上课，任课老师是谁等。但我们常常增加一个<code>id</code>作为主键，而消除对主键的部分依赖。</p><p>对主键的部分依赖：某个字段依赖复合主键中的一部分。</p><p>解决方案：新增一个独立字段作为主键。</p><h2 id="4-3-第三范式：消除对主键的传递依赖"><a href="#4-3-第三范式：消除对主键的传递依赖" class="headerlink" title="4.3 第三范式：消除对主键的传递依赖"></a>4.3 第三范式：消除对主键的传递依赖</h2><p>传递依赖：B字段依赖于A，C字段又依赖于B。比如上例中，任课老师是谁取决于是什么课，是什么课又取决于主键<code>id</code>。因此需要将此表拆分为两张表日程表和课程表（独立数据独立建表）：</p><table><thead><tr><th>id</th><th>weekday</th><th>course_class</th><th>course_id</th></tr></thead><tbody><tr><td>1001</td><td>周一</td><td>教育大楼1521</td><td>3546</td></tr></tbody></table><table><thead><tr><th>course_id</th><th>course_name</th><th>course_teacher</th></tr></thead><tbody><tr><td>3546</td><td>Java</td><td>张三</td></tr></tbody></table><p>这样就减少了数据的冗余（即使周一至周日每天都有Java课，也只是<code>course_id:3546</code>出现了7次）</p><h1 id="5-存储引擎选择"><a href="#5-存储引擎选择" class="headerlink" title="5. 存储引擎选择"></a>5. 存储引擎选择</h1><blockquote><p>早期问题：如何选择MyISAM和Innodb？</p><p>现在不存在这个问题了，Innodb不断完善，从各个方面赶超MyISAM，也是MySQL默认使用的。</p></blockquote><p>存储引擎Storage engine：MySQL中的数据、索引以及其他对象是如何存储的，是一套文件系统的实现。</p><h2 id="5-1-功能差异"><a href="#5-1-功能差异" class="headerlink" title="5.1 功能差异"></a>5.1 功能差异</h2><pre><code>show engines</code></pre><table><thead><tr><th>Engine</th><th>Support</th><th>Comment</th></tr></thead><tbody><tr><td>InnoDB</td><td>DEFAULT</td><td><strong>Supports transactions, row-level locking, and foreign keys</strong></td></tr><tr><td>MyISAM</td><td>YES</td><td><strong>MyISAM storage engine</strong></td></tr></tbody></table><h2 id="5-2-存储差异"><a href="#5-2-存储差异" class="headerlink" title="5.2 存储差异"></a>5.2 存储差异</h2><table><thead><tr><th></th><th>MyISAM</th><th>Innodb</th></tr></thead><tbody><tr><td>文件格式</td><td>数据和索引是分别存储的，数据<code>.MYD</code>，索引<code>.MYI</code></td><td>数据和索引是集中存储的，<code>.ibd</code></td></tr><tr><td>文件能否移动</td><td>能，一张表就对应<code>.frm</code>、<code>MYD</code>、<code>MYI</code>3个文件</td><td>否，因为关联的还有<code>data</code>下的其它文件</td></tr><tr><td>记录存储顺序</td><td>按记录插入顺序保存</td><td>按主键大小有序插入</td></tr><tr><td>空间碎片（删除记录并<code>flush table 表名</code>之后，表文件大小不变）</td><td>产生。定时整理：使用命令<code>optimize table 表名</code>实现</td><td>不产生</td></tr><tr><td>事务</td><td>不支持</td><td>支持</td></tr><tr><td>外键</td><td>不支持</td><td>支持</td></tr><tr><td>锁支持（锁是避免资源争用的一个机制，MySQL锁对用户几乎是透明的）</td><td>表级锁定</td><td>行级锁定、表级锁定，锁定力度小并发能力高</td></tr></tbody></table><blockquote><p>锁扩展</p><p>表级锁（<code>table-level lock</code>）：<code>lock tables &lt;table_name1&gt;,&lt;table_name2&gt;... read/write</code>，<code>unlock tables &lt;table_name1&gt;,&lt;table_name2&gt;...</code>。其中<code>read</code>是共享锁，一旦锁定任何客户端都不可读；<code>write</code>是独占/写锁，只有加锁的客户端可读可写，其他客户端既不可读也不可写。锁定的是一张表或几张表。</p><p>行级锁（<code>row-level lock</code>）：锁定的是一行或几行记录。共享锁：<code>select * from &lt;table_name&gt; where &lt;条件&gt; LOCK IN SHARE MODE;</code>，对查询的记录增加共享锁；<code>select * from &lt;table_name&gt; where &lt;条件&gt; FOR UPDATE;</code>，对查询的记录增加排他锁。这里<strong>值得注意</strong>的是：<code>innodb</code>的行锁，其实是一个子范围锁，依据条件锁定部分范围，而不是就映射到具体的行上，因此还有一个学名：间隙锁。比如<code>select * from stu where id &lt; 20 LOCK IN SHARE MODE</code>会锁定<code>id</code>在<code>20</code>左右以下的范围，你可能无法插入<code>id</code>为<code>18</code>或<code>22</code>的一条新纪录。</p></blockquote><h2 id="5-3-选择依据"><a href="#5-3-选择依据" class="headerlink" title="5.3 选择依据"></a>5.3 选择依据</h2><p>如果没有特别的需求，使用默认的<code>Innodb</code>即可。</p><p>MyISAM：以读写插入为主的应用程序，比如博客系统、新闻门户网站。</p><p>Innodb：更新（删除）操作频率也高，或者要保证数据的完整性；并发量高，支持事务和外键保证数据完整性。比如OA自动化办公系统。</p><h1 id="6-索引"><a href="#6-索引" class="headerlink" title="6. 索引"></a>6. 索引</h1><blockquote><p>关键字与数据的映射关系称为索引（==包含关键字和对应的记录在磁盘中的地址==）。关键字是从数据当中提取的用于标识、检索数据的特定内容。</p></blockquote><h2 id="6-1-索引检索为什么快？"><a href="#6-1-索引检索为什么快？" class="headerlink" title="6.1 索引检索为什么快？"></a>6.1 索引检索为什么快？</h2><ul><li>关键字相对于数据本身，<strong>数据量小</strong></li><li>关键字是<strong>有序</strong>的，二分查找可快速确定位置</li><li>图书馆为每本书都加了索引号（类别-楼层-书架）、字典为词语解释按字母顺序编写目录等都用到了索引。</li></ul><h2 id="6-2-MySQL中索引类型"><a href="#6-2-MySQL中索引类型" class="headerlink" title="6.2 MySQL中索引类型"></a>6.2 MySQL中索引类型</h2><blockquote><p><strong>普通索引</strong>（<code>key</code>），<strong>唯一索引</strong>（<code>unique key</code>），<strong>主键索引</strong>（<code>primary key</code>），<strong>全文索引</strong>（<code>fulltext key</code>）</p></blockquote><p>三种索引的索引方式是一样的，只不过对索引的关键字有不同的限制：</p><ul><li>普通索引：对关键字没有限制</li><li>唯一索引：要求记录提供的关键字不能重复</li><li>主键索引：要求关键字唯一且不为null</li></ul><h2 id="6-3-索引管理语法"><a href="#6-3-索引管理语法" class="headerlink" title="6.3 索引管理语法"></a>6.3 索引管理语法</h2><h3 id="6-3-1-查看索引"><a href="#6-3-1-查看索引" class="headerlink" title="6.3.1 查看索引"></a>6.3.1 查看索引</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">table</span> 表名<span class="token punctuation">`</span>：</code></pre><p><img src="./images/loading.gif" data-original="../images/posts/Mysql%E4%BC%98%E5%8C%96%E9%9D%A2%E8%AF%95-2020-05-25/1680d23c8dfb3d4a.jpg" alt=""></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">desc</span> 表名</code></pre><p><img src="./images/loading.gif" data-original="../images/posts/Mysql%E4%BC%98%E5%8C%96%E9%9D%A2%E8%AF%95-2020-05-25/1680d23c8e1fe07b.jpg" alt=""></p><h3 id="6-3-2-创建索引"><a href="#6-3-2-创建索引" class="headerlink" title="6.3.2 创建索引"></a>6.3.2 创建索引</h3><h4 id="6-3-2-1-创建表之后建立索引"><a href="#6-3-2-1-创建表之后建立索引" class="headerlink" title="6.3.2.1 创建表之后建立索引"></a>6.3.2.1 创建表之后建立索引</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">TABLE</span> user_index<span class="token punctuation">(</span>    id <span class="token keyword">int</span> <span class="token keyword">auto_increment</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    first_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    last_name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    id_card <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    information <span class="token keyword">text</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 更改表结构</span><span class="token keyword">alter</span> <span class="token keyword">table</span> user_index<span class="token comment" spellcheck="true">-- 创建一个first_name和last_name的复合索引，并命名为name</span><span class="token keyword">add</span> <span class="token keyword">key</span> name <span class="token punctuation">(</span>first_name<span class="token punctuation">,</span>last_name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">-- 创建一个id_card的唯一索引，默认以字段名作为索引名</span><span class="token keyword">add</span> <span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>id_card<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">-- 鸡肋，全文索引不支持中文</span><span class="token keyword">add</span> FULLTEXT <span class="token keyword">KEY</span> <span class="token punctuation">(</span>information<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">table</span> user_index</code></pre><p><img src="./images/loading.gif" data-original="../images/posts/Mysql%E4%BC%98%E5%8C%96%E9%9D%A2%E8%AF%95-2020-05-25/1680d23c8e3c57fc" alt=""></p><h4 id="6-3-2-2-创建表时指定索引"><a href="#6-3-2-2-创建表时指定索引" class="headerlink" title="6.3.2.2 创建表时指定索引"></a>6.3.2.2 创建表时指定索引</h4><pre class=" language-mysql"><code class="language-mysql">CREATE TABLE user_index2 (    id INT auto_increment PRIMARY KEY,    first_name VARCHAR (16),    last_name VARCHAR (16),    id_card VARCHAR (18),    information text,    KEY name (first_name, last_name),    FULLTEXT KEY (information),    UNIQUE KEY (id_card));</code></pre><h3 id="6-3-3-删除索引"><a href="#6-3-3-删除索引" class="headerlink" title="6.3.3 删除索引"></a>6.3.3 删除索引</h3><p>根据索引名删除普通索引、唯一索引、全文索引：<code>alter table 表名 drop KEY 索引名</code></p><pre class=" language-mysql"><code class="language-mysql">alter table user_index drop KEY name;alter table user_index drop KEY id_card;alter table user_index drop KEY information;</code></pre><p>删除主键索引：<code>alter table 表名 drop primary key</code>（因为主键只有一个）。这里值得注意的是，如果主键自增长，那么不能直接执行此操作（自增长依赖于主键索引）：</p><p><img src="./images/loading.gif" data-original="../images/posts/Mysql%E4%BC%98%E5%8C%96%E9%9D%A2%E8%AF%95-2020-05-25/1680d23c8e49f5b3.jpg" alt=""></p><p>需要取消自增长再行删除：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> user_index<span class="token comment" spellcheck="true">-- 重新定义字段</span><span class="token keyword">MODIFY</span> id <span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">drop</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span></code></pre><p>但通常不会删除主键，因为设计主键一定与业务逻辑无关。</p><h2 id="6-4-执行计划explain"><a href="#6-4-执行计划explain" class="headerlink" title="6.4 执行计划explain"></a>6.4 执行计划explain</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> innodb1 <span class="token punctuation">(</span>    id <span class="token keyword">INT</span> <span class="token keyword">auto_increment</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>    first_name <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    last_name <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    id_card <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    information <span class="token keyword">text</span><span class="token punctuation">,</span>    <span class="token keyword">KEY</span> name <span class="token punctuation">(</span>first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">)</span><span class="token punctuation">,</span>    FULLTEXT <span class="token keyword">KEY</span> <span class="token punctuation">(</span>information<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>id_card<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> innodb1 <span class="token punctuation">(</span>first_name<span class="token punctuation">,</span>last_name<span class="token punctuation">,</span>id_card<span class="token punctuation">,</span>information<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'张'</span><span class="token punctuation">,</span><span class="token string">'三'</span><span class="token punctuation">,</span><span class="token string">'1001'</span><span class="token punctuation">,</span><span class="token string">'华山派'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>我们可以通过<code>explain selelct</code>来分析SQL语句执行前的执行计划：</p><p><img src="./images/loading.gif" data-original="../images/posts/Mysql%E4%BC%98%E5%8C%96%E9%9D%A2%E8%AF%95-2020-05-25/1680d23c8e6ec8e1.jpg" alt=""></p><p>由上图可看出此SQL语句是按照主键索引来检索的。</p><p>执行计划是：当执行SQL语句时，首先会分析、优化，形成执行计划，在按照执行计划执行。</p><h2 id="6-5-索引使用场景（重点）"><a href="#6-5-索引使用场景（重点）" class="headerlink" title="6.5 索引使用场景（重点）"></a>6.5 索引使用场景（重点）</h2><h3 id="6-5-1-where"><a href="#6-5-1-where" class="headerlink" title="6.5.1 where"></a>6.5.1 where</h3><p><img src="./images/loading.gif" data-original="../images/posts/Mysql%E4%BC%98%E5%8C%96%E9%9D%A2%E8%AF%95-2020-05-25/1680d23cfe1a1fa5.jpg" alt=""></p><p>上图中，根据<code>id</code>查询记录，因为<code>id</code>字段仅建立了主键索引，因此此SQL执行可选的索引只有主键索引，如果有多个，最终会选一个较优的作为检索的依据。</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 增加一个没有建立索引的字段</span><span class="token keyword">alter</span> <span class="token keyword">table</span> innodb1 <span class="token keyword">add</span> sex char<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 按sex检索时可选的索引为null</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> innodb1 <span class="token keyword">where</span> sex<span class="token operator">=</span><span class="token string">'男'</span><span class="token punctuation">;</span></code></pre><p><img src="./images/loading.gif" data-original="../images/posts/Mysql%E4%BC%98%E5%8C%96%E9%9D%A2%E8%AF%95-2020-05-25/1680d23d1254fd85.jpg" alt=""></p><blockquote><p>可以尝试在一个字段未建立索引时，根据该字段查询的效率，然后对该字段建立索引（<code>alter table 表名 add index(字段名)</code>），同样的SQL执行的效率，你会发现查询效率会有明显的提升（数据量越大越明显）。</p></blockquote><h3 id="6-5-2-order-by"><a href="#6-5-2-order-by" class="headerlink" title="6.5.2 order by"></a>6.5.2 order by</h3><p>当我们使用<code>order by</code>将查询结果按照某个字段排序时，如果该字段没有建立索引，那么执行计划会将查询出的所有数据使用外部排序（将数据从硬盘分批读取到内存使用内部排序，最后合并排序结果），这个操作是很影响性能的，因为需要将查询涉及到的所有数据从磁盘中读到内存（如果单条数据过大或者数据量过多都会降低效率），更无论读到内存之后的排序了。</p><p>但是如果我们对该字段建立索引<code>alter table 表名 add index(字段名)</code>，那么由于索引本身是有序的，因此直接按照索引的顺序和映射关系逐条取出数据即可。而且如果分页的，那么只用<strong>取出索引表某个范围内的索引对应的数据</strong>，而不用像上述那<strong>取出所有数据</strong>进行排序再返回某个范围内的数据。（从磁盘取数据是最影响性能的）</p><h3 id="6-5-3-join"><a href="#6-5-3-join" class="headerlink" title="6.5.3 join"></a>6.5.3 join</h3><blockquote><p>对<code>join</code>语句匹配关系（<code>on</code>）涉及的字段建立索引能够提高效率</p></blockquote><h3 id="6-5-4-索引覆盖"><a href="#6-5-4-索引覆盖" class="headerlink" title="6.5.4 索引覆盖"></a>6.5.4 索引覆盖</h3><p>如果要查询的字段都建立过索引，那么引擎会直接在索引表中查询而不会访问原始数据（否则只要有一个字段没有建立索引就会做全表扫描），这叫索引覆盖。因此我们需要尽可能的在<code>select</code>后==只写必要的查询字段==，以增加索引覆盖的几率。</p><p>这里值得注意的是不要想着为每个字段建立索引，因为优先使用索引的优势就在于其体积小。</p><h2 id="6-6-语法细节（要点）"><a href="#6-6-语法细节（要点）" class="headerlink" title="6.6 语法细节（要点）"></a>6.6 语法细节（要点）</h2><blockquote><p>在满足索引使用的场景下（<code>where/order by/join on</code>或索引覆盖），索引也不一定被使用</p></blockquote><h3 id="6-6-1-字段要独立出现"><a href="#6-6-1-字段要独立出现" class="headerlink" title="6.6.1 字段要独立出现"></a>6.6.1 字段要独立出现</h3><p>比如下面两条SQL语句在语义上相同，但是第一条会使用主键索引而第二条不会。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">20</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> id<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span></code></pre><h3 id="6-6-2-like查询，不能以通配符开头"><a href="#6-6-2-like查询，不能以通配符开头" class="headerlink" title="6.6.2 like查询，不能以通配符开头"></a>6.6.2 <code>like</code>查询，不能以通配符开头</h3><p>比如搜索标题包含<code>mysql</code>的文章：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> article <span class="token keyword">where</span> title <span class="token operator">like</span> <span class="token string">'%mysql%'</span><span class="token punctuation">;</span></code></pre><p>这种SQL的执行计划用不了索引（<code>like</code>语句匹配表达式以通配符开头），因此只能做全表扫描，效率极低，在实际工程中几乎不被采用。而一般会使用第三方提供的支持中文的全文索引来做。</p><p>但是 <strong>关键字查询</strong> 热搜提醒功能还是可以做的，比如键入<code>mysql</code>之后提醒<code>mysql 教程</code>、<code>mysql 下载</code>、<code>mysql 安装步骤</code>等。用到的语句是：</p><pre class=" language-mysql"><code class="language-mysql">select * from article where title like 'mysql%';</code></pre><p>这种<code>like</code>是可以利用索引的（当然前提是<code>title</code>字段建立过索引）。</p><h3 id="6-6-3-复合索引只对第一个字段有效"><a href="#6-6-3-复合索引只对第一个字段有效" class="headerlink" title="6.6.3  复合索引只对第一个字段有效"></a>6.6.3  复合索引只对第一个字段有效</h3><p>建立复合索引：</p><pre class=" language-mysql"><code class="language-mysql">alter table person add index(first_name,last_name);</code></pre><p>其原理就是将索引先按照从<code>first_name</code>中提取的关键字排序，如果无法确定先后再按照从<code>last_name</code>提取的关键字排序，也就是说该索引表只是按照记录的<code>first_name</code>字段值有序。</p><p>因此<code>select * from person where first_name = ?</code>是可以利用索引的，而<code>select * from person where last_name = ?</code>无法利用索引。</p><blockquote><p>那么该复合索引的应用场景是什么？<strong>组合查询</strong></p></blockquote><p>比如对于<code>select * person from first_name = ? and last_name = ?</code>，复合索引就比对<code>first_name</code>和<code>last_name</code>单独建立索引要高效些。很好理解，复合索引首先二分查找与<code>first_name = ?</code>匹配的记录，再在这些记录中二分查找与<code>last_name</code>匹配的记录，只涉及到一张索引表。而分别单独建立索引则是在<code>first_name</code>索引表中二分找出与<code>first_name = ?</code>匹配的记录，再在<code>last_name</code>索引表中二分找出与<code>last_name = ?</code>的记录，两者取交集。</p><h3 id="6-6-4-or，两边条件都有索引可用"><a href="#6-6-4-or，两边条件都有索引可用" class="headerlink" title="6.6.4 or，两边条件都有索引可用"></a>6.6.4 or，两边条件都有索引可用</h3><blockquote><p>一但有一边无索引可用就会导致整个SQL语句的全表扫描</p></blockquote><h3 id="6-6-5-状态值，不容易使用到索引"><a href="#6-6-5-状态值，不容易使用到索引" class="headerlink" title="6.6.5 状态值，不容易使用到索引"></a>6.6.5 状态值，不容易使用到索引</h3><p>如性别、支付状态等状态值字段往往只有极少的几种取值可能，这种字段即使建立索引，也往往利用不上。这是因为，一个状态值可能匹配大量的记录，这种情况MySQL会认为利用索引比全表扫描的效率低，从而弃用索引。索引是随机访问磁盘，而全表扫描是顺序访问磁盘，这就好比有一栋20层楼的写字楼，楼底下的索引牌上写着某个公司对应不相邻的几层楼，你去公司找人，与其按照索引牌的提示去其中一层楼没找到再下来看索引牌再上楼，不如从1楼挨个往上找到顶楼。</p><h2 id="6-7-如何创建索引"><a href="#6-7-如何创建索引" class="headerlink" title="6.7 如何创建索引"></a>6.7 如何创建索引</h2><ul><li>建立基础索引：在<code>where、order by、join</code>字段上建立索引。</li><li>优化，组合索引：基于业务逻辑<ul><li>如果条件经常性出现在一起，那么可以考虑将多字段索引升级为<strong>复合索引</strong></li><li>如果通过增加个别字段的索引，就可以出现<strong>索引覆盖</strong>，那么可以考虑为该字段建立索引</li><li>查询时，不常用到的索引，应该删除掉</li></ul></li></ul><h2 id="6-8-前缀索引"><a href="#6-8-前缀索引" class="headerlink" title="6.8 前缀索引"></a>6.8 前缀索引</h2><p>语法：<code>index(field(10))</code>，使用字段值的前10个字符建立索引，默认是使用字段的全部内容建立索引。</p><p>前提：前缀的标识度高。比如密码就适合建立前缀索引，因为密码几乎各不相同。</p><p><strong>实操的难度</strong>：在于前缀截取的长度。</p><p>我们可以利用<code>select count(*)/count(distinct left(password,prefixLen));</code>，通过从调整<code>prefixLen</code>的值（从1自增）查看不同前缀长度的一个平均匹配度，接近1时就可以了（表示一个密码的前<code>prefixLen</code>个字符几乎能确定唯一一条记录）</p><h2 id="6-9-索引的存储结构"><a href="#6-9-索引的存储结构" class="headerlink" title="6.9 索引的存储结构"></a>6.9 索引的存储结构</h2><h3 id="6-9-1-BTree"><a href="#6-9-1-BTree" class="headerlink" title="6.9.1 BTree"></a>6.9.1 BTree</h3><p>btree（多路平衡查找树）是一种广泛应用于==磁盘上实现索引功能==的一种数据结构，也是大多数数据库索引表的实现。</p><p>以<code>add index(first_name,last_name)</code>为例：</p><p><img src="./images/loading.gif" data-original="../images/posts/Mysql%E4%BC%98%E5%8C%96%E9%9D%A2%E8%AF%95-2020-05-25/1680d23d20c9eb0c.jpg" alt="img"></p><p>BTree的一个node可以存储多个关键字，node的大小取决于计算机的文件系统，因此我们可以通过减小索引字段的长度使结点存储更多的关键字。如果node中的关键字已满，那么可以通过每个关键字之间的子节点指针来拓展索引表，但是不能破坏结构的有序性，比如按照<code>first_name</code>第一有序、<code>last_name</code>第二有序的规则，新添加的<code>韩香</code>就可以插到<code>韩康</code>之后。<code>白起 &lt; 韩飞 &lt; 韩康 &lt; 李世民 &lt; 赵奢 &lt; 李寻欢 &lt; 王语嫣 &lt; 杨不悔</code>。这与二叉搜索树的思想是一样的，只不过二叉搜索树的查找效率是<code>log(2,N)</code>（以2为底N的对数），而BTree的查找效率是<code>log(x,N)</code>（其中x为node的关键字数量，可以达到1000以上）。</p><p>从<code>log(1000+,N)</code>可以看出，少量的磁盘读取即可做到大量数据的遍历，这也是btree的设计目的。</p><h3 id="6-9-2-B-Tree聚簇结构"><a href="#6-9-2-B-Tree聚簇结构" class="headerlink" title="6.9.2 B+Tree聚簇结构"></a>6.9.2 B+Tree聚簇结构</h3><p>聚簇结构（也是在BTree上升级改造的）中，关键字和记录是存放在一起的。</p><p>在MySQL中，仅仅只有<code>Innodb</code>的==主键索引为聚簇结构==，其它的索引包括<code>Innodb</code>的非主键索引都是典型的BTree结构。</p><h3 id="6-9-3-哈希索引"><a href="#6-9-3-哈希索引" class="headerlink" title="6.9.3 哈希索引"></a>6.9.3 哈希索引</h3><p>在索引被载入内存时，使用哈希结构来存储。</p><h1 id="7-查询缓存"><a href="#7-查询缓存" class="headerlink" title="7. 查询缓存"></a>7. 查询缓存</h1><blockquote><p>缓存<code>select</code>语句的查询结果</p></blockquote><h2 id="7-1-在配置文件中开启缓存"><a href="#7-1-在配置文件中开启缓存" class="headerlink" title="7.1 在配置文件中开启缓存"></a>7.1 在配置文件中开启缓存</h2><p>windows上是<code>my.ini</code>，linux上是<code>my.cnf</code></p><p>在<code>[mysqld]</code>段中配置<code>query_cache_type</code>：</p><ul><li>0：不开启</li><li>1：开启，默认缓存所有，需要在SQL语句中增加<code>select sql-no-cache</code>提示来放弃缓存</li><li>2：开启，默认都不缓存，需要在SQL语句中增加<code>select sql-cache</code>来主动缓存（==常用==）</li></ul><p>更改配置后需要重启以使配置生效，重启后可通过<code>show variables like ‘query_cache_type’;</code>来查看：</p><pre class=" language-mysql"><code class="language-mysql">show variables like 'query_cache_type';query_cache_type    DEMAND</code></pre><h2 id="7-2-在客户端设置缓存大小"><a href="#7-2-在客户端设置缓存大小" class="headerlink" title="7.2 在客户端设置缓存大小"></a>7.2 在客户端设置缓存大小</h2><p>通过配置项<code>query_cache_size</code>来设置：</p><pre class=" language-mysql"><code class="language-mysql">show variables like 'query_cache_size';query_cache_size    0set global query_cache_size=64*1024*1024;show variables like 'query_cache_size';query_cache_size    67108864</code></pre><h2 id="7-2-将查询结果缓存"><a href="#7-2-将查询结果缓存" class="headerlink" title="7.2 将查询结果缓存"></a>7.2 将查询结果缓存</h2><pre class=" language-mysql"><code class="language-mysql">select sql_cache * from user;</code></pre><h2 id="7-3-重置缓存"><a href="#7-3-重置缓存" class="headerlink" title="7.3 重置缓存"></a>7.3 重置缓存</h2><pre class=" language-mysql"><code class="language-mysql">reset query cache;</code></pre><h2 id="7-4-缓存失效问题（大问题）"><a href="#7-4-缓存失效问题（大问题）" class="headerlink" title="7.4 缓存失效问题（大问题）"></a>7.4 缓存失效问题（大问题）</h2><p>当数据表改动时，基于该数据表的任何缓存都会被删除。（表层面的管理，不是记录层面的管理，因此失效率较高）</p><h2 id="7-5-注意事项"><a href="#7-5-注意事项" class="headerlink" title="7.5 注意事项"></a>7.5 注意事项</h2><ol><li>应用程序，不应该关心<code>query cache</code>的使用情况。可以尝试使用，但不能由<code>query cache</code>决定业务逻辑，因为<code>query cache</code>由DBA来管理。</li><li>缓存是以SQL语句为key存储的，因此即使SQL语句功能相同，但如果多了一个空格或者大小写有差异都会导致匹配不到缓存。</li></ol><h1 id="8-分区"><a href="#8-分区" class="headerlink" title="8. 分区"></a>8. 分区</h1><p>一般情况下我们创建的表对应一组存储文件，使用<code>MyISAM</code>存储引擎时是一个<code>.MYI</code>和<code>.MYD</code>文件，使用<code>Innodb</code>存储引擎时是一个<code>.ibd</code>和<code>.frm</code>（表结构）文件。</p><p>当数据量较大时（一般千万条记录级别以上），MySQL的性能就会开始下降，这时我们就需要将数据分散到多组存储文件，==保证其单个文件的执行效率==。</p><p>最常见的分区方案是按<code>id</code>分区，如下将<code>id</code>的哈希值对10取模将数据均匀分散到10个<code>.ibd</code>存储文件中：</p><pre class=" language-mysql"><code class="language-mysql">create table article(    id int auto_increment PRIMARY KEY,    title varchar(64),    content text)PARTITION by HASH(id) PARTITIONS 10</code></pre><p>查看<code>data</code>目录：</p><p><img src="./images/loading.gif" data-original="../images/posts/Mysql%E4%BC%98%E5%8C%96%E9%9D%A2%E8%AF%95-2020-05-25/1680d23d2d7db55e.jpg" alt=""></p><blockquote><p><strong>服务端的表分区对于客户端是透明的</strong>，客户端还是照常插入数据，但服务端会按照分区算法分散存储数据。</p></blockquote><h2 id="8-1-MySQL提供的分区算法"><a href="#8-1-MySQL提供的分区算法" class="headerlink" title="8.1 MySQL提供的分区算法"></a>8.1 MySQL提供的分区算法</h2><blockquote><p><strong>分区依据的字段必须是主键的一部分</strong>，分区是为了快速定位数据，因此该字段的搜索频次较高应作为强检索字段，否则依照该字段分区毫无意义</p></blockquote><h3 id="8-1-1-hash-field"><a href="#8-1-1-hash-field" class="headerlink" title="8.1.1 hash(field)"></a>8.1.1 hash(field)</h3><p>相同的输入得到相同的输出。输出的结果跟输入是否具有规律无关。==仅适用于整型字段==</p><h3 id="8-1-2-key-field"><a href="#8-1-2-key-field" class="headerlink" title="8.1.2 key(field)"></a>8.1.2 key(field)</h3><p>和<code>hash(field)</code>的性质一样，只不过<code>key</code>是==处理字符串==的，比<code>hash()</code>多了一步从字符串中计算出一个整型在做取模操作。</p><pre class=" language-mysql"><code class="language-mysql">create table article_key(    id int auto_increment,    title varchar(64),    content text,    PRIMARY KEY (id,title)    -- 要求分区依据字段必须是主键的一部分)PARTITION by KEY(title) PARTITIONS 10</code></pre><h3 id="8-1-3-range算法"><a href="#8-1-3-range算法" class="headerlink" title="8.1.3 range算法"></a>8.1.3 range算法</h3><p>是一种<strong>条件分区</strong>算法，按照数据大小范围分区（将数据使用某种条件，分散到不同的分区中）。</p><p>如下，按文章的发布时间将数据按照2018年8月、9月、10月分区存放：</p><pre class=" language-mysql"><code class="language-mysql">create table article_range(    id int auto_increment,    title varchar(64),    content text,    created_time int,    -- 发布时间到1970-1-1的毫秒数    PRIMARY KEY (id,created_time)    -- 要求分区依据字段必须是主键的一部分)charset=utf8PARTITION BY RANGE(created_time)(    PARTITION p201808 VALUES less than (1535731199),    -- select UNIX_TIMESTAMP('2018-8-31 23:59:59')    PARTITION p201809 VALUES less than (1538323199),    -- 2018-9-30 23:59:59    PARTITION p201810 VALUES less than (1541001599)    -- 2018-10-31 23:59:59);</code></pre><p><img src="./images/loading.gif" data-original="../images/posts/Mysql%E4%BC%98%E5%8C%96%E9%9D%A2%E8%AF%95-2020-05-25/1680d23d2d848474.jpg" alt="img"></p><p>注意：条件运算符只能使用==less than==，这以为着较小的范围要放在前面，比如上述<code>p201808,p201819,p201810</code>分区的定义顺序依照<code>created_time</code>数值范围从小到大，不能颠倒。</p><pre class=" language-mysql"><code class="language-mysql">insert into article_range values(null,'MySQL优化','内容示例',1535731180);flush tables;    -- 使操作立即刷新到磁盘文件</code></pre><p><img src="./images/loading.gif" data-original="../images/posts/Mysql%E4%BC%98%E5%8C%96%E9%9D%A2%E8%AF%95-2020-05-25/1680d23d2f7d5498.jpg" alt="img"></p><p>由于插入的文章的发布时间<code>1535731180</code>小于<code>1535731199</code>（<code>2018-8-31 23:59:59</code>），因此被存储到<code>p201808</code>分区中，这种算法的存储到哪个分区取决于数据状况。</p><h3 id="8-1-4-list算法"><a href="#8-1-4-list算法" class="headerlink" title="8.1.4 list算法"></a>8.1.4 list算法</h3><p>也是一种条件分区，按照列表值分区（<code>in (值列表)</code>）。</p><pre class=" language-mysql"><code class="language-mysql">create table article_list(    id int auto_increment,    title varchar(64),    content text,    status TINYINT(1),    -- 文章状态：0-草稿，1-完成但未发布，2-已发布    PRIMARY KEY (id,status)    -- 要求分区依据字段必须是主键的一部分)charset=utf8PARTITION BY list(status)(    PARTITION writing values in(0,1),    -- 未发布的放在一个分区        PARTITION published values in (2)    -- 已发布的放在一个分区);</code></pre><pre class=" language-mysql"><code class="language-mysql">insert into article_list values(null,'mysql优化','内容示例',0);flush tables;</code></pre><p><img src="./images/loading.gif" data-original="../images/posts/Mysql%E4%BC%98%E5%8C%96%E9%9D%A2%E8%AF%95-2020-05-25/1680d23d3566bd76.jpg" alt=""></p><h2 id="8-2-分区管理语法"><a href="#8-2-分区管理语法" class="headerlink" title="8.2 分区管理语法"></a>8.2 分区管理语法</h2><h3 id="8-2-1-range-list"><a href="#8-2-1-range-list" class="headerlink" title="8.2.1 range/list"></a>8.2.1 range/list</h3><h4 id="8-2-1-1增加分区"><a href="#8-2-1-1增加分区" class="headerlink" title="8.2.1.1增加分区"></a>8.2.1.1增加分区</h4><p>前文中我们尝试使用<code>range</code>对文章按照月份归档，随着时间的增加，我们需要增加一个月份：</p><pre class=" language-mysql"><code class="language-mysql">alter table article_range add partition(    partition p201811 values less than (1543593599)    -- select UNIX_TIMESTAMP('2018-11-30 23:59:59')    -- more);</code></pre><p><img src="./images/loading.gif" data-original="../images/posts/Mysql%E4%BC%98%E5%8C%96%E9%9D%A2%E8%AF%95-2020-05-25/1680d23d4c43d99b.jpg" alt=""></p><h4 id="8-2-1-2删除分区"><a href="#8-2-1-2删除分区" class="headerlink" title="8.2.1.2删除分区"></a>8.2.1.2删除分区</h4><pre class=" language-mysql"><code class="language-mysql">alter table article_range drop PARTITION p201808</code></pre><p>注意：<strong>删除分区后，分区中原有的数据也会随之删除！</strong></p><h3 id="8-2-2key-hash"><a href="#8-2-2key-hash" class="headerlink" title="8.2.2key/hash"></a>8.2.2key/hash</h3><h4 id="8-2-2-1-新增分区"><a href="#8-2-2-1-新增分区" class="headerlink" title="8.2.2.1 新增分区"></a>8.2.2.1 新增分区</h4><pre class=" language-mysql"><code class="language-mysql">alter table article_key add partition partitions 4</code></pre><h4 id="8-2-2-2-销毁分区"><a href="#8-2-2-2-销毁分区" class="headerlink" title="8.2.2.2 销毁分区"></a>8.2.2.2 销毁分区</h4><pre class=" language-mysql"><code class="language-mysql">alter table article_key coalesce partition 6</code></pre><p><code>key/hash</code>分区的管理不会删除数据，但是每一次调整（新增或销毁分区）都会将所有的数据重写分配到新的分区上。==效率极低==，最好在设计阶段就考虑好分区策略。</p><h2 id="8-3-分区的使用"><a href="#8-3-分区的使用" class="headerlink" title="8.3 分区的使用"></a>8.3 分区的使用</h2><p>当数据表中的数据量很大时，分区带来的效率提升才会显现出来。</p><p>只有检索字段为分区字段时，分区带来的效率提升才会比较明显。因此，==分区字段的选择很重要==，并且==业务逻辑要尽可能地根据分区字段做相应调整==（尽量使用分区字段作为查询条件）。</p><h1 id="9-水平分割和垂直分割"><a href="#9-水平分割和垂直分割" class="headerlink" title="9. 水平分割和垂直分割"></a>9. 水平分割和垂直分割</h1><blockquote><p>水平分割：通过建立结构相同的几张表分别存储数据</p><p>垂直分割：将经常一起使用的字段放在一个单独的表中，分割后的表记录之间是一一对应关系。</p></blockquote><h2 id="9-1-分表原因"><a href="#9-1-分表原因" class="headerlink" title="9.1 分表原因"></a>9.1 分表原因</h2><ul><li>为数据库减压</li><li>分区算法局限</li><li>数据库支持不完善（<code>5.1</code>之后<code>mysql</code>才支持分区操作）</li></ul><h2 id="9-2-id重复的解决方案"><a href="#9-2-id重复的解决方案" class="headerlink" title="9.2 id重复的解决方案"></a>9.2 id重复的解决方案</h2><ul><li>借用第三方应用如<code>memcache、redis</code>的<code>id</code>自增器</li><li>单独建一张只包含<code>id</code>一个字段的表，每次自增该字段作为数据记录的<code>id</code></li></ul><h1 id="10-集群"><a href="#10-集群" class="headerlink" title="10. 集群"></a>10. 集群</h1><blockquote><p>横向扩展：从根本上（单机的硬件处理能力有限）提升数据库性能 。由此而生的相关技术：<strong>读写分离、负载均衡</strong></p></blockquote><h2 id="10-1-安装和配置主从复制"><a href="#10-1-安装和配置主从复制" class="headerlink" title="10.1 安装和配置主从复制"></a>10.1 安装和配置主从复制</h2><h3 id="10-1-1-环境"><a href="#10-1-1-环境" class="headerlink" title="10.1.1 环境"></a>10.1.1 环境</h3><ul><li><code>Red Hat Enterprise Linux Server release 7.0 (Maipo)</code>（虚拟机）</li><li><code>mysql5.7</code>（<a href="https://mirrors.163.com/mysql/Downloads/MySQL-5.7/mysql-5.7.23-linux-glibc2.12-x86_64.tar.gz" target="_blank" rel="noopener">下载地址</a>）</li></ul><h3 id="10-1-2-安装和配置"><a href="#10-1-2-安装和配置" class="headerlink" title="10.1.2 安装和配置"></a>10.1.2 安装和配置</h3><ol><li>解压到对外提供的服务的目录（我自己专门创建了一个<code>/export/server</code>来存放）</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">tar</span> xzvf mysql-5.7.23-linux-glibc2.12-x86_64.tar.gz -C /export/server<span class="token function">cd</span> /export/server<span class="token function">mv</span> mysql-5.7.23-linux-glibc2.12-x86_64 mysql</code></pre><ol start="2"><li>添加<code>mysql</code>目录的所属组和所属者：</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">groupadd</span> mysql<span class="token function">useradd</span> -r -g mysql mysql<span class="token function">cd</span> /export/server<span class="token function">chown</span> -R mysql:mysql mysql/<span class="token function">chmod</span> -R 755 mysql/</code></pre><ol start="3"><li>创建<code>mysql</code>数据存放目录（其中<code>/export/data</code>是我创建专门用来为各种服务存放数据的目录）</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> /export/data/mysql</code></pre><ol start="4"><li>初始化<code>mysql</code>服务</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /export/server/mysql./bin/mysqld --basedir<span class="token operator">=</span>/export/server/mysql --datadir<span class="token operator">=</span>/export/data/mysql --user<span class="token operator">=</span>mysql --pid-file<span class="token operator">=</span>/export/data/mysql/mysql.pid --initialize</code></pre><blockquote><p>如果成功会显示<code>mysql</code>的<code>root</code>账户的初始密码，记下来以备后续登录。如果报错缺少依赖，则使用<code>yum instally</code>依次安装即可</p></blockquote><ol start="5"><li>配置<code>my.cnf</code></li></ol><pre class=" language-bash"><code class="language-bash">vim /etc/my.cnf<span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>basedir<span class="token operator">=</span>/export/server/mysqldatadir<span class="token operator">=</span>/export/data/mysqlsocket<span class="token operator">=</span>/tmp/mysql.sockuser<span class="token operator">=</span>mysqlserver-id<span class="token operator">=</span>10 <span class="token comment" spellcheck="true"># 服务id，在集群时必须唯一，建议设置为IP的第四段</span>port<span class="token operator">=</span>3306<span class="token comment" spellcheck="true"># Disabling symbolic-links is recommended to prevent assorted security risks</span>symbolic-links<span class="token operator">=</span>0<span class="token comment" spellcheck="true"># Settings user and group are ignored when systemd is used.</span><span class="token comment" spellcheck="true"># If you need to run mysqld under a different user or group,</span><span class="token comment" spellcheck="true"># customize your systemd unit file for mariadb according to the</span><span class="token comment" spellcheck="true"># instructions in http://fedoraproject.org/wiki/Systemd</span><span class="token punctuation">[</span>mysqld_safe<span class="token punctuation">]</span>log-error<span class="token operator">=</span>/export/data/mysql/error.logpid-file<span class="token operator">=</span>/export/data/mysql/mysql.pid<span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># include all files from the config directory</span><span class="token comment" spellcheck="true">#</span><span class="token operator">!</span>includedir /etc/my.cnf.d</code></pre><ol start="6"><li>将服务添加到开机自动启动</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">cp</span> /export/server/mysql/support-files/mysql.server /etc/init.d/mysqld</code></pre><ol start="7"><li>启动服务</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">service</span> mysqld start</code></pre><ol start="8"><li>配置环境变量，在<code>/etc/profile</code>中添加如下内容</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># mysql env</span>MYSQL_HOME<span class="token operator">=</span>/export/server/mysqlMYSQL_PATH<span class="token operator">=</span><span class="token variable">$MYSQL_HOME</span>/binPATH<span class="token operator">=</span><span class="token variable">$PATH</span><span class="token keyword">:</span><span class="token variable">$MYSQL_PATH</span><span class="token function">export</span> PATH</code></pre><ol start="9"><li>使配置即可生效</li></ol><pre class=" language-shell"><code class="language-shell">source /etc/profile</code></pre><ol start="10"><li>使用<code>root</code>登录</li></ol><pre class=" language-bash"><code class="language-bash">mysql -uroot -p<span class="token comment" spellcheck="true"># 这里填写之前初始化服务时提供的密码</span></code></pre><ol start="11"><li>登录上去之后，更改<code>root</code>账户密码（我为了方便将密码改为root），否则操作数据库会报错</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token keyword">set</span> password<span class="token operator">=</span>password<span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>flush privileges<span class="token punctuation">;</span></code></pre><ol start="12"><li>设置服务可被所有远程客户端访问</li></ol><pre class=" language-bash"><code class="language-bash">use mysql<span class="token punctuation">;</span>update user <span class="token keyword">set</span> host<span class="token operator">=</span><span class="token string">'%'</span> where user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">;</span>flush privileges<span class="token punctuation">;</span></code></pre><blockquote><p>这样就可以在宿主机使用<code>navicat</code>远程连接虚拟机linux上的mysql了</p></blockquote><h3 id="10-1-3配置主从节点"><a href="#10-1-3配置主从节点" class="headerlink" title="10.1.3配置主从节点"></a>10.1.3配置主从节点</h3><h4 id="10-1-3-1-配置master"><a href="#10-1-3-1-配置master" class="headerlink" title="10.1.3.1 配置master"></a>10.1.3.1 配置master</h4><ol><li>以<code>linux</code>（<code>192.168.10.10</code>）上的<code>mysql</code>为<code>master</code>，宿主机（<code>192.168.10.1</code>）上的<code>mysql</code>为<code>slave</code>配置主从复制。</li></ol><p>修改<code>master</code>的<code>my.cnf</code>如下</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>basedir<span class="token operator">=</span>/export/server/mysqldatadir<span class="token operator">=</span>/export/data/mysqlsocket<span class="token operator">=</span>/tmp/mysql.sockuser<span class="token operator">=</span>mysqlserver-id<span class="token operator">=</span>10port<span class="token operator">=</span>3306<span class="token comment" spellcheck="true"># Disabling symbolic-links is recommended to prevent assorted security risks</span>symbolic-links<span class="token operator">=</span>0<span class="token comment" spellcheck="true"># Settings user and group are ignored when systemd is used.</span><span class="token comment" spellcheck="true"># If you need to run mysqld under a different user or group,</span><span class="token comment" spellcheck="true"># customize your systemd unit file for mariadb according to the</span><span class="token comment" spellcheck="true"># instructions in http://fedoraproject.org/wiki/Systemd</span>log-bin<span class="token operator">=</span>mysql-bin    <span class="token comment" spellcheck="true"># 开启二进制日志</span>expire-logs-days<span class="token operator">=</span>7  <span class="token comment" spellcheck="true"># 设置日志过期时间，避免占满磁盘</span>binlog-ignore-db<span class="token operator">=</span>mysql    <span class="token comment" spellcheck="true"># 不使用主从复制的数据库</span>binlog-ignore-db<span class="token operator">=</span>information_schemabinlog-ignore-db<span class="token operator">=</span>performation_schemabinlog-ignore-db<span class="token operator">=</span>sysbinlog-do-db<span class="token operator">=</span>test    <span class="token comment" spellcheck="true">#使用主从复制的数据库</span><span class="token punctuation">[</span>mysqld_safe<span class="token punctuation">]</span>log-error<span class="token operator">=</span>/export/data/mysql/error.logpid-file<span class="token operator">=</span>/export/data/mysql/mysql.pid<span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># include all files from the config directory</span><span class="token comment" spellcheck="true">#</span><span class="token operator">!</span>includedir /etc/my.cnf.d</code></pre><ol start="2"><li>重启<code>master</code></li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">service</span> mysqld restart</code></pre><ol start="3"><li>登录<code>master</code>查看配置是否生效（<code>ON</code>即为开启，默认为<code>OFF</code>）：</li></ol><pre class=" language-bash"><code class="language-bash">mysql<span class="token operator">></span> show variables like <span class="token string">'log_bin'</span><span class="token punctuation">;</span>+---------------+-------+<span class="token operator">|</span> Variable_name <span class="token operator">|</span> Value <span class="token operator">|</span>+---------------+-------+<span class="token operator">|</span> log_bin       <span class="token operator">|</span> ON    <span class="token operator">|</span>+---------------+-------+</code></pre><ol start="3"><li>在<code>master</code>的数据库中建立备份账号：<code>backup</code>为用户名，<code>%</code>表示任何远程地址，用户<code>back</code>可以使用密码<code>1234</code>通过任何远程客户端连接<code>master</code></li></ol><pre class=" language-bash"><code class="language-bash">grant replication slave on *.* to <span class="token string">'backup'</span>@<span class="token string">'%'</span> identified by <span class="token string">'1234'</span></code></pre><ol start="4"><li>查看<code>user</code>表可以看到我们刚创建的用户：</li></ol><pre class=" language-mysql"><code class="language-mysql">mysql> use mysqlmysql> select user,authentication_string,host from user;+---------------+-------------------------------------------+-----------+| user          | authentication_string                     | host      |+---------------+-------------------------------------------+-----------+| root          | *81F5E21E35407D884A6CD4A731AEBFB6AF209E1B | %         || mysql.session | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE | localhost || mysql.sys     | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE | localhost || backup        | *A4B6157319038724E3560894F7F932C8886EBFCF | %         |+---------------+-------------------------------------------+-----------+</code></pre><ol start="5"><li>新建<code>test</code>数据库，创建一个<code>article</code>表以备后续测试</li></ol><pre class=" language-mysql"><code class="language-mysql">CREATE TABLE `article` (  `id` int(11) NOT NULL AUTO_INCREMENT,  `title` varchar(64) DEFAULT NULL,  `content` text,  PRIMARY KEY (`id`)) CHARSET=utf8;</code></pre><ol start="6"><li>重启服务并刷新数据库状态到存储文件中（<code>with read lock</code>表示在此过程中，客户端只能读数据，以便获得一个一致性的快照）</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@zhenganwen ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># service mysqld restart</span>Shutting down MySQL<span class="token punctuation">..</span><span class="token punctuation">..</span> SUCCESS<span class="token operator">!</span> Starting MySQL. SUCCESS<span class="token operator">!</span> <span class="token punctuation">[</span>root@zhenganwen mysql<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mysql -uroot -proot</span>mysql<span class="token operator">></span> flush tables with <span class="token function">read</span> lock<span class="token punctuation">;</span>Query OK, 0 rows affected <span class="token punctuation">(</span>0.00 sec<span class="token punctuation">)</span></code></pre><ol start="7"><li>查看<code>master</code>上当前的二进制日志和偏移量（记一下其中的<code>File</code>和<code>Position</code>）</li></ol><pre class=" language-mysql"><code class="language-mysql">mysql> show master status \G*************************** 1. row ***************************             File: mysql-bin.000002         Position: 154     Binlog_Do_DB: test Binlog_Ignore_DB: mysql,information_schema,performation_schema,sysExecuted_Gtid_Set: 1 row in set (0.00 sec)</code></pre><p><img src="./images/loading.gif" data-original="../images/posts/Mysql%E4%BC%98%E5%8C%96%E9%9D%A2%E8%AF%95-2020-05-25/1680d23d548fb645.jpg" alt=""></p><p><code>File</code>表示实现复制功能的日志，即上图中的<code>Binary log</code>；<code>Position</code>则表示<code>Binary log</code>日志文件的偏移量之后的都会同步到<code>slave</code>中，那么在偏移量之前的则需要我们手动导入。</p><p>主服务器上面的任何修改都会保存在二进制日志Binary log里面，从服务器上面启动一个I/O thread（实际上就是一个主服务器的客户端进程），连接到主服务器上面请求读取二进制日志，然后把读取到的二进制日志写到本地的一个Realy log里面。从服务器上面开启一个SQL thread定时检查Realy log，如果发现有更改立即把更改的内容在本机上面执行一遍。</p><p>如果一主多从的话，这时主库既要负责写又要负责为几个从库提供二进制日志。此时可以稍做调整，将二进制日志只给某一从，这一从再开启二进制日志并将自己的二进制日志再发给其它从。或者是干脆这个从不记录只负责将二进制日志转发给其它从，这样架构起来性能可能要好得多，而且数据之间的延时应该也稍微要好一些</p><p><img src="./images/loading.gif" data-original="../images/posts/Mysql%E4%BC%98%E5%8C%96%E9%9D%A2%E8%AF%95-2020-05-25/1680d23d55064d40.jpg" alt=""></p><ol start="7"><li>手动导入，从<code>master</code>中导出数据</li></ol><pre class=" language-bash"><code class="language-bash">mysqldump -uroot -proot -hlocalhost <span class="token function">test</span> <span class="token operator">></span> /export/data/test.sql</code></pre><ol start="8"><li>将<code>test.sql</code>中的内容在<code>slave</code>上执行一遍。</li></ol><h4 id="10-1-3-2-配置slave"><a href="#10-1-3-2-配置slave" class="headerlink" title="10.1.3.2 配置slave"></a>10.1.3.2 配置slave</h4><ol><li>修改<code>slave</code>的<code>my.ini</code>文件中的<code>[mysqld]</code>部分</li></ol><pre class=" language-bash"><code class="language-bash">log-bin<span class="token operator">=</span>mysqlserver-id<span class="token operator">=</span>1 <span class="token comment" spellcheck="true">#192.168.10.1</span></code></pre><ol start="2"><li><p>保存修改后重启<code>slave</code>，<code>WIN+R</code>-&gt;<code>services.msc</code>-&gt;<code>MySQL5.7</code>-&gt;重新启动</p></li><li><p>登录<code>slave</code>检查<code>log_bin</code>是否以被开启：</p></li></ol><pre class=" language-shell"><code class="language-shell">show VARIABLES like 'log_bin';</code></pre><ol start="4"><li>配置与<code>master</code>的同步复制：</li></ol><pre class=" language-bash"><code class="language-bash">stop slave<span class="token punctuation">;</span> change master to    master_host<span class="token operator">=</span><span class="token string">'192.168.10.10'</span>,    -- master的IP    master_user<span class="token operator">=</span><span class="token string">'backup'</span>,            -- 之前在master上创建的用户    master_password<span class="token operator">=</span><span class="token string">'1234'</span>,    master_log_file<span class="token operator">=</span><span class="token string">'mysql-bin.000002'</span>, -- master上 show master status \G 提供的信息    master_log_pos<span class="token operator">=</span>154<span class="token punctuation">;</span></code></pre><ol start="5"><li>启用<code>slave</code>节点并查看状态</li></ol><pre class=" language-mysql"><code class="language-mysql">mysql> start slave;mysql> show slave status \G*************************** 1. row ***************************               Slave_IO_State: Waiting for master to send event                  Master_Host: 192.168.10.10                  Master_User: backup                  Master_Port: 3306                Connect_Retry: 60              Master_Log_File: mysql-bin.000002          Read_Master_Log_Pos: 154               Relay_Log_File: DESKTOP-KUBSPE0-relay-bin.000002                Relay_Log_Pos: 320        Relay_Master_Log_File: mysql-bin.000002             Slave_IO_Running: Yes            Slave_SQL_Running: Yes              Replicate_Do_DB:          Replicate_Ignore_DB:           Replicate_Do_Table:       Replicate_Ignore_Table:      Replicate_Wild_Do_Table:  Replicate_Wild_Ignore_Table:                   Last_Errno: 0                   Last_Error:                 Skip_Counter: 0          Exec_Master_Log_Pos: 154              Relay_Log_Space: 537              Until_Condition: None               Until_Log_File:                Until_Log_Pos: 0           Master_SSL_Allowed: No           Master_SSL_CA_File:           Master_SSL_CA_Path:              Master_SSL_Cert:            Master_SSL_Cipher:               Master_SSL_Key:        Seconds_Behind_Master: 0Master_SSL_Verify_Server_Cert: No                Last_IO_Errno: 0                Last_IO_Error:               Last_SQL_Errno: 0               Last_SQL_Error:  Replicate_Ignore_Server_Ids:             Master_Server_Id: 10                  Master_UUID: f68774b7-0b28-11e9-a925-000c290abe05             Master_Info_File: C:\ProgramData\MySQL\MySQL Server 5.7\Data\master.info                    SQL_Delay: 0          SQL_Remaining_Delay: NULL      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates           Master_Retry_Count: 86400                  Master_Bind:      Last_IO_Error_Timestamp:     Last_SQL_Error_Timestamp:               Master_SSL_Crl:           Master_SSL_Crlpath:           Retrieved_Gtid_Set:            Executed_Gtid_Set:                Auto_Position: 0         Replicate_Rewrite_DB:                 Channel_Name:           Master_TLS_Version:1 row in set (0.00 sec)</code></pre><blockquote><p>注意查看第4、14、15三行，若与我一致，表示<code>slave</code>配置成功</p></blockquote><h3 id="10-1-4-测试"><a href="#10-1-4-测试" class="headerlink" title="10.1.4 测试"></a>10.1.4 测试</h3><ol><li>关闭<code>master</code>的读取锁定</li></ol><pre class=" language-mysql"><code class="language-mysql">mysql> unlock tables;Query OK, 0 rows affected (0.00 sec)</code></pre><ol start="2"><li>向<code>master</code>中插入一条数据</li></ol><pre class=" language-mysql"><code class="language-mysql">mysql> use testmysql> insert into article (title,content) values ('mysql master and slave','record the cluster building succeed!:)');Query OK, 1 row affected (0.00 sec)</code></pre><ol start="3"><li>查看<code>slave</code>是否自动同步了数据</li></ol><pre class=" language-mysql"><code class="language-mysql">mysql> insert into article (title,content) values ('mysql master and slave','record the cluster building succeed!:)');Query OK, 1 row affected (0.00 sec)</code></pre><p>至此，主从复制的配置成功！：)</p><p><a href="https://blog.csdn.net/xlgen157387/article/details/52452394" target="_blank" rel="noopener">使用mysqlreplicate命令快速搭建 Mysql 主从复制</a></p><h2 id="10-2-读写分离"><a href="#10-2-读写分离" class="headerlink" title="10.2 读写分离"></a>10.2 读写分离</h2><p>读写分离是依赖于主从复制，而主从复制又是为读写分离服务的。因为主从复制要求<code>slave</code>不能写只能读（如果对<code>slave</code>执行写操作，那么<code>show slave status</code>将会呈现<code>Slave_SQL_Running=NO</code>，此时你需要按照前面提到的手动同步一下<code>slave</code>）。</p><h3 id="10-2-1-方案一、定义两种连接"><a href="#10-2-1-方案一、定义两种连接" class="headerlink" title="10.2.1 方案一、定义两种连接"></a>10.2.1 方案一、定义两种连接</h3><p>就像我们在学JDBC时定义的<code>DataBase</code>一样，我们可以抽取出<code>ReadDataBase,WriteDataBase implements DataBase</code>，但是这种方式无法利用优秀的线程池技术如<code>DruidDataSource</code>帮我们管理连接，也无法利用<code>Spring AOP</code>让连接对<code>DAO</code>层透明。</p><h3 id="10-2-2-方案二、使用Spring-AOP"><a href="#10-2-2-方案二、使用Spring-AOP" class="headerlink" title="10.2.2 方案二、使用Spring  AOP"></a>10.2.2 方案二、使用Spring  AOP</h3><p>如果能够使用<code>Spring AOP</code>解决数据源切换的问题，那么就可以和<code>Mybatis</code>、<code>Druid</code>整合到一起了。</p><p>我们在整合<code>Spring1</code>和<code>Mybatis</code>时，我们只需写DAO接口和对应的<code>SQL</code>语句，那么DAO实例是由谁创建的呢？实际上就是<code>Spring</code>帮我们创建的，它通过我们注入的数据源，帮我们完成从中获取数据库连接、使用连接执行 <code>SQL</code> 语句的过程以及最后归还连接给数据源的过程。</p><p>如果我们能在调用DAO接口时根据接口方法命名规范（增<code>addXXX/createXXX</code>、删<code>deleteXX/removeXXX</code>、改<code>updateXXXX</code>、查<code>selectXX/findXXX/getXX/queryXXX</code>）动态地选择数据源（读数据源对应连接<code>master</code>而写数据源对应连接<code>slave</code>），那么就可以做到读写分离了。</p><h4 id="10-2-2-1-项目结构"><a href="#10-2-2-1-项目结构" class="headerlink" title="10.2.2.1 项目结构"></a>10.2.2.1 项目结构</h4><p><img src="./images/loading.gif" data-original="../images/posts/Mysql%E4%BC%98%E5%8C%96%E9%9D%A2%E8%AF%95-2020-05-25/1680d23d56622e54.jpg" alt="项目结构"></p><h4 id="10-2-2-2引入依赖"><a href="#10-2-2-2引入依赖" class="headerlink" title="10.2.2.2引入依赖"></a>10.2.2.2引入依赖</h4><p>其中，为了方便访问数据库引入了<code>mybatis</code>和<code>druid</code>，实现数据源动态切换主要依赖<code>spring-aop</code>和<code>spring-aspects</code></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.4.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.8.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.8.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.8.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>6.0.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.8.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-aspects<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.8.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.16.22<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.8.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h4 id="10-2-2-3-数据类"><a href="#10-2-2-3-数据类" class="headerlink" title="10.2.2.3 数据类"></a>10.2.2.3 数据类</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> top<span class="token punctuation">.</span>zhenganwen<span class="token punctuation">.</span>mysqloptimize<span class="token punctuation">.</span>entity<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>AllArgsConstructor<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>NoArgsConstructor<span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Article</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String title<span class="token punctuation">;</span>    <span class="token keyword">private</span> String content<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="10-2-2-4-spring配置文件"><a href="#10-2-2-4-spring配置文件" class="headerlink" title="10.2.2.4 spring配置文件"></a>10.2.2.4 spring配置文件</h4><p>其中<code>RoutingDataSourceImpl</code>是实现动态切换功能的核心类，稍后介绍。</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>db.properties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>property-placeholder</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>top.zhenganwen.mysqloptimize<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>slaveDataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${db.driverClass}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${master.db.url}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${master.db.username}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${master.db.password}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>masterDataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${db.driverClass}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${slave.db.url}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${slave.db.username}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${slave.db.password}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSourceRouting<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>top.zhenganwen.mysqloptimize.dataSource.RoutingDataSourceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>defaultTargetDataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>masterDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>targetDataSources<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span> <span class="token attr-name">key-type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span> <span class="token attr-name">value-type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javax.sql.DataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>read<span class="token punctuation">"</span></span> <span class="token attr-name">value-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>slaveDataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>write<span class="token punctuation">"</span></span> <span class="token attr-name">value-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>masterDataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>methodType<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span> <span class="token attr-name">key-type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span> <span class="token attr-name">value-type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>read<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>query,find,select,get,load,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>write<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>update,add,create,delete,remove,modify<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- Mybatis文件 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:mybatis-config.xml<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSourceRouting<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapperLocations<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapper/*.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.mapper.MapperScannerConfigurer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>basePackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>top.zhenganwen.mysqloptimize.mapper<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactoryBeanName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p><code>dp.properties</code></p><pre class=" language-properties"><code class="language-properties">dp.properties<span class="token attr-name">master.db.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=UTC</span><span class="token attr-name">master.db.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">master.db.password</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">slave.db.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://192.168.10.10:3306/test?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=UTC</span><span class="token attr-name">slave.db.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">slave.db.password</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">db.driverClass</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span></code></pre><p><code>mybatis-config.xml</code></p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE configuration        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>top.zhenganwen.mysqloptimize.entity.Article<span class="token punctuation">"</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Article<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><h4 id="10-2-2-5-mapper接口和配置文件"><a href="#10-2-2-5-mapper接口和配置文件" class="headerlink" title="10.2.2.5 mapper接口和配置文件"></a>10.2.2.5 mapper接口和配置文件</h4><p><code>ArticleMapper.java</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> top<span class="token punctuation">.</span>zhenganwen<span class="token punctuation">.</span>mysqloptimize<span class="token punctuation">.</span>mapper<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Repository<span class="token punctuation">;</span><span class="token keyword">import</span> top<span class="token punctuation">.</span>zhenganwen<span class="token punctuation">.</span>mysqloptimize<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>Article<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ArticleMapper</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Article<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>Article article<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>ArticleMapper.xml</code></p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" ></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>top.zhenganwen.mysqloptimize.mapper.ArticleMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Article<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from article    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Article<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        insert into article (title,content) values (#{title},#{content})    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>delete<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        delete from article where id=#{id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><h4 id="10-2-2-6-核心类"><a href="#10-2-2-6-核心类" class="headerlink" title="10.2.2.6 核心类"></a>10.2.2.6 核心类</h4><ol><li><strong>RoutingDataSourceImpl</strong></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> top<span class="token punctuation">.</span>zhenganwen<span class="token punctuation">.</span>mysqloptimize<span class="token punctuation">.</span>dataSource<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>lookup<span class="token punctuation">.</span>AbstractRoutingDataSource<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * RoutingDataSourceImpl class * 数据源路由 * * @author zhenganwen, blog:zhenganwen.top * @date 2018/12/29 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RoutingDataSourceImpl</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractRoutingDataSource</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * key为read或write     * value为DAO方法的前缀     * 什么前缀开头的方法使用读数据员，什么开头的方法使用写数据源     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>String<span class="token operator">>></span> METHOD_TYPE_MAP <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>String<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 由我们指定数据源的id，由Spring切换数据源     *     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Object <span class="token function">determineCurrentLookupKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数据源为："</span><span class="token operator">+</span>DataSourceHandler<span class="token punctuation">.</span><span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> DataSourceHandler<span class="token punctuation">.</span><span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMethodType</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String type <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String methodPrefixList <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>methodPrefixList <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                METHOD_TYPE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>methodPrefixList<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>它的主要功能是，本来我们只配置一个数据源，因此<code>Spring</code>动态代理DAO接口时直接使用该数据源，现在我们有了读、写两个数据源，我们需要加入一些自己的逻辑来告诉调用哪个接口使用哪个数据源（读数据的接口使用<code>slave</code>，写数据的接口使用<code>master</code>。这个告诉<code>Spring</code>该使用哪个数据源的类就是<code>AbstractRoutingDataSource</code>，必须重写的方法<code>determineCurrentLookupKey</code>返回数据源的标识，结合<code>spring</code>配置文件（下段代码的5，6两行）</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSourceRouting<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>top.zhenganwen.mysqloptimize.dataSource.RoutingDataSourceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>defaultTargetDataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>masterDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>targetDataSources<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span> <span class="token attr-name">key-type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span> <span class="token attr-name">value-type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javax.sql.DataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>read<span class="token punctuation">"</span></span> <span class="token attr-name">value-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>slaveDataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>write<span class="token punctuation">"</span></span> <span class="token attr-name">value-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>masterDataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>methodType<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span> <span class="token attr-name">key-type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span> <span class="token attr-name">value-type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>read<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>query,find,select,get,load,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>write<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>update,add,create,delete,remove,modify<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p>如果<code>determineCurrentLookupKey</code>返回<code>read</code>那么使用<code>slaveDataSource</code>，如果返回<code>write</code>就使用<code>masterDataSource</code>。</p><ol start="2"><li><strong>DataSourceHandler</strong></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> top<span class="token punctuation">.</span>zhenganwen<span class="token punctuation">.</span>mysqloptimize<span class="token punctuation">.</span>dataSource<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * DataSourceHandler class * &lt;p> * 将数据源与线程绑定，需要时根据线程获取 * * @author zhenganwen, blog:zhenganwen.top * @date 2018/12/29 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceHandler</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 绑定的是read或write，表示使用读或写数据源     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ThreadLocal<span class="token operator">&lt;</span>String<span class="token operator">></span> holder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setDataSource</span><span class="token punctuation">(</span>String dataSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"设置了数据源类型"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        holder<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"获取了数据源类型"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> holder<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="3"><li><strong>DataSourceAspect</strong></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> top<span class="token punctuation">.</span>zhenganwen<span class="token punctuation">.</span>mysqloptimize<span class="token punctuation">.</span>dataSource<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>JoinPoint<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Aspect<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Before<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Pointcut<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>EnableAspectJAutoProxy<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> top<span class="token punctuation">.</span>zhenganwen<span class="token punctuation">.</span>mysqloptimize<span class="token punctuation">.</span>dataSource<span class="token punctuation">.</span>RoutingDataSourceImpl<span class="token punctuation">.</span>METHOD_TYPE_MAP<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * DataSourceAspect class * * 配置切面，根据方法前缀设置读、写数据源 * 项目启动时会加载该bean，并按照配置的切面（哪些切入点、如何增强）确定动态代理逻辑 * @author zhenganwen,blog:zhenganwen.top * @date 2018/12/29 */</span><span class="token annotation punctuation">@Component</span><span class="token comment" spellcheck="true">//声明这是一个切面，这样Spring才会做相应的配置，否则只会当做简单的bean注入</span><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@EnableAspectJAutoProxy</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceAspect</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 配置切入点：DAO包下的所有类的所有方法     */</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* top.zhenganwen.mysqloptimize.mapper.*.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">aspect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 配置前置增强，对象是aspect()方法上配置的切入点     */</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"aspect()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span>JoinPoint point<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String className <span class="token operator">=</span> point<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String invokedMethod <span class="token operator">=</span> point<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对 "</span><span class="token operator">+</span>className<span class="token operator">+</span><span class="token string">"$"</span><span class="token operator">+</span>invokedMethod<span class="token operator">+</span><span class="token string">" 做了前置增强，确定了要使用的数据源类型"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> dataSourceType <span class="token operator">=</span> METHOD_TYPE_MAP<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String type <span class="token operator">:</span> dataSourceType<span class="token punctuation">)</span> <span class="token punctuation">{</span>            List<span class="token operator">&lt;</span>String<span class="token operator">></span> prefixList <span class="token operator">=</span> METHOD_TYPE_MAP<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>String prefix <span class="token operator">:</span> prefixList<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>invokedMethod<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>prefix<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    DataSourceHandler<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数据源为："</span><span class="token operator">+</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="10-2-2-7-测试读写分离"><a href="#10-2-2-7-测试读写分离" class="headerlink" title="10.2.2.7 测试读写分离"></a>10.2.2.7 测试读写分离</h4><blockquote><p>如何测试读是从<code>slave</code>中读的呢？可以将写后复制到<code>slave</code>中的数据更改，再读该数据就知道是从<code>slave</code>中读了。<strong>注意</strong>，一但对<code>slave</code>做了写操作就要重新手动将<code>slave</code>与<code>master</code>同步一下，否则主从复制就会失效。</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> top<span class="token punctuation">.</span>zhenganwen<span class="token punctuation">.</span>mysqloptimize<span class="token punctuation">.</span>dataSource<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span>RunWith<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ContextConfiguration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span>SpringJUnit4ClassRunner<span class="token punctuation">;</span><span class="token keyword">import</span> top<span class="token punctuation">.</span>zhenganwen<span class="token punctuation">.</span>mysqloptimize<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>Article<span class="token punctuation">;</span><span class="token keyword">import</span> top<span class="token punctuation">.</span>zhenganwen<span class="token punctuation">.</span>mysqloptimize<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>ArticleMapper<span class="token punctuation">;</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringJUnit4ClassRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span>locations <span class="token operator">=</span> <span class="token string">"classpath:spring-mybatis.xml"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RoutingDataSourceTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    ArticleMapper articleMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>articleMapper<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Article article <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Article</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"我是新插入的文章"</span><span class="token punctuation">,</span> <span class="token string">"测试是否能够写到master并且复制到slave中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        articleMapper<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>article<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        articleMapper<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="10-3-负载均衡"><a href="#10-3-负载均衡" class="headerlink" title="10.3 负载均衡"></a>10.3 负载均衡</h2><h3 id="10-3-1-负载均衡算法"><a href="#10-3-1-负载均衡算法" class="headerlink" title="10.3.1 负载均衡算法"></a>10.3.1 负载均衡算法</h3><ul><li>轮询</li><li>加权轮询：按照处理能力来加权</li><li>负载分配：依据当前的空闲状态（但是测试每个节点的内存使用率、CPU利用率等，再做比较选出最闲的那个，效率太低）</li></ul><h2 id="10-4-高可用"><a href="#10-4-高可用" class="headerlink" title="10.4 高可用"></a>10.4 高可用</h2><p>在服务器架构时，为了保证服务器7x24不宕机在线状态，需要为每台单点服务器（由一台服务器提供服务的服务器，如写服务器、数据库中间件）提供冗余机。</p><p>对于写服务器来说，需要提供一台同样的写-冗余服务器，当写服务器健康时（写-冗余通过心跳检测），写-冗余作为一个从机的角色复制写服务器的内容与其做一个同步；当写服务器宕机时，写-冗余服务器便顶上来作为写服务器继续提供服务。对外界来说这个处理过程是透明的，即外界仅通过一个IP访问服务。</p><h1 id="11-典型SQL"><a href="#11-典型SQL" class="headerlink" title="11. 典型SQL"></a>11. 典型SQL</h1><h2 id="11-1-线上DDL"><a href="#11-1-线上DDL" class="headerlink" title="11.1 线上DDL"></a>11.1 线上DDL</h2><p>DDL(Database Definition Language)是指数据库表结构的定义（<code>create table</code>）和维护（<code>alter table</code>）的语言。在线上执行DDL，在低于<code>MySQL5.6</code>版本时会导致全表被独占锁定，此时表处于维护、不可操作状态，这会导致该期间对该表的所有访问无法响应。但是在<code>MySQL5.6</code>之后，支持<code>Online DDL</code>，大大缩短了锁定时间。</p><p>优化技巧是采用的维护表结构的DDL（比如增加一列，或者增加一个索引），是==copy==策略。思路：创建一个满足新结构的新表，将旧表数据==逐条==导入（复制）到新表中，以保证==一次性锁定的内容少==（锁定的是正在导入的数据），同时旧表上可以执行其他任务。导入的过程中，将对旧表的所有操作以日志的形式记录下来，导入完毕后，将更新日志在新表上再执行一遍（确保一致性）。最后，新表替换旧表（在应用程序中完成，或者是数据库的rename，视图完成）。</p><p>但随着MySQL的升级，这个问题几乎淡化了。</p><h2 id="11-2-数据库导入语句"><a href="#11-2-数据库导入语句" class="headerlink" title="11.2 数据库导入语句"></a>11.2 数据库导入语句</h2><p>在恢复数据时，可能会导入大量的数据。此时为了快速导入，需要掌握一些技巧：</p><ol><li>导入时<strong>先禁用索引和约束</strong>：</li></ol><pre class=" language-mysql"><code class="language-mysql">alter table table-name disable keys</code></pre><p>待数据导入完成之后，再开启索引和约束，一次性创建索引</p><pre class=" language-mysql"><code class="language-mysql">alter table table-name enable keys</code></pre><ol><li>数据库如果使用的引擎是<code>Innodb</code>，那么它<strong>默认会给每条写指令加上事务</strong>（这也会消耗一定的时间），因此建议先手动开启事务，再执行一定量的批量导入，最后手动提交事务。</li><li>如果批量导入的SQL指令格式相同只是数据不同，那么你应该先<code>prepare</code>==预编译==一下，这样也能节省很多重复编译的时间。</li></ol><h2 id="11-3-limit-offset-rows"><a href="#11-3-limit-offset-rows" class="headerlink" title="11.3 limit offset,rows"></a>11.3 limit offset,rows</h2><p>尽量保证不要出现大的<code>offset</code>，比如<code>limit 10000,10</code>相当于对已查询出来的行数弃掉前<code>10000</code>行后再取<code>10</code>行，完全可以加一些条件过滤一下（完成筛选），而不应该使用<code>limit</code>跳过已查询到的数据。这是一个==<code>offset</code>做无用功==的问题。对应实际工程中，要避免出现大页码的情况，尽量引导用户做条件过滤。</p><h2 id="11-4-select-要少用"><a href="#11-4-select-要少用" class="headerlink" title="11.4 select * 要少用"></a>11.4 select * 要少用</h2><p>即尽量选择自己需要的字段<code>select</code>，但这个影响不是很大，因为网络传输多了几十上百字节也没多少延时，并且现在流行的ORM框架都是用的<code>select *</code>，只是我们在设计表的时候注意将大数据量的字段分离，比如商品详情可以单独抽离出一张商品详情表，这样在查看商品简略页面时的加载速度就不会有影响了。</p><h2 id="11-5-order-by-rand-不要用"><a href="#11-5-order-by-rand-不要用" class="headerlink" title="11.5 order by rand()不要用"></a>11.5 order by rand()不要用</h2><p>它的逻辑就是随机排序（为每条数据生成一个随机数，然后根据随机数大小进行排序）。如<code>select * from student order by rand() limit 5</code>的执行效率就很低，因为它为表中的每条数据都生成随机数并进行排序，而我们只要前5条。</p><p>解决思路：在应用程序中，将随机的主键生成好，去数据库中利用主键检索。</p><h2 id="11-6-单表和多表查询"><a href="#11-6-单表和多表查询" class="headerlink" title="11.6 单表和多表查询"></a>11.6 单表和多表查询</h2><p>多表查询：<code>join</code>、子查询都是涉及到多表的查询。如果你使用<code>explain</code>分析执行计划你会发现多表查询也是一个表一个表的处理，最后合并结果。因此可以说单表查询将计算压力放在了应用程序上，而多表查询将计算压力放在了数据库上。</p><p>现在有ORM框架帮我们解决了单表查询带来的对象映射问题（查询单表时，如果发现有外键自动再去查询关联表，是一个表一个表查的）。</p><h2 id="11-7-count"><a href="#11-7-count" class="headerlink" title="11.7 count(*)"></a>11.7 count(*)</h2><p>在<code>MyISAM</code>存储引擎中，会自动记录表的行数，因此使用<code>count(*)</code>能够快速返回。而<code>Innodb</code>内部没有这样一个计数器，需要我们手动统计记录数量，解决思路就是单独使用一张表：</p><table><thead><tr><th>id</th><th>table</th><th>count</th></tr></thead><tbody><tr><td>1</td><td>student</td><td>100</td></tr></tbody></table><h2 id="11-8-limit-1"><a href="#11-8-limit-1" class="headerlink" title="11.8 limit 1"></a>11.8 limit 1</h2><p>如果可以确定仅仅检索一条，建议加上<code>limit 1</code>，其实ORM框架帮我们做到了这一点（查询单条的操作都会自动加上<code>limit 1</code>）。</p><h1 id="12-慢查询日志"><a href="#12-慢查询日志" class="headerlink" title="12. 慢查询日志"></a>12. 慢查询日志</h1><blockquote><p>用于记录执行时间超过某个临界值的SQL日志，用于快速定位慢查询，为我们的优化做参考。</p></blockquote><h2 id="12-1-开启慢查询日志"><a href="#12-1-开启慢查询日志" class="headerlink" title="12.1 开启慢查询日志"></a>12.1 开启慢查询日志</h2><p>配置项：<code>slow_query_log</code></p><p>可以使用<code>show variables like ‘slov_query_log’</code>查看是否开启，如果状态值为<code>OFF</code>，可以使用<code>set GLOBAL slow_query_log = on</code>来开启，它会在<code>datadir</code>下产生一个<code>xxx-slow.log</code>的文件。</p><h2 id="12-2-设置临界时间"><a href="#12-2-设置临界时间" class="headerlink" title="12.2 设置临界时间"></a>12.2 设置临界时间</h2><p>配置项：<code>long_query_time</code></p><p>查看：<code>show VARIABLES like 'long_query_time'</code>，单位秒</p><p>设置：<code>set long_query_time=0.5</code></p><p>实操时应该从长时间设置到短的时间，即将最慢的SQL优化掉</p><h2 id="12-3-查看日志"><a href="#12-3-查看日志" class="headerlink" title="12.3 查看日志"></a>12.3 查看日志</h2><p>一旦SQL超过了我们设置的临界时间就会被记录到<code>xxx-slow.log</code>中</p><h1 id="13-profile信息"><a href="#13-profile信息" class="headerlink" title="13. profile信息"></a>13. profile信息</h1><p>配置项：<code>profiling</code></p><h2 id="13-1-开启profile"><a href="#13-1-开启profile" class="headerlink" title="13.1 开启profile"></a>13.1 开启profile</h2><pre class=" language-bash"><code class="language-bash"><span class="token keyword">set</span> profiling<span class="token operator">=</span>on</code></pre><p>开启后，所有的SQL执行的详细信息都会被自动记录下来</p><pre class=" language-mysql"><code class="language-mysql">mysql> show variables like 'profiling';+---------------+-------+| Variable_name | Value |+---------------+-------+| profiling     | OFF   |+---------------+-------+1 row in set, 1 warning (0.00 sec)mysql> set profiling=on;Query OK, 0 rows affected, 1 warning (0.00 sec)</code></pre><h2 id="13-2-查看profile信息"><a href="#13-2-查看profile信息" class="headerlink" title="13.2 查看profile信息"></a>13.2 查看profile信息</h2><pre class=" language-mysql"><code class="language-mysql">show profilesmysql> show variables like 'profiling';+---------------+-------+| Variable_name | Value |+---------------+-------+| profiling     | ON    |+---------------+-------+1 row in set, 1 warning (0.00 sec)mysql> insert into article values (null,'test profile',':)');Query OK, 1 row affected (0.15 sec)mysql> show profiles;+----------+------------+-------------------------------------------------------+| Query_ID | Duration   | Query                                                 |+----------+------------+-------------------------------------------------------+|        1 | 0.00086150 | show variables like 'profiling'                       ||        2 | 0.15027550 | insert into article values (null,'test profile',':)') |+----------+------------+-------------------------------------------------------+</code></pre><h2 id="13-3-通过Query-ID查看某条SQL所有详细步骤的时间"><a href="#13-3-通过Query-ID查看某条SQL所有详细步骤的时间" class="headerlink" title="13.3 通过Query_ID查看某条SQL所有详细步骤的时间"></a>13.3 通过Query_ID查看某条SQL所有详细步骤的时间</h2><pre class=" language-mysql"><code class="language-mysql">show profile for query Query_ID</code></pre><p>上面<code>show profiles</code>的结果中，每个SQL有一个<code>Query_ID</code>，可以通过它查看执行该SQL经过了哪些步骤，各消耗了多场时间</p><h1 id="14-典型的服务器配置"><a href="#14-典型的服务器配置" class="headerlink" title="14. 典型的服务器配置"></a>14. 典型的服务器配置</h1><blockquote><p>以下的配置全都取决于实际的运行环境</p></blockquote><ul><li><p><code>max_connections</code>，最大客户端连接数</p><pre class=" language-mysql"><code class="language-mysql">mysql> show variables like 'max_connections';+-----------------+-------+| Variable_name   | Value |+-----------------+-------+| max_connections | 151   |+-----------------+-------+</code></pre></li><li><p><code>table_open_cache</code>，表文件句柄缓存（表数据是存储在磁盘上的，缓存磁盘文件的句柄方便打开文件读取数据）</p><pre class=" language-mysql"><code class="language-mysql">mysql> show variables like 'table_open_cache';+------------------+-------+| Variable_name    | Value |+------------------+-------+| table_open_cache | 2000  |+------------------+-------+</code></pre></li><li><p><code>key_buffer_size</code>，索引缓存大小（将从磁盘上读取的索引缓存到内存，可以设置大一些，有利于快速检索）</p><pre class=" language-mysql"><code class="language-mysql">mysql> show variables like 'key_buffer_size';+-----------------+---------+| Variable_name   | Value   |+-----------------+---------+| key_buffer_size | 8388608 |+-----------------+---------+</code></pre></li><li><p><code>innodb_buffer_pool_size</code>，<code>Innodb</code>存储引擎缓存池大小（对于<code>Innodb</code>来说最重要的一个配置，如果所有的表用的都是<code>Innodb</code>，那么甚至建议将该值设置到物理内存的80%，<code>Innodb</code>的很多性能提升如索引都是依靠这个）</p><pre class=" language-mysql"><code class="language-mysql">mysql> show variables like 'innodb_buffer_pool_size';+-------------------------+---------+| Variable_name           | Value   |+-------------------------+---------+| innodb_buffer_pool_size | 8388608 |+-------------------------+---------+</code></pre></li><li><p><code>innodb_file_per_table</code>（<code>innodb</code>中，表数据存放在<code>.ibd</code>文件中，如果将该配置项设置为<code>ON</code>，那么一个表对应一个<code>ibd</code>文件，否则所有<code>innodb</code>共享表空间）</p></li></ul><h1 id="15-压测工具mysqlslap"><a href="#15-压测工具mysqlslap" class="headerlink" title="15. 压测工具mysqlslap"></a>15. 压测工具mysqlslap</h1><p>安装MySQL时附带了一个压力测试工具<code>mysqlslap</code>（位于<code>bin</code>目录下）</p><h2 id="15-1-自动生成sql测试"><a href="#15-1-自动生成sql测试" class="headerlink" title="15.1 自动生成sql测试"></a>15.1 自动生成sql测试</h2><pre class=" language-shell"><code class="language-shell">C:\Users\zaw>mysqlslap --auto-generate-sql -uroot -prootmysqlslap: [Warning] Using a password on the command line interface can be insecure.Benchmark        Average number of seconds to run all queries: 1.219 seconds        Minimum number of seconds to run all queries: 1.219 seconds        Maximum number of seconds to run all queries: 1.219 seconds        Number of clients running queries: 1        Average number of queries per client: 0</code></pre><h2 id="15-2-并发测试"><a href="#15-2-并发测试" class="headerlink" title="15.2 并发测试"></a>15.2 并发测试</h2><pre class=" language-bash"><code class="language-bash">C:\Users\zaw<span class="token operator">></span>mysqlslap --auto-generate-sql --concurrency<span class="token operator">=</span>100 -uroot -prootmysqlslap: <span class="token punctuation">[</span>Warning<span class="token punctuation">]</span> Using a password on the <span class="token function">command</span> line interface can be insecure.Benchmark        Average number of seconds to run all queries: 3.578 seconds        Minimum number of seconds to run all queries: 3.578 seconds        Maximum number of seconds to run all queries: 3.578 seconds        Number of clients running queries: 100        Average number of queries per client: 0C:\Users\zaw<span class="token operator">></span>mysqlslap --auto-generate-sql --concurrency<span class="token operator">=</span>150 -uroot -prootmysqlslap: <span class="token punctuation">[</span>Warning<span class="token punctuation">]</span> Using a password on the <span class="token function">command</span> line interface can be insecure.Benchmark        Average number of seconds to run all queries: 5.718 seconds        Minimum number of seconds to run all queries: 5.718 seconds        Maximum number of seconds to run all queries: 5.718 seconds        Number of clients running queries: 150        Average number of queries per client: 0</code></pre><h2 id="15-3-多轮测试"><a href="#15-3-多轮测试" class="headerlink" title="15.3 多轮测试"></a>15.3 多轮测试</h2><pre class=" language-bash"><code class="language-bash">C:\Users\zaw<span class="token operator">></span>mysqlslap --auto-generate-sql --concurrency<span class="token operator">=</span>150 --iterations<span class="token operator">=</span>10 -uroot -prootmysqlslap: <span class="token punctuation">[</span>Warning<span class="token punctuation">]</span> Using a password on the <span class="token function">command</span> line interface can be insecure.Benchmark        Average number of seconds to run all queries: 5.398 seconds        Minimum number of seconds to run all queries: 4.313 seconds        Maximum number of seconds to run all queries: 6.265 seconds        Number of clients running queries: 150        Average number of queries per client: 0</code></pre><h2 id="15-4-存储引擎测试"><a href="#15-4-存储引擎测试" class="headerlink" title="15.4 存储引擎测试"></a>15.4 存储引擎测试</h2><pre class=" language-shell"><code class="language-shell">C:\Users\zaw>mysqlslap --auto-generate-sql --concurrency=150 --iterations=3 --engine=innodb -uroot -prootmysqlslap: [Warning] Using a password on the command line interface can be insecure.Benchmark        Running for engine innodb        Average number of seconds to run all queries: 5.911 seconds        Minimum number of seconds to run all queries: 5.485 seconds        Maximum number of seconds to run all queries: 6.703 seconds        Number of clients running queries: 150        Average number of queries per client: 0</code></pre><pre class=" language-shell"><code class="language-shell">C:\Users\zaw>mysqlslap --auto-generate-sql --concurrency=150 --iterations=3 --engine=myisam -uroot -prootmysqlslap: [Warning] Using a password on the command line interface can be insecure.Benchmark        Running for engine myisam        Average number of seconds to run all queries: 53.104 seconds        Minimum number of seconds to run all queries: 46.843 seconds        Maximum number of seconds to run all queries: 60.781 seconds        Number of clients running queries: 150        Average number of queries per client: 0</code></pre><p>转载自：<a href="https://juejin.im/post/5c2c53396fb9a04a053fc7fe" target="_blank" rel="noopener">掘金-程序员乔戈里</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> MYSQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC运行流程</title>
      <link href="/undefined/2bdb.html"/>
      <url>/undefined/2bdb.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-SpringMVC执行流程图解"><a href="#1-SpringMVC执行流程图解" class="headerlink" title="1. SpringMVC执行流程图解"></a>1. SpringMVC执行流程图解</h2><p><img src="./images/loading.gif" data-original="../images/posts/SpringMVC%E8%BF%90%E8%A1%8C%E6%B5%81%E7%A8%8B/springmvc%E8%BF%90%E8%A1%8C%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="springmvc运行流程图"></p><h2 id="2-组件说明"><a href="#2-组件说明" class="headerlink" title="2. 组件说明"></a>2. 组件说明</h2><ol><li><strong>DispatcherServlet</strong>：前端控制器。用户请求到达前端控制器，它就相当于mvc模式中的c，dispatcherServlet是整个流程控制的中心，由它调用其它组件处理用户的请求，dispatcherServlet的存在降低了组件之间的耦合性,系统扩展性提高。由框架实现</li><li><strong>HandlerMapping</strong>：处理器映射器。HandlerMapping负责根据用户请求的url找到Handler即处理器，springmvc提供了不同的映射器实现不同的映射方式，根据一定的规则去查找,例如：xml配置方式，实现接口方式，注解方式等。由框架实现</li><li><strong>Handler</strong>：处理器。Handler 是继DispatcherServlet前端控制器的后端控制器，在DispatcherServlet的控制下Handler对具体的用户请求进行处理。由于Handler涉及到具体的用户业务请求，所以一般情况需要程序员根据业务需求开发Handler。</li><li><strong>HandlAdapter</strong>：处理器适配器。通过HandlerAdapter对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理器进行执行。由框架实现。</li><li><strong>ModelAndView</strong>是springmvc的封装对象，将model和view封装在一起。</li><li><strong>ViewResolver</strong>：视图解析器。ViewResolver负责将处理结果生成View视图，ViewResolver首先根据逻辑视图名解析成物理视图名即具体的页面地址，再生成View视图对象，最后对View进行渲染将处理结果通过页面展示给用户。</li><li><strong>View</strong>:是springmvc的封装对象，是一个接口, springmvc框架提供了很多的View视图类型，包括：jspview，pdfview,jstlView、freemarkerView、pdfView等。一般情况下需要通过页面标签或页面模版技术将模型数据通过页面展示给用户，需要由程序员根据业务需求开发具体的页面。</li></ol><h2 id="3-Springmvc执行流程"><a href="#3-Springmvc执行流程" class="headerlink" title="3. Springmvc执行流程"></a>3. Springmvc执行流程</h2><ol><li>用户发送请求至前端控制器DispatcherServlet</li><li>DispatcherServlet收到请求转发给处理器映射器HandlerMapping。</li><li>处理器映射器根据url请求找到具体的处理器，生成处理器执行链HandlerExecutionChain(包括处理器对象和处理器拦截器)一并返回给DispatcherServlet。</li><li>DispatcherServlet根据处理器Handler获取处理器适配器HandlerAdapter执行HandlerAdapter处理一系列的操作，如：参数封装，数据格式转换，数据验证等操作</li><li>执行处理器Handler(Controller，也叫页面控制器)。</li><li>Handler执行完成返回ModelAndView</li><li>HandlerAdapter将Handler执行结果ModelAndView返回到DispatcherServlet</li><li>DispatcherServlet将ModelAndView传给ViewReslover视图解析器</li><li>ViewReslover解析后返回具体View</li><li>DispatcherServlet对View进行渲染视图（即将模型数据model填充至视图中）。</li><li>DispatcherServlet响应用户。</li></ol><h2 id="4-执行流程代码"><a href="#4-执行流程代码" class="headerlink" title="4. 执行流程代码"></a>4. 执行流程代码</h2><h3 id="4-1-用户发送url请求至前端控制器DispatcherServlet"><a href="#4-1-用户发送url请求至前端控制器DispatcherServlet" class="headerlink" title="4.1 用户发送url请求至前端控制器DispatcherServlet"></a>4.1 用户发送url请求至前端控制器DispatcherServlet</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Exposes the DispatcherServlet-specific request attributes and delegates to {@link #doDispatch} * for the actual dispatching. */</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doService</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      String requestUri <span class="token operator">=</span> urlPathHelper<span class="token punctuation">.</span><span class="token function">getRequestUri</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>      logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"DispatcherServlet with name '"</span> <span class="token operator">+</span> <span class="token function">getServletName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"' processing "</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>            <span class="token string">" request for ["</span> <span class="token operator">+</span> requestUri <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//保护现场</span>   <span class="token comment" spellcheck="true">// Keep a snapshot of the request attributes in case of an include,</span>   <span class="token comment" spellcheck="true">// to be able to restore the original attributes after the include.</span>   Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> attributesSnapshot <span class="token operator">=</span> null<span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>WebUtils<span class="token punctuation">.</span><span class="token function">isIncludeRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Taking snapshot of request attributes before include"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      attributesSnapshot <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Enumeration<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> attrNames <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getAttributeNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>attrNames<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         String attrName <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> attrNames<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cleanupAfterInclude <span class="token operator">||</span> attrName<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"org.springframework.web.servlet"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            attributesSnapshot<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>attrName<span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>attrName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//将框架相关信息存储至request，方便后面的处理器和视图用到</span>   <span class="token comment" spellcheck="true">// Make framework objects available to handlers and view objects.</span>   request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>WEB_APPLICATION_CONTEXT_ATTRIBUTE<span class="token punctuation">,</span> <span class="token function">getWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>LOCALE_RESOLVER_ATTRIBUTE<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>localeResolver<span class="token punctuation">)</span><span class="token punctuation">;</span>   request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>THEME_RESOLVER_ATTRIBUTE<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>themeResolver<span class="token punctuation">)</span><span class="token punctuation">;</span>   request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>THEME_SOURCE_ATTRIBUTE<span class="token punctuation">,</span> <span class="token function">getThemeSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   FlashMap inputFlashMap <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>flashMapManager<span class="token punctuation">.</span><span class="token function">retrieveAndUpdate</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>inputFlashMap <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>INPUT_FLASH_MAP_ATTRIBUTE<span class="token punctuation">,</span> Collections<span class="token punctuation">.</span><span class="token function">unmodifiableMap</span><span class="token punctuation">(</span>inputFlashMap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>OUTPUT_FLASH_MAP_ATTRIBUTE<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">FlashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>FLASH_MAP_MANAGER_ATTRIBUTE<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>flashMapManager<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//请求分发</span>   <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token function">doDispatch</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">finally</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// Restore the original attribute snapshot, in case of an include.</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>attributesSnapshot <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">restoreAttributesAfterInclude</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> attributesSnapshot<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4-2-开始处理请求"><a href="#4-2-开始处理请求" class="headerlink" title="4.2 开始处理请求"></a>4.2 开始处理请求</h3><ul><li>通过url查找HandlerMap中最相近的key(url)，然后由key获取HandlerMapping对象</li><li>通过处理器映射器获取处理器</li><li>通过查询处理器适配器获得</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doDispatch</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>   HttpServletRequest processedRequest <span class="token operator">=</span> request<span class="token punctuation">;</span>   HandlerExecutionChain mappedHandler <span class="token operator">=</span> null<span class="token punctuation">;</span>   <span class="token keyword">int</span> interceptorIndex <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>   <span class="token keyword">try</span> <span class="token punctuation">{</span>      ModelAndView mv<span class="token punctuation">;</span>      <span class="token keyword">boolean</span> errorView <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>         processedRequest <span class="token operator">=</span> <span class="token function">checkMultipart</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// Determine handler for the current request</span>        <span class="token comment" spellcheck="true">//步骤4.3.1~4.3.4用于获取包含处理器Handler和拦截器AdapterIntercepters的处理器执行链HandlerExecutionChain</span>         mappedHandler <span class="token operator">=</span> <span class="token function">getHandler</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>mappedHandler <span class="token operator">==</span> null <span class="token operator">||</span> mappedHandler<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">noHandlerFound</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">// Determine handler adapter for the current request.</span>        <span class="token comment" spellcheck="true">//步骤4.4.1~4.4.2,根据HandlerExecutionChain中的处理器Handler获取处理器适配器</span>         HandlerAdapter ha <span class="token operator">=</span> <span class="token function">getHandlerAdapter</span><span class="token punctuation">(</span>mappedHandler<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// Process last-modified header, if supported by the handler.</span>         String method <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">boolean</span> isGet <span class="token operator">=</span> <span class="token string">"GET"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>isGet <span class="token operator">||</span> <span class="token string">"HEAD"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">long</span> lastModified <span class="token operator">=</span> ha<span class="token punctuation">.</span><span class="token function">getLastModified</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> mappedHandler<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               String requestUri <span class="token operator">=</span> urlPathHelper<span class="token punctuation">.</span><span class="token function">getRequestUri</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>               logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Last-Modified value for ["</span> <span class="token operator">+</span> requestUri <span class="token operator">+</span> <span class="token string">"] is: "</span> <span class="token operator">+</span> lastModified<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ServletWebRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">checkNotModified</span><span class="token punctuation">(</span>lastModified<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> isGet<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">// Apply preHandle methods of registered interceptors.</span>         HandlerInterceptor<span class="token punctuation">[</span><span class="token punctuation">]</span> interceptors <span class="token operator">=</span> mappedHandler<span class="token punctuation">.</span><span class="token function">getInterceptors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>interceptors <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> interceptors<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               HandlerInterceptor interceptor <span class="token operator">=</span> interceptors<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>interceptor<span class="token punctuation">.</span><span class="token function">preHandle</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">,</span> mappedHandler<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token function">triggerAfterCompletion</span><span class="token punctuation">(</span>mappedHandler<span class="token punctuation">,</span> interceptorIndex<span class="token punctuation">,</span> processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">return</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>               interceptorIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">// Actually invoke the handler.</span>        <span class="token comment" spellcheck="true">//4.5.1~4.5.3通过处理器适配器HandlerApapter来调用处理器完成对请求的处理</span>         mv <span class="token operator">=</span> ha<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">,</span> mappedHandler<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// Do we need view name translation?</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>mv <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>mv<span class="token punctuation">.</span><span class="token function">hasView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            mv<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token function">getDefaultViewName</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">// Apply postHandle methods of registered interceptors.</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>interceptors <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> interceptors<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               HandlerInterceptor interceptor <span class="token operator">=</span> interceptors<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>               interceptor<span class="token punctuation">.</span><span class="token function">postHandle</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">,</span> mappedHandler<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mv<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ModelAndViewDefiningException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>         logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"ModelAndViewDefiningException encountered"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>         mv <span class="token operator">=</span> ex<span class="token punctuation">.</span><span class="token function">getModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>         Object handler <span class="token operator">=</span> <span class="token punctuation">(</span>mappedHandler <span class="token operator">!=</span> null <span class="token operator">?</span> mappedHandler<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>         mv <span class="token operator">=</span> <span class="token function">processHandlerException</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>         errorView <span class="token operator">=</span> <span class="token punctuation">(</span>mv <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// Did the handler return a view to render?</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>mv <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>mv<span class="token punctuation">.</span><span class="token function">wasCleared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">render</span><span class="token punctuation">(</span>mv<span class="token punctuation">,</span> processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>errorView<span class="token punctuation">)</span> <span class="token punctuation">{</span>            WebUtils<span class="token punctuation">.</span><span class="token function">clearErrorRequestAttributes</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Null ModelAndView returned to DispatcherServlet with name '"</span> <span class="token operator">+</span> <span class="token function">getServletName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>                  <span class="token string">"': assuming HandlerAdapter completed request handling"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// Trigger after-completion for successful outcome.</span>      <span class="token function">triggerAfterCompletion</span><span class="token punctuation">(</span>mappedHandler<span class="token punctuation">,</span> interceptorIndex<span class="token punctuation">,</span> processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// Trigger after-completion for thrown exception.</span>      <span class="token function">triggerAfterCompletion</span><span class="token punctuation">(</span>mappedHandler<span class="token punctuation">,</span> interceptorIndex<span class="token punctuation">,</span> processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Error</span> err<span class="token punctuation">)</span> <span class="token punctuation">{</span>      ServletException ex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NestedServletException</span><span class="token punctuation">(</span><span class="token string">"Handler processing failed"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// Trigger after-completion for thrown exception.</span>      <span class="token function">triggerAfterCompletion</span><span class="token punctuation">(</span>mappedHandler<span class="token punctuation">,</span> interceptorIndex<span class="token punctuation">,</span> processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">finally</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// Clean up any resources used by a multipart request.</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>processedRequest <span class="token operator">!=</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">cleanupMultipart</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4-3-1-getHandler-HttpServletRequest-request-，经由HandlerMapping对象获取HandlerExecutionChain-处理器和拦截器"><a href="#4-3-1-getHandler-HttpServletRequest-request-，经由HandlerMapping对象获取HandlerExecutionChain-处理器和拦截器" class="headerlink" title="4.3.1 getHandler(HttpServletRequest request)，经由HandlerMapping对象获取HandlerExecutionChain(处理器和拦截器)"></a>4.3.1 getHandler(HttpServletRequest request)，经由HandlerMapping对象获取HandlerExecutionChain(处理器和拦截器)</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Return the HandlerExecutionChain for this request. * &lt;p>Tries all handler mappings in order. * @param request current HTTP request * @return the HandlerExecutionChain, or &lt;code>null&lt;/code> if no handler could be found */</span><span class="token keyword">protected</span> HandlerExecutionChain <span class="token function">getHandler</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span>HandlerMapping hm <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handlerMappings<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span>               <span class="token string">"Testing handler map ["</span> <span class="token operator">+</span> hm <span class="token operator">+</span> <span class="token string">"] in DispatcherServlet with name '"</span> <span class="token operator">+</span> <span class="token function">getServletName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      HandlerExecutionChain handler <span class="token operator">=</span> hm<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> handler<span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="4-3-2-1-getHandler-HttpServletRequest-request-，经由request获取处理器，获取处理器Handler后，再获取拦截器，最后组成HandlerExecutionChain"><a href="#4-3-2-1-getHandler-HttpServletRequest-request-，经由request获取处理器，获取处理器Handler后，再获取拦截器，最后组成HandlerExecutionChain" class="headerlink" title="4.3.2.1 getHandler(HttpServletRequest request)，经由request获取处理器，获取处理器Handler后，再获取拦截器，最后组成HandlerExecutionChain"></a>4.3.2.1 getHandler(HttpServletRequest request)，经由request获取处理器，获取处理器Handler后，再获取拦截器，最后组成HandlerExecutionChain</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Look up a handler for the given request, falling back to the default * handler if no specific one is found. * @param request current HTTP request * @return the corresponding handler instance, or the default handler * @see #getHandlerInternal */</span><span class="token keyword">public</span> <span class="token keyword">final</span> HandlerExecutionChain <span class="token function">getHandler</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>   Object handler <span class="token operator">=</span> <span class="token function">getHandlerInternal</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      handler <span class="token operator">=</span> <span class="token function">getDefaultHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> null<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// Bean name or resolved handler?</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      String handlerName <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> handler<span class="token punctuation">;</span>      handler <span class="token operator">=</span> <span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>handlerName<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token function">getHandlerExecutionChain</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="4-3-2-2-根据查找到的处理器Handler和request获取包含Handler和AdaptedInterceptors的HandlerExecutionChain"><a href="#4-3-2-2-根据查找到的处理器Handler和request获取包含Handler和AdaptedInterceptors的HandlerExecutionChain" class="headerlink" title="4.3.2.2 根据查找到的处理器Handler和request获取包含Handler和AdaptedInterceptors的HandlerExecutionChain"></a>4.3.2.2 根据查找到的处理器Handler和request获取包含Handler和AdaptedInterceptors的HandlerExecutionChain</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> HandlerExecutionChain <span class="token function">getHandlerExecutionChain</span><span class="token punctuation">(</span>Object handler<span class="token punctuation">,</span> HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>   HandlerExecutionChain chain <span class="token operator">=</span>       <span class="token punctuation">(</span>handler <span class="token keyword">instanceof</span> <span class="token class-name">HandlerExecutionChain</span><span class="token punctuation">)</span> <span class="token operator">?</span>         <span class="token punctuation">(</span>HandlerExecutionChain<span class="token punctuation">)</span> handler <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">HandlerExecutionChain</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>   chain<span class="token punctuation">.</span><span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token function">getAdaptedInterceptors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   String lookupPath <span class="token operator">=</span> urlPathHelper<span class="token punctuation">.</span><span class="token function">getLookupPathForRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span>MappedInterceptor mappedInterceptor <span class="token operator">:</span> mappedInterceptors<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>mappedInterceptor<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>lookupPath<span class="token punctuation">,</span> pathMatcher<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         chain<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>mappedInterceptor<span class="token punctuation">.</span><span class="token function">getInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> chain<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Return the adapted interceptors as HandlerInterceptor array. * @return the array of HandlerInterceptors, or &lt;code>null&lt;/code> if none */</span><span class="token keyword">protected</span> <span class="token keyword">final</span> HandlerInterceptor<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getAdaptedInterceptors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">int</span> count <span class="token operator">=</span> adaptedInterceptors<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> adaptedInterceptors<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HandlerInterceptor</span><span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">:</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="4-3-3-getHandlerInternal-HttpServletRequest-request-获取Handler"><a href="#4-3-3-getHandlerInternal-HttpServletRequest-request-获取Handler" class="headerlink" title="4.3.3 getHandlerInternal(HttpServletRequest request)获取Handler"></a>4.3.3 getHandlerInternal(HttpServletRequest request)获取Handler</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Look up a handler for the URL path of the given request. * @param request current HTTP request * @return the handler instance, or &lt;code>null&lt;/code> if none found */</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> Object <span class="token function">getHandlerInternal</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>   String lookupPath <span class="token operator">=</span> <span class="token function">getUrlPathHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLookupPathForRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>   Object handler <span class="token operator">=</span> <span class="token function">lookupHandler</span><span class="token punctuation">(</span>lookupPath<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// We need to care for the default handler directly, since we need to</span>      <span class="token comment" spellcheck="true">// expose the PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE for it as well.</span>      Object rawHandler <span class="token operator">=</span> null<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>lookupPath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         rawHandler <span class="token operator">=</span> <span class="token function">getRootHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>rawHandler <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>         rawHandler <span class="token operator">=</span> <span class="token function">getDefaultHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>rawHandler <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// Bean name or resolved handler?</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>rawHandler <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String handlerName <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> rawHandler<span class="token punctuation">;</span>            rawHandler <span class="token operator">=</span> <span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>handlerName<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token function">validateHandler</span><span class="token punctuation">(</span>rawHandler<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>         handler <span class="token operator">=</span> <span class="token function">buildPathExposingHandler</span><span class="token punctuation">(</span>rawHandler<span class="token punctuation">,</span> lookupPath<span class="token punctuation">,</span> lookupPath<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Mapping ["</span> <span class="token operator">+</span> lookupPath <span class="token operator">+</span> <span class="token string">"] to "</span> <span class="token operator">+</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"No handler mapping found for ["</span> <span class="token operator">+</span> lookupPath <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> handler<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="4-3-4-lookupHandler-lookupPath-request-根据给定url-path和request获取Handler"><a href="#4-3-4-lookupHandler-lookupPath-request-根据给定url-path和request获取Handler" class="headerlink" title="4.3.4 lookupHandler(lookupPath, request)根据给定url path和request获取Handler"></a>4.3.4 lookupHandler(lookupPath, request)根据给定url path和request获取Handler</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> Object <span class="token function">lookupHandler</span><span class="token punctuation">(</span>String urlPath<span class="token punctuation">,</span> HttpServletRequest request<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// Direct match?</span>   Object handler <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handlerMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>urlPath<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// Bean name or resolved handler?</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         String handlerName <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> handler<span class="token punctuation">;</span>         handler <span class="token operator">=</span> <span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>handlerName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token function">validateHandler</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token function">buildPathExposingHandler</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> urlPath<span class="token punctuation">,</span> urlPath<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// Pattern match?</span>   List<span class="token operator">&lt;</span>String<span class="token operator">></span> matchingPatterns <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span>String registeredPattern <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handlerMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getPathMatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>registeredPattern<span class="token punctuation">,</span> urlPath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         matchingPatterns<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>registeredPattern<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   String bestPatternMatch <span class="token operator">=</span> null<span class="token punctuation">;</span>   Comparator<span class="token operator">&lt;</span>String<span class="token operator">></span> patternComparator <span class="token operator">=</span> <span class="token function">getPathMatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPatternComparator</span><span class="token punctuation">(</span>urlPath<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>matchingPatterns<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>matchingPatterns<span class="token punctuation">,</span> patternComparator<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Matching patterns for request ["</span> <span class="token operator">+</span> urlPath <span class="token operator">+</span> <span class="token string">"] are "</span> <span class="token operator">+</span> matchingPatterns<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      bestPatternMatch <span class="token operator">=</span> matchingPatterns<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>bestPatternMatch <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      handler <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handlerMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>bestPatternMatch<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// Bean name or resolved handler?</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         String handlerName <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> handler<span class="token punctuation">;</span>         handler <span class="token operator">=</span> <span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>handlerName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token function">validateHandler</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>      String pathWithinMapping <span class="token operator">=</span> <span class="token function">getPathMatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">extractPathWithinPattern</span><span class="token punctuation">(</span>bestPatternMatch<span class="token punctuation">,</span> urlPath<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// There might be multiple 'best patterns', let's make sure we have the correct URI template variables</span>      <span class="token comment" spellcheck="true">// for all of them</span>      Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> uriTemplateVariables <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>String matchingPattern <span class="token operator">:</span> matchingPatterns<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>patternComparator<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>bestPatternMatch<span class="token punctuation">,</span> matchingPattern<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            uriTemplateVariables                  <span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span><span class="token function">getPathMatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">extractUriTemplateVariables</span><span class="token punctuation">(</span>matchingPattern<span class="token punctuation">,</span> urlPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"URI Template variables for request ["</span> <span class="token operator">+</span> urlPath <span class="token operator">+</span> <span class="token string">"] are "</span> <span class="token operator">+</span> uriTemplateVariables<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token function">buildPathExposingHandler</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> bestPatternMatch<span class="token punctuation">,</span> pathWithinMapping<span class="token punctuation">,</span> uriTemplateVariables<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// No handler found...</span>   <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="4-4-1-HandlerAdapter-getHandlerAdapter-Object-handler-根据Handler获取HandlerAdapter"><a href="#4-4-1-HandlerAdapter-getHandlerAdapter-Object-handler-根据Handler获取HandlerAdapter" class="headerlink" title="4.4.1 HandlerAdapter getHandlerAdapter(Object handler)根据Handler获取HandlerAdapter"></a>4.4.1 HandlerAdapter getHandlerAdapter(Object handler)根据Handler获取HandlerAdapter</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Return the HandlerAdapter for this handler object. * @param handler the handler object to find an adapter for * @throws ServletException if no HandlerAdapter can be found for the handler. This is a fatal error. */</span><span class="token keyword">protected</span> HandlerAdapter <span class="token function">getHandlerAdapter</span><span class="token punctuation">(</span>Object handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span>HandlerAdapter ha <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handlerAdapters<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Testing handler adapter ["</span> <span class="token operator">+</span> ha <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>ha<span class="token punctuation">.</span><span class="token function">supports</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> ha<span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServletException</span><span class="token punctuation">(</span><span class="token string">"No adapter for handler ["</span> <span class="token operator">+</span> handler <span class="token operator">+</span>         <span class="token string">"]: Does your handler implement a supported interface like Controller?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="4-4-2-supports-Object-handler"><a href="#4-4-2-supports-Object-handler" class="headerlink" title="4.4.2 supports(Object handler)"></a>4.4.2 supports(Object handler)</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span>Object handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token punctuation">(</span>handler <span class="token keyword">instanceof</span> <span class="token class-name">Controller</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="4-5-1-使用处理器完成对请求的处理"><a href="#4-5-1-使用处理器完成对请求的处理" class="headerlink" title="4.5.1 使用处理器完成对请求的处理"></a>4.5.1 使用处理器完成对请求的处理</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> ModelAndView <span class="token function">handle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">)</span>      <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>   <span class="token punctuation">(</span><span class="token punctuation">(</span>Servlet<span class="token punctuation">)</span> handler<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span>ServletRequest req<span class="token punctuation">,</span> ServletResponse res<span class="token punctuation">)</span>    <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException<span class="token punctuation">{</span>    HttpServletRequest  request<span class="token punctuation">;</span>    HttpServletResponse response<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>req <span class="token keyword">instanceof</span> <span class="token class-name">HttpServletRequest</span> <span class="token operator">&amp;&amp;</span>            res <span class="token keyword">instanceof</span> <span class="token class-name">HttpServletResponse</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServletException</span><span class="token punctuation">(</span><span class="token string">"non-HTTP request or response"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    request <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletRequest<span class="token punctuation">)</span> req<span class="token punctuation">;</span>    response <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletResponse<span class="token punctuation">)</span> res<span class="token punctuation">;</span>    <span class="token function">service</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="4-5-2-service-HttpServletRequest-req-HttpServletResponse-resp"><a href="#4-5-2-service-HttpServletRequest-req-HttpServletResponse-resp" class="headerlink" title="4.5.2 service(HttpServletRequest req, HttpServletResponse resp)"></a>4.5.2 service(HttpServletRequest req, HttpServletResponse resp)</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span>    <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException<span class="token punctuation">{</span>    String method <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>METHOD_GET<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> lastModified <span class="token operator">=</span> <span class="token function">getLastModified</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lastModified <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// servlet doesn't support if-modified-since, no reason</span>            <span class="token comment" spellcheck="true">// to go through further expensive logic</span>            <span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">long</span> ifModifiedSince <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getDateHeader</span><span class="token punctuation">(</span>HEADER_IFMODSINCE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ifModifiedSince <span class="token operator">&lt;</span> lastModified<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// If the servlet mod time is later, call doGet()</span>                <span class="token comment" spellcheck="true">// Round down to the nearest second for a proper compare</span>                <span class="token comment" spellcheck="true">// A ifModifiedSince of -1 will always be less</span>                <span class="token function">maybeSetLastModified</span><span class="token punctuation">(</span>resp<span class="token punctuation">,</span> lastModified<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                resp<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span>HttpServletResponse<span class="token punctuation">.</span>SC_NOT_MODIFIED<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>METHOD_HEAD<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> lastModified <span class="token operator">=</span> <span class="token function">getLastModified</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">maybeSetLastModified</span><span class="token punctuation">(</span>resp<span class="token punctuation">,</span> lastModified<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">doHead</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>METHOD_POST<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">doPost</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>METHOD_PUT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">doPut</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>METHOD_DELETE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">doDelete</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>METHOD_OPTIONS<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">doOptions</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>METHOD_TRACE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">doTrace</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//</span>        <span class="token comment" spellcheck="true">// Note that this means NO servlet supports whatever</span>        <span class="token comment" spellcheck="true">// method was requested, anywhere on this server.</span>        <span class="token comment" spellcheck="true">//</span>        String errMsg <span class="token operator">=</span> lStrings<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"http.method_not_implemented"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> errArgs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        errArgs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> method<span class="token punctuation">;</span>        errMsg <span class="token operator">=</span> MessageFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>errMsg<span class="token punctuation">,</span> errArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">sendError</span><span class="token punctuation">(</span>HttpServletResponse<span class="token punctuation">.</span>SC_NOT_IMPLEMENTED<span class="token punctuation">,</span> errMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4-5-3-doGet-HttpServletRequest-req-HttpServletResponse-resp"><a href="#4-5-3-doGet-HttpServletRequest-req-HttpServletResponse-resp" class="headerlink" title="4.5.3 doGet(HttpServletRequest req, HttpServletResponse resp)"></a>4.5.3 doGet(HttpServletRequest req, HttpServletResponse resp)</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span>    <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException<span class="token punctuation">{</span>    String protocol <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getProtocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String msg <span class="token operator">=</span> lStrings<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"http.method_get_not_supported"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>protocol<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"1.1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        resp<span class="token punctuation">.</span><span class="token function">sendError</span><span class="token punctuation">(</span>HttpServletResponse<span class="token punctuation">.</span>SC_METHOD_NOT_ALLOWED<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        resp<span class="token punctuation">.</span><span class="token function">sendError</span><span class="token punctuation">(</span>HttpServletResponse<span class="token punctuation">.</span>SC_BAD_REQUEST<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 安装 MongoDB</title>
      <link href="/undefined/b285.html"/>
      <url>/undefined/b285.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-搜索镜像"><a href="#1-搜索镜像" class="headerlink" title="1. 搜索镜像"></a>1. 搜索镜像</h3><p>查找Docker Hub上的mongo镜像。 </p><pre class=" language-bash"><code class="language-bash">root@Aspire:~<span class="token comment" spellcheck="true"># docker search mongo</span>NAME           DESCRIPTION                                    STARS OFFICIAL AUTOMATEDmongo          MongoDB document databases provide high avai…  6877   <span class="token punctuation">[</span>OK<span class="token punctuation">]</span>mongo-express  Web-based MongoDB admin interface, written w…  692    <span class="token punctuation">[</span>OK<span class="token punctuation">]</span>tutum/mongodb  MongoDB Docker image – listens <span class="token keyword">in</span> port 27017…  230             <span class="token punctuation">[</span>OK<span class="token punctuation">]</span></code></pre><h3 id="2-拉取MongoDB镜像"><a href="#2-拉取MongoDB镜像" class="headerlink" title="2. 拉取MongoDB镜像"></a>2. 拉取MongoDB镜像</h3><p>拉取Docker Hub上的mongo镜像。</p><pre class=" language-bash"><code class="language-bash">root@Aspire:~<span class="token comment" spellcheck="true"># docker pull mongo</span>Using default tag: latestlatest: Pulling from library/mongo23884877105a: Downloading <span class="token punctuation">[</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">></span>                 <span class="token punctuation">]</span>  6.626MB/26.69MBbc38caa0f5b9: Download complete2910811b6c42: Download complete36505266dcc6: Download completea4d269900d94: Download complete5e2526abb80a: Download completed3eece1f39ec: Download complete358ed78d3204: Download complete1a878b8604ae: Download completedde03a2883d0: Download complete4ffe534daa34: Downloading <span class="token punctuation">[</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token operator">></span>                      <span class="token punctuation">]</span>  19.36MB/129.1MBf164ba21e17c: Download complete6494c387442c: Download complete</code></pre><h3 id="3-查看本地镜像列表"><a href="#3-查看本地镜像列表" class="headerlink" title="3. 查看本地镜像列表"></a>3. 查看本地镜像列表</h3><p>查看MongoDB镜像是否拉取成功。</p><pre class=" language-bash"><code class="language-bash">root@Aspire:~<span class="token comment" spellcheck="true"># docker images | grep mongo</span>mongo       latest      3f3daf863757     4 weeks ago    388MB</code></pre><h3 id="4-创建存储目录"><a href="#4-创建存储目录" class="headerlink" title="4. 创建存储目录"></a>4. 创建存储目录</h3><p>创建MongoDB持久化文件目录。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> -p /home/data/mongo/data</code></pre><h3 id="5-启动容器"><a href="#5-启动容器" class="headerlink" title="5.  启动容器"></a>5.  启动容器</h3><p>options说明:</p><ul><li>–restart=always: 重启策略</li><li>-d: 后台运行容器，并返回容器ID</li><li>-p: 端口映射，格式为：<strong>主机(宿主)端口:容器端口</strong></li><li>–name: 为容器指定一个名称</li><li>-v: 给容器挂载存储卷，挂载到容器的某个目录</li></ul><pre class=" language-bash"><code class="language-bash">root@Aspire:~<span class="token comment" spellcheck="true"># docker run --restart=always -p 27017:27017 --name mongo -v /home/data/mongo/data:/data/db -d mongo --auth</span><span class="token comment" spellcheck="true">#启动后的信息</span>96e65e736ef5fa393b0b04bad17f955cb94bc6b1b378b534166ccba87e003366</code></pre><h3 id="6-查看容器信息"><a href="#6-查看容器信息" class="headerlink" title="6. 查看容器信息"></a>6. 查看容器信息</h3><p>查看容器ID信息</p><pre class=" language-bash"><code class="language-bash">root@Aspire:~<span class="token comment" spellcheck="true"># docker ps</span>CONTAINER ID  IMAGE  COMMAND                 CREATED        STATUS        PORTS                     NAMES96e65e736ef5  mongo  <span class="token string">"docker-entrypoint.s…"</span>  4 minutes ago  Up 4 minutes  0.0.0.0:27017-<span class="token operator">></span>27017/tcp  mongo</code></pre><h3 id="7-配置MongoDB权限"><a href="#7-配置MongoDB权限" class="headerlink" title="7. 配置MongoDB权限"></a>7. 配置MongoDB权限</h3><p>以admin用户身份进入mongo<br>         命令: docker exec -it <strong>容器ID</strong> mongo admin</p><pre class=" language-bash"><code class="language-bash">root@Aspire:~<span class="token comment" spellcheck="true"># docker exec -it 96e65e736ef5 mongo admin</span><span class="token operator">></span> db.createUser<span class="token punctuation">(</span><span class="token punctuation">{</span>user: <span class="token string">'admin'</span>, pwd: <span class="token string">'admin'</span>, roles: <span class="token punctuation">[</span><span class="token punctuation">{</span>role: <span class="token string">"root"</span>, db: <span class="token string">"admin"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Successfully added user: <span class="token punctuation">{</span>        <span class="token string">"user"</span> <span class="token keyword">:</span> <span class="token string">"admin"</span>,        <span class="token string">"roles"</span> <span class="token keyword">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span>                        <span class="token string">"role"</span> <span class="token keyword">:</span> <span class="token string">"root"</span>,                        <span class="token string">"db"</span> <span class="token keyword">:</span> <span class="token string">"admin"</span>                <span class="token punctuation">}</span>        <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token operator">></span> <span class="token keyword">exit</span><span class="token punctuation">;</span>MongoDB shell version v4.2.6connecting to: mongodb://127.0.0.1:27017/admin?compressors<span class="token operator">=</span>disabled<span class="token operator">&amp;</span>gssapiServiceName<span class="token operator">=</span>mongodbImplicit session: session <span class="token punctuation">{</span> <span class="token string">"id"</span> <span class="token keyword">:</span> UUID<span class="token punctuation">(</span><span class="token string">"ed34651c-15c1-4b1a-8074-c44976f7b48f"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>MongoDB server version: 4.2.6Welcome to the MongoDB shell.For interactive help, <span class="token function">type</span> <span class="token string">"help"</span><span class="token keyword">.</span>For <span class="token function">more</span> comprehensive documentation, see        http://docs.mongodb.org/Questions? Try the support group        http://groups.google.com/group/mongodb-user<span class="token operator">></span> <span class="token operator">></span> db.createUser<span class="token punctuation">(</span><span class="token punctuation">{</span>user: <span class="token string">'admin'</span>, pwd: <span class="token string">'admin'</span>, roles: <span class="token punctuation">[</span><span class="token punctuation">{</span>role: <span class="token string">"root"</span>, db: <span class="token string">"admin"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>2020-05-24T15:43:19.449+0000 E  QUERY    <span class="token punctuation">[</span>js<span class="token punctuation">]</span> uncaught exception: SyntaxError: expected expression, got <span class="token string">'>'</span> <span class="token keyword">:</span>@<span class="token punctuation">(</span>shell<span class="token punctuation">)</span>:1:0<span class="token operator">></span> Successfully added user: <span class="token punctuation">{</span><span class="token punctuation">..</span>. <span class="token string">"user"</span> <span class="token keyword">:</span> <span class="token string">"admin"</span>,<span class="token punctuation">..</span>. <span class="token string">"roles"</span> <span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token punctuation">..</span>. <span class="token punctuation">{</span><span class="token punctuation">..</span>. <span class="token string">"role"</span> <span class="token keyword">:</span> <span class="token string">"root"</span>,<span class="token punctuation">..</span>. <span class="token string">"db"</span> <span class="token keyword">:</span> <span class="token string">"admin"</span><span class="token punctuation">..</span>. <span class="token punctuation">}</span><span class="token punctuation">..</span>. <span class="token punctuation">]</span><span class="token punctuation">..</span>. <span class="token punctuation">}</span>2020-05-24T15:43:19.452+0000 E  QUERY    <span class="token punctuation">[</span>js<span class="token punctuation">]</span> uncaught exception: SyntaxError: unexpected token: identifier <span class="token keyword">:</span>@<span class="token punctuation">(</span>shell<span class="token punctuation">)</span>:1:13<span class="token operator">></span> <span class="token operator">></span> <span class="token keyword">exit</span><span class="token punctuation">;</span>2020-05-24T15:43:27.456+0000 E  QUERY    <span class="token punctuation">[</span>js<span class="token punctuation">]</span> uncaught exception: SyntaxError: expected expression, got <span class="token string">'>'</span> <span class="token keyword">:</span>@<span class="token punctuation">(</span>shell<span class="token punctuation">)</span>:1:0<span class="token operator">></span></code></pre><h3 id="8-测试"><a href="#8-测试" class="headerlink" title="8. 测试"></a>8. 测试</h3><p>测试否OK, MongoDB身份认证</p><pre class=" language-bash"><code class="language-bash">root@Aspire:~<span class="token comment" spellcheck="true"># docker exec -it 96e65e736ef5 mongo admin</span><span class="token operator">></span> db.auth<span class="token punctuation">(</span><span class="token string">"admin"</span>, <span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>1<span class="token operator">></span> <span class="token keyword">exit</span><span class="token punctuation">;</span>MongoDB shell version v4.2.6connecting to: mongodb://127.0.0.1:27017/admin?compressors<span class="token operator">=</span>disabled<span class="token operator">&amp;</span>gssapiServiceName<span class="token operator">=</span>mongodbImplicit session: session <span class="token punctuation">{</span> <span class="token string">"id"</span> <span class="token keyword">:</span> UUID<span class="token punctuation">(</span><span class="token string">"d2573daf-38b0-430e-aed3-e36187e8c800"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>MongoDB server version: 4.2.6<span class="token operator">></span> <span class="token operator">></span> db.auth<span class="token punctuation">(</span><span class="token string">"admin"</span>, <span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>2020-05-24T15:45:54.154+0000 E  QUERY    <span class="token punctuation">[</span>js<span class="token punctuation">]</span> uncaught exception: SyntaxError: expected expression, got <span class="token string">'>'</span> <span class="token keyword">:</span>@<span class="token punctuation">(</span>shell<span class="token punctuation">)</span>:1:0<span class="token operator">></span> 11<span class="token operator">></span> <span class="token operator">></span> <span class="token keyword">exit</span><span class="token punctuation">;</span>2020-05-24T15:45:58.341+0000 E  QUERY    <span class="token punctuation">[</span>js<span class="token punctuation">]</span> uncaught exception: SyntaxError: expected expression, got <span class="token string">'>'</span> <span class="token keyword">:</span>@<span class="token punctuation">(</span>shell<span class="token punctuation">)</span>:1:0<span class="token operator">></span><span class="token operator">></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Software_Install </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubantu,MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hello hexo</title>
      <link href="/undefined/b659.html"/>
      <url>/undefined/b659.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
